{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0},{"_id":"source/images/hypers_logo.png","path":"images/hypers_logo.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"913c4cc700890db3d188451261c2c3a7e66fbc95","modified":1500533664000},{"_id":"source/favicon.png","hash":"406758ede47ae8c827278dcbb7f32092e5fa4885","modified":1500533758000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1500532314000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1500532314000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1500532314000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1500532314000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1500532314000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1500532314000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1500532314000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1500532314000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1500532314000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1500532314000},{"_id":"themes/next/_config.yml","hash":"c1002f4f6d312d4501e586cd48534a1a35f6d4e0","modified":1500533998000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1500532314000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1500532314000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1500532314000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1500532314000},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1500532314000},{"_id":"source/_posts/hello-world.md","hash":"c4bde05b24d069fc3c7130a6b385ea6df56d00bf","modified":1500536089000},{"_id":"source/images/hypers_logo.png","hash":"1c793a16dea1e287cff2dbfd8d75fb1a316f5ff6","modified":1500533597000},{"_id":"source/tags/index.md","hash":"cfadb1f7ad04431bcbe81b709bd59e2061161139","modified":1500534319000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1500532314000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1500532264000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1500532314000},{"_id":"themes/next/.git/index","hash":"2a0f6babf90fd868581a4f94e2e05ec8054ab2cb","modified":1500532314000},{"_id":"themes/next/.git/packed-refs","hash":"c57d61674a805612fbee692cebe4425e3f19c069","modified":1500532314000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"ff383596cc1671f389d4500e67e004ae300d083e","modified":1500532314000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1500532314000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"4508a40a071e7cc575560531af3de456f5e875f2","modified":1500532314000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1500532314000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1500532314000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1500532314000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1500532314000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1500532314000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1500532314000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1500532314000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1500532314000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1500532314000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1500532314000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1500532314000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1500532314000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1500532314000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1500532314000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1500532314000},{"_id":"themes/next/layout/index.swig","hash":"8b92e9765236769e90c6074339ffb2f34e2ad98e","modified":1503159983000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1500532314000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1500532314000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1500532314000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1500532314000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1500532314000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1500532314000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1500532314000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1500532314000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1500532314000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1500532314000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500532314000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1500532264000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1500532264000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1500532264000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1500532264000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1500532264000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1500532264000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1500532264000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1500532264000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1500532264000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1500532264000},{"_id":"themes/next/.git/logs/HEAD","hash":"0e20e30db9b87d5eb4b8e7ffb3104c40dda0b85c","modified":1500532314000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1500532314000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1500532314000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1500532314000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1500532314000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1500532314000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1500532314000},{"_id":"themes/next/layout/_macro/post.swig","hash":"d6fe43765bc01017ca3f9a384eeddaf28b6382c8","modified":1500532314000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3dac0f5af6a590ea49a3d172ff6fafbf50cc2604","modified":1500532314000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1500532314000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1500532314000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1500532314000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1500532314000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1500532314000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1500532314000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1500532314000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1500532314000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1500532314000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1500532314000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1500532314000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1500532314000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1500532314000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1500532314000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1500532314000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1500532314000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1500532314000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1500532314000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1500532314000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1500532314000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1500532314000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1500532314000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1500532314000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1500532314000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1500532314000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1500532314000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1500532314000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1500532314000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1500532314000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1500532314000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1500532314000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1500532314000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1500532314000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500532314000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1500532314000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500532314000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1500532314000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1500532314000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500532314000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500532314000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500532314000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500532314000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500532314000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500532314000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500532314000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1500532314000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1500532314000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1500532314000},{"_id":"themes/next/.git/refs/heads/master","hash":"45791129aff92e75d2d2c69a95102e84528071c1","modified":1500532314000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1500532314000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1500532314000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1500532314000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1500532314000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1500532314000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1500532314000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1500532314000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1500532314000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1500532314000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1500532314000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1500532314000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1500532314000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1500532314000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1500532314000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1500532314000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1500532314000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1500532314000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1500532314000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1500532314000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1500532314000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"2273c5d4f4724f1b7866e061fb75c7ff45f41180","modified":1503196995000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"ceceb93029d98cd63a689ad08e25fbe7f6b7ee1c","modified":1500532314000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1500532314000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1500532314000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1500532314000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1500532314000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"19ac2e528f23beae1c9911bfd8635a1683a6f9e6","modified":1503160959000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1500532314000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1500532314000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1500532314000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1500532314000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1500532314000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1500532314000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1500532314000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1500532314000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1500532314000},{"_id":"themes/next/source/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1500532314000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1500532314000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1500532314000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1500532314000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1500532314000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1500532314000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1500532314000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1500532314000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1500532314000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1500532314000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1500532314000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1500532314000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1500532314000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1500532314000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1500532314000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1500532314000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1500532314000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1500532314000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1500532314000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1500532314000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1500532314000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1500532314000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1500532314000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1500532314000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500532314000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0e20e30db9b87d5eb4b8e7ffb3104c40dda0b85c","modified":1500532314000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1500532314000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1500532314000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b5074a61d04757b6adf8f757668b9fea01730a6c","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1500532314000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1500532314000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1500532314000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1500532314000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1500532314000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1500532314000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1500532314000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1500532314000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1500532314000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1500532314000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1500532314000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1500532314000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1500532314000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1500532314000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1500532314000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1500532314000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1500532314000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0e20e30db9b87d5eb4b8e7ffb3104c40dda0b85c","modified":1500532314000},{"_id":"themes/next/.git/objects/pack/pack-cf3fba9fe5e71a1289ec271594de5ca06f8d4704.idx","hash":"3d72341ae827b584cf9e8579ff7d8fb014ac47d8","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1500532314000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1500532314000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1500532314000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1500532314000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1500532314000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1500532314000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1500532314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1500532314000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1500532314000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1500532314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1500532314000},{"_id":"themes/next/.git/objects/pack/pack-cf3fba9fe5e71a1289ec271594de5ca06f8d4704.pack","hash":"7c48a890d0500fabcf889bc5d35632e8e4fa2375","modified":1500532314000},{"_id":"public/2017/07/20/hello-world/index.html","hash":"8d5abed5740a373bb6240d4064e02f2f2b436ddd","modified":1500536117767},{"_id":"public/archives/index.html","hash":"3abe9c952fed041d4594e555ab74d8c2ce3450ed","modified":1500535831536},{"_id":"public/archives/2017/index.html","hash":"6294ffb9b921ff81b09c151405ebf9073bdba82b","modified":1500535831537},{"_id":"public/archives/2017/07/index.html","hash":"d434ab222942883e558891382fcf05f972b9c2c2","modified":1500535831537},{"_id":"public/index.html","hash":"afc8c2bd66f504454cf92d0ed0841fcd3a4f3e6e","modified":1500536117766},{"_id":"public/tags/index.html","hash":"66026875e4c854e73cc2002feb8b44befa21c335","modified":1500535831536},{"_id":"public/favicon.png","hash":"406758ede47ae8c827278dcbb7f32092e5fa4885","modified":1500534327419},{"_id":"public/images/hypers_logo.png","hash":"1c793a16dea1e287cff2dbfd8d75fb1a316f5ff6","modified":1500534327419},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1500534327419},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1500534327419},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1500534327419},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1500534327419},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1500534327419},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1500534327419},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1500534327419},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1500534327419},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1500534327420},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500534327420},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1500534327420},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500534327420},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1500534327420},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1500534327420},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1500534327420},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1500534327420},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1500534327420},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1500534327420},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1500534327420},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1500534327420},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1500534327420},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1500534327420},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1500534327420},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1500534327420},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1500534327420},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1500534327421},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1500534327421},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1500534327421},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1500534328054},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1500534328066},{"_id":"public/js/src/bootstrap.js","hash":"03190d70e2347a0b29d185295445c6762a4455e8","modified":1500534328080},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1500534328080},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1500534328080},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1500534328080},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1500534328080},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1500534328080},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1500534328080},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1500534328080},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1500534328080},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1500534328080},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1500534328080},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1500534328080},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1500534328080},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1500534328080},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1500534328080},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1500534328081},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1500534328081},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1500534328081},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1500534328081},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1500534328081},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1500534328081},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1500534328081},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1500534328082},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1500534328082},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1500534328082},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1500534328082},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1500534328082},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1500534328082},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1500534328082},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1500534328082},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1500534328082},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1500534328083},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1500534328083},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1500534328083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1500534328083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1500534328083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1500534328083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1500534328083},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1500534328083},{"_id":"public/css/main.css","hash":"391a9ed399b7052aaccdeca3dd0f939116a31570","modified":1500534328083},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1500534328083},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1500534328083},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1500534328083},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1500534328083},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1500534328084},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500534328084},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1500534328084},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1500534328084},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1500534328084},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500534328084},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1500534328084},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1500534328084},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1500534328084},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1500534328084},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1500534328084},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1500534328084},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1500534328084},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1500534328085},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1500534328086},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1500534328086},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1500534328086},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1500534328094},{"_id":"source/CNAME","hash":"650ddb91397050fa7774d196a95361da610e8061","modified":1500886542000},{"_id":"public/tags/HyperS/index.html","hash":"ca7fedf20ebd413a9b7b69bd0300d3a650295ec9","modified":1500535831538},{"_id":"public/CNAME","hash":"0bf6b6a5ff6f101080c48957acf348e172adc655","modified":1500535831538},{"_id":"source/_posts/Sass & Compass 教程 -- 语法篇(一).md","hash":"7eee981ccb11d4bda858c38fe38b1c58c830fd93","modified":1502085783000},{"_id":"source/_posts/Sass & Compass 教程 -- 语法篇(二).md","hash":"5fe41d5612b318aaeb52b3b96fd8a1d0bb2ea3c6","modified":1503114352000},{"_id":"source/_posts/git-tutorials.md","hash":"b9c7607fc7d791619422266d2d52a6978447ad9f","modified":1502085783000},{"_id":"source/_posts/modern-front-end-develop.md","hash":"f1408d43100b91c6c246f8f2fbe31334ea9ee7f4","modified":1502028650000},{"_id":"source/_posts/ie-issue.md","hash":"c5755e9a940e37c0564e8ebe1d1cda8f7abf802f","modified":1502085783000},{"_id":"source/_posts/hello-hypers.md","hash":"d2af27deae7284b2a8dab7fae3b2c415608ea94e","modified":1502085783000},{"_id":"source/_posts/react-permission.md","hash":"515ebc93c9e04d98c530ef3a433c218f7498d65f","modified":1500742019000},{"_id":"source/_posts/test-coverage.md","hash":"5cff902f39bc3cb73e6647e0277ff32a9e1c6b0c","modified":1503210248000},{"_id":"source/_posts/react-issue.md","hash":"f1e6000f4c9737bc206558428000f56328d326d0","modified":1502028650000},{"_id":"source/_posts/git-tutorials/git-commit-ammend1.png","hash":"92879fb946c1fb36a7d8c3761489bfd4cfb1d80c","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-commit-ammend2.png","hash":"a78d7c2866ff798f2d68e002e19d1eca45a158e2","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-fetch.png","hash":"63f248eb08ad91c2422866118f2393167dcf7ca7","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-init-bare.svg","hash":"2751f1260a0025246330c6d2f1972dc7a652909e","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-rebase-1.png","hash":"df65a391f78de3e3ad1998686cd1d106f293dc00","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-merge.png","hash":"594618b3a73deca3866b3b39410ae1c829190bff","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-rebase-3.png","hash":"c747adcfba23bc91bff14c641c3eddb860a7520e","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-revert-show2.png","hash":"61f16a6d218cbff1cf611160a7592b3e5f553058","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-revert-show1.png","hash":"679e6d545a91e9c98276649edcb77db91c6bd73c","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-revert.png","hash":"93009f754a989104db039c7cb8b94837a35f0d13","modified":1502032277000},{"_id":"source/_posts/git-tutorials/version-control-3.png","hash":"30065baae2539f7a10c824fa9773f77bfed46bff","modified":1502032277000},{"_id":"source/_posts/git-tutorials/version-control-1.png","hash":"b7d522c9641a372754114fe77c4aa0b6359613ba","modified":1502032277000},{"_id":"source/_posts/git-tutorials/version-control-2.png","hash":"497b5aff4ce9b557ad6bf3ebfdb047362f3f32d8","modified":1502032277000},{"_id":"source/_posts/git-tutorials/workflow.png","hash":"7ad1ed7de6b97eb35f10e5ebebea2818ee6c2627","modified":1502032277000},{"_id":"source/_posts/modern-front-end-develop/1233754-389a7d4f147c3857.jpg","hash":"d2cbcd9978f3fbcab7190663ce146f436258626f","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/2-way.png","hash":"24a47010dd2497bbbf2390bbb02a35e87f15af85","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/FLUX.png","hash":"a6588c3deadc2f71b43ea8c8d9893aa2a51aa5e5","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/FE-MVC.jpg","hash":"fef34712a29d428ce3c84e18e5885226a1002fda","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/300px-Tim_Berners-Lee_closeup.jpg","hash":"5c8f12707e1a1ac7b125062a6a2f543cf924a4d6","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/CGI.png","hash":"4b6f7b31b1840bc001666237827081619503465b","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/MVVM.png","hash":"42ab1ddc9058570653ad4443fa82e8dc7ccc1026","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/MV.png","hash":"2ec0215da3ad27d260effa31ad044260204b5ba9","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/MVC.gif","hash":"be0068f1c367432c9cc84b2ddb94754cc7f1e8ce","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/MVP.jpg","hash":"4e6822de34359eea96df018a91b95a03a3acdfff","modified":1502028650000},{"_id":"source/_posts/git-tutorials/git-rebase-2.png","hash":"a3704efca58bbb3a0d04c0c47d36d3bd8db9aa4c","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-rebase-4.png","hash":"2aed44d247f88262675addaadef521118deb597e","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-reflog.png","hash":"0cdba1fa8975e87edb685712751b3e90f78ec33c","modified":1502032277000},{"_id":"source/_posts/git-tutorials/git-status-screenshots.png","hash":"0437685708bcc4e0db0d45135f53fed61bfcc01c","modified":1502032277000},{"_id":"source/_posts/modern-front-end-develop/MVC.png","hash":"41dafc7686e290fe57878a7c8cca69f644301271","modified":1502028650000},{"_id":"source/_posts/modern-front-end-develop/1-way.jpg","hash":"51473ae889e11692885a253cfdb7cc465167adc4","modified":1502028650000},{"_id":"source/_posts/test-coverage/1.png","hash":"7c11a62c514f84c656cd327f74da9f49035c71a7","modified":1503124922000},{"_id":"source/_posts/git-tutorials/git-outline.png","hash":"7f4b7d308f6692efcc6e161108bdedc2168d0a3b","modified":1502032277000},{"_id":"source/_posts/modern-front-end-develop/snipaste_20170730_122053.png","hash":"0fef6f1d38f95bdb019ccaa08fcb47349c030305","modified":1502028650000},{"_id":"source/_posts/test-coverage/2.png","hash":"72982c70a0358788973ce2185cfbc54ec3a24343","modified":1503128228000},{"_id":"source/_posts/git-tutorials/cover.jpg","hash":"b3f533f68ae95c38c3ff4da6c67cde6cc7c465c1","modified":1502032277000},{"_id":"source/_posts/git-tutorials/workflow2.png","hash":"6a72ac7b2c65e301ba07075b5f909b9e2500ed1a","modified":1502032277000},{"_id":"source/_posts/git-tutorials/cover-end.jpg","hash":"1422f30e6eefe3d5994defb1933cff85f25a8ae9","modified":1502032277000}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-07-20T07:04:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-07-20 15:04:29\ntype: \"tags\"\n---\n","updated":"2017-07-20T07:05:19.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj5c3e8j90001z4s6jghk3az8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Sass & Compass 教程 —— 语法篇（一）","date":"2017-08-06T09:36:00.000Z","_content":"\n> 阅读本篇你将收获\n  - 变量需要先声明后使用，且不存在变量提升。\n  - 嵌套使得样式结构清晰。\n  - 利用导入来分离代码，优化文件组织。\n\n<!-- more -->\n### 1. 变量\n\nSASS使用 `$` 符号来标志变量。变量遵循**先声明后使用**的原则。\n```sass\nbody { \n  font-size: $normal-size;\n}\n\n$normal-size: 14px;\n\n// 编译代码将会得到错误输出\n// Undefined variable: \"$normal-size\".\n```\n变量的声明具有**作用域**，我们甚至可以多次定义同一个变量的值。看下面的例子：\n```sass\n$normal-size: 14px;\n\nbody { \n  $normal-size: 12px;\n  font-size: $normal-size;\n}\n\np {\n  font-size: $normal-size;\n}\n\n$normal-size: 12px;\n\nh6 {\n  font-size: $normal-size;\n}\n```\n编译后：\n```css\nbody {\n  font-size: 12px;\n}\n\np {\n  font-size: 14px;\n}\n\nh6 {\n  font-size: 12px;\n}\n```\n在上面例子中，`body`内部声明的变量仅仅在其内部产生作用，同样的变量在`p`使用时没有被影响，然而，在同一作用域内，再次定义变量的值，只会影响后面的规则，前面的规则却没有被影响，这就是为何`h6`与`p`字号结果不一。可见 SASS 的编译过程是从上到下依次执行的，但与 js 不一样的是它不存在变量的提升。\n**它的基本原理是：变量被值替换。**\n\n\n----------\n### 2. 嵌套\n\n嵌套的存在使得我们编写规则更加直观，层次结构十分清晰。就像是在 `html` 标签之间相互嵌套一般。**嵌套是为解决重复书写的问题。**先来个直观的感受：\n```sass\n// 在 CSS 中我们使用下面的形式来描述层级结构的样式\narticle h1 {\n  color: #333;\n}\narticle p {\n  color: #eee;\n}\n\n// SASS 使用嵌套写法\narticle {\n  h1 { color: #333 }\n  p { color: #eee }\n}\n```\n这样的写法让我们很容易联想到DOM。\n它的原理十分简单：当父选择器内存在子选择器的时候，SASS会将子选择（包括其内的规则）抽出，然后将父选择器放在子选择器前，并用一个**空格**将二者连接起来。\n但有的时候我们并不希望使用空格连接，比如：\n```SASS\na {\n  color: red;\n}\na:hover {\n  color: green;\n}\n\n// 想要编译出上面的CSS，如果使用普通的嵌套写法\na { \n  color: red;\n  \n  :hover { color: green }\n}\n// 编译后\na {\n  color: red;\n}\na :hover {\n  color: green;\n}\n```\n很显然，**伪类**是不能直接嵌套书写的。\n默认的前后选择器之间的连接是存在一个空格的，如果想要消除它，可以使用 `&` 符号。官方将它叫做**父选择器**，笔者给它起了一个接地气的名字：**粘贴符**😛，顾名思义，它会将前后两者紧紧的粘在一起，因此上述 SASS 正确的写法是：\n```sass\na { \n  color: red;\n  \n  &:hover { color: green }\n}\n```\n除了重复书写选择器，重复书写属性名也是十分繁琐的工作。例如\n```CSS\nnav {\n  border-style: solid;\n  border-width: 1px;\n  border-color: #ccc;\n}\n\nnav {\n  border: solid 1px #ccc;\n  border-left: 0;\n}\n```\nSASS的嵌套语法同样可以作用于属性名，只不过这回使用的连接符号不是空格而是 `-` 符号。\n```SASS\nnav {\n  border: {\n    style: solid;\n    width: 1px;\n    color: #ccc;\n  }\n}\n\nnav {\n  border: solid 1px #ccc {\n    left: 0;\n  }\n}\n```\n上述一直在讲述如何使用嵌套语法来简化我们的工作，但别忘了它给我们带来的另一大益处是，直观的视觉缩进使得结构清晰，行文优雅，易于阅读。\n\n\n----------\n### 3. 导入@import\n\nSASS的导入命令是在预编译阶段完成的，这有利于我们更好的组织管理样式文件。我们约定，在文件的开头使用 `@import` 命令导入外部文件。\n有些文件是专门为了整合 `@import` 命令而编写的，并不需要编译成CSS文件，这样的文件官方称之为**局部文件**。\n**并且约定，这样的文件名以下划线开头，而在导入时，省略开头的下划线**。\n\n“导入”的存在使得变量声明结果不可预料，一般来说，后者覆盖前者。当为变量声明添加额外的 `!default` 标签时，意味着该值是变量的默认值，默认值的优先级是最低的，无论它在何处声明。\n\n另外，CSS中存在也存在 `@import`，为了将两者区分开来，SASS的导入命令只针对SASS文件有效，凡以`.sass`或者`.scss`结尾的文件都可以在预编译阶段完成导入操作，而已 `.css` 结尾的文件会被保留下来，作为原生的CSS导入。如果你希望在预编译阶段导入CSS文件，不妨将`.css`后缀改成`.scss`后缀。\n\n\n----------\n### 4. 静默注释\n\nSASS 支持两种注释方式，一种是 CSS 标准注释，即`／*...*／`。\n另外一种类似于 JS 中的单行注释，以 `//` 开头一直到行末，这种注释方式称为**静默注释**，是用这种方式书写的注释会在预编译阶段自动抹去。\n\n\n----------\n> 本文作者：[She Liu](https://github.com/ShelLiu)\n> 系列教程： [Sass & Compass 教程](https://www.zybuluo.com/Shel/note/835485)\n> 参考文献：《SASS and Compass IN ACTION》 [美] Wynn Netherland","source":"_posts/Sass & Compass 教程 -- 语法篇(一).md","raw":"---\ntitle: Sass & Compass 教程 —— 语法篇（一）\ndate: 2017-08-06 17:36:00\ntags:\n- Sass \n- CSS \n- Compass\n---\n\n> 阅读本篇你将收获\n  - 变量需要先声明后使用，且不存在变量提升。\n  - 嵌套使得样式结构清晰。\n  - 利用导入来分离代码，优化文件组织。\n\n<!-- more -->\n### 1. 变量\n\nSASS使用 `$` 符号来标志变量。变量遵循**先声明后使用**的原则。\n```sass\nbody { \n  font-size: $normal-size;\n}\n\n$normal-size: 14px;\n\n// 编译代码将会得到错误输出\n// Undefined variable: \"$normal-size\".\n```\n变量的声明具有**作用域**，我们甚至可以多次定义同一个变量的值。看下面的例子：\n```sass\n$normal-size: 14px;\n\nbody { \n  $normal-size: 12px;\n  font-size: $normal-size;\n}\n\np {\n  font-size: $normal-size;\n}\n\n$normal-size: 12px;\n\nh6 {\n  font-size: $normal-size;\n}\n```\n编译后：\n```css\nbody {\n  font-size: 12px;\n}\n\np {\n  font-size: 14px;\n}\n\nh6 {\n  font-size: 12px;\n}\n```\n在上面例子中，`body`内部声明的变量仅仅在其内部产生作用，同样的变量在`p`使用时没有被影响，然而，在同一作用域内，再次定义变量的值，只会影响后面的规则，前面的规则却没有被影响，这就是为何`h6`与`p`字号结果不一。可见 SASS 的编译过程是从上到下依次执行的，但与 js 不一样的是它不存在变量的提升。\n**它的基本原理是：变量被值替换。**\n\n\n----------\n### 2. 嵌套\n\n嵌套的存在使得我们编写规则更加直观，层次结构十分清晰。就像是在 `html` 标签之间相互嵌套一般。**嵌套是为解决重复书写的问题。**先来个直观的感受：\n```sass\n// 在 CSS 中我们使用下面的形式来描述层级结构的样式\narticle h1 {\n  color: #333;\n}\narticle p {\n  color: #eee;\n}\n\n// SASS 使用嵌套写法\narticle {\n  h1 { color: #333 }\n  p { color: #eee }\n}\n```\n这样的写法让我们很容易联想到DOM。\n它的原理十分简单：当父选择器内存在子选择器的时候，SASS会将子选择（包括其内的规则）抽出，然后将父选择器放在子选择器前，并用一个**空格**将二者连接起来。\n但有的时候我们并不希望使用空格连接，比如：\n```SASS\na {\n  color: red;\n}\na:hover {\n  color: green;\n}\n\n// 想要编译出上面的CSS，如果使用普通的嵌套写法\na { \n  color: red;\n  \n  :hover { color: green }\n}\n// 编译后\na {\n  color: red;\n}\na :hover {\n  color: green;\n}\n```\n很显然，**伪类**是不能直接嵌套书写的。\n默认的前后选择器之间的连接是存在一个空格的，如果想要消除它，可以使用 `&` 符号。官方将它叫做**父选择器**，笔者给它起了一个接地气的名字：**粘贴符**😛，顾名思义，它会将前后两者紧紧的粘在一起，因此上述 SASS 正确的写法是：\n```sass\na { \n  color: red;\n  \n  &:hover { color: green }\n}\n```\n除了重复书写选择器，重复书写属性名也是十分繁琐的工作。例如\n```CSS\nnav {\n  border-style: solid;\n  border-width: 1px;\n  border-color: #ccc;\n}\n\nnav {\n  border: solid 1px #ccc;\n  border-left: 0;\n}\n```\nSASS的嵌套语法同样可以作用于属性名，只不过这回使用的连接符号不是空格而是 `-` 符号。\n```SASS\nnav {\n  border: {\n    style: solid;\n    width: 1px;\n    color: #ccc;\n  }\n}\n\nnav {\n  border: solid 1px #ccc {\n    left: 0;\n  }\n}\n```\n上述一直在讲述如何使用嵌套语法来简化我们的工作，但别忘了它给我们带来的另一大益处是，直观的视觉缩进使得结构清晰，行文优雅，易于阅读。\n\n\n----------\n### 3. 导入@import\n\nSASS的导入命令是在预编译阶段完成的，这有利于我们更好的组织管理样式文件。我们约定，在文件的开头使用 `@import` 命令导入外部文件。\n有些文件是专门为了整合 `@import` 命令而编写的，并不需要编译成CSS文件，这样的文件官方称之为**局部文件**。\n**并且约定，这样的文件名以下划线开头，而在导入时，省略开头的下划线**。\n\n“导入”的存在使得变量声明结果不可预料，一般来说，后者覆盖前者。当为变量声明添加额外的 `!default` 标签时，意味着该值是变量的默认值，默认值的优先级是最低的，无论它在何处声明。\n\n另外，CSS中存在也存在 `@import`，为了将两者区分开来，SASS的导入命令只针对SASS文件有效，凡以`.sass`或者`.scss`结尾的文件都可以在预编译阶段完成导入操作，而已 `.css` 结尾的文件会被保留下来，作为原生的CSS导入。如果你希望在预编译阶段导入CSS文件，不妨将`.css`后缀改成`.scss`后缀。\n\n\n----------\n### 4. 静默注释\n\nSASS 支持两种注释方式，一种是 CSS 标准注释，即`／*...*／`。\n另外一种类似于 JS 中的单行注释，以 `//` 开头一直到行末，这种注释方式称为**静默注释**，是用这种方式书写的注释会在预编译阶段自动抹去。\n\n\n----------\n> 本文作者：[She Liu](https://github.com/ShelLiu)\n> 系列教程： [Sass & Compass 教程](https://www.zybuluo.com/Shel/note/835485)\n> 参考文献：《SASS and Compass IN ACTION》 [美] Wynn Netherland","slug":"Sass & Compass 教程 -- 语法篇(一)","published":1,"updated":"2017-08-07T06:03:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctse80000m079bl28lbtv","content":"<blockquote>\n<p>阅读本篇你将收获</p>\n<ul>\n<li>变量需要先声明后使用，且不存在变量提升。</li>\n<li>嵌套使得样式结构清晰。</li>\n<li>利用导入来分离代码，优化文件组织。</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1. 变量\"></a>1. 变量</h3><p>SASS使用 <code>$</code> 符号来标志变量。变量遵循<strong>先声明后使用</strong>的原则。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123; </div><div class=\"line\">  font-size: $normal-size;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$normal-size: 14px;</div><div class=\"line\"></div><div class=\"line\">// 编译代码将会得到错误输出</div><div class=\"line\">// Undefined variable: &quot;$normal-size&quot;.</div></pre></td></tr></table></figure></p>\n<p>变量的声明具有<strong>作用域</strong>，我们甚至可以多次定义同一个变量的值。看下面的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$normal-size: 14px;</div><div class=\"line\"></div><div class=\"line\">body &#123; </div><div class=\"line\">  $normal-size: 12px;</div><div class=\"line\">  font-size: $normal-size;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p &#123;</div><div class=\"line\">  font-size: $normal-size;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$normal-size: 12px;</div><div class=\"line\"></div><div class=\"line\">h6 &#123;</div><div class=\"line\">  font-size: $normal-size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译后：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面例子中，<code>body</code>内部声明的变量仅仅在其内部产生作用，同样的变量在<code>p</code>使用时没有被影响，然而，在同一作用域内，再次定义变量的值，只会影响后面的规则，前面的规则却没有被影响，这就是为何<code>h6</code>与<code>p</code>字号结果不一。可见 SASS 的编译过程是从上到下依次执行的，但与 js 不一样的是它不存在变量的提升。<br><strong>它的基本原理是：变量被值替换。</strong></p>\n<hr>\n<h3 id=\"2-嵌套\"><a href=\"#2-嵌套\" class=\"headerlink\" title=\"2. 嵌套\"></a>2. 嵌套</h3><p>嵌套的存在使得我们编写规则更加直观，层次结构十分清晰。就像是在 <code>html</code> 标签之间相互嵌套一般。<strong>嵌套是为解决重复书写的问题。</strong>先来个直观的感受：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 在 CSS 中我们使用下面的形式来描述层级结构的样式</div><div class=\"line\">article h1 &#123;</div><div class=\"line\">  color: #333;</div><div class=\"line\">&#125;</div><div class=\"line\">article p &#123;</div><div class=\"line\">  color: #eee;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// SASS 使用嵌套写法</div><div class=\"line\">article &#123;</div><div class=\"line\">  h1 &#123; color: #333 &#125;</div><div class=\"line\">  p &#123; color: #eee &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样的写法让我们很容易联想到DOM。<br>它的原理十分简单：当父选择器内存在子选择器的时候，SASS会将子选择（包括其内的规则）抽出，然后将父选择器放在子选择器前，并用一个<strong>空格</strong>将二者连接起来。<br>但有的时候我们并不希望使用空格连接，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">a:hover &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 想要编译出上面的CSS，如果使用普通的嵌套写法</div><div class=\"line\">a &#123; </div><div class=\"line\">  color: red;</div><div class=\"line\">  </div><div class=\"line\">  :hover &#123; color: green &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// 编译后</div><div class=\"line\">a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">a :hover &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<strong>伪类</strong>是不能直接嵌套书写的。<br>默认的前后选择器之间的连接是存在一个空格的，如果想要消除它，可以使用 <code>&amp;</code> 符号。官方将它叫做<strong>父选择器</strong>，笔者给它起了一个接地气的名字：<strong>粘贴符</strong>😛，顾名思义，它会将前后两者紧紧的粘在一起，因此上述 SASS 正确的写法是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a &#123; </div><div class=\"line\">  color: red;</div><div class=\"line\">  </div><div class=\"line\">  &amp;:hover &#123; color: green &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>除了重复书写选择器，重复书写属性名也是十分繁琐的工作。例如<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</div><div class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#ccc</span>;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>SASS的嵌套语法同样可以作用于属性名，只不过这回使用的连接符号不是空格而是 <code>-</code> 符号。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">nav &#123;</div><div class=\"line\">  border: &#123;</div><div class=\"line\">    style: solid;</div><div class=\"line\">    width: 1px;</div><div class=\"line\">    color: #ccc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">nav &#123;</div><div class=\"line\">  border: solid 1px #ccc &#123;</div><div class=\"line\">    left: 0;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述一直在讲述如何使用嵌套语法来简化我们的工作，但别忘了它给我们带来的另一大益处是，直观的视觉缩进使得结构清晰，行文优雅，易于阅读。</p>\n<hr>\n<h3 id=\"3-导入-import\"><a href=\"#3-导入-import\" class=\"headerlink\" title=\"3. 导入@import\"></a>3. 导入@import</h3><p>SASS的导入命令是在预编译阶段完成的，这有利于我们更好的组织管理样式文件。我们约定，在文件的开头使用 <code>@import</code> 命令导入外部文件。<br>有些文件是专门为了整合 <code>@import</code> 命令而编写的，并不需要编译成CSS文件，这样的文件官方称之为<strong>局部文件</strong>。<br><strong>并且约定，这样的文件名以下划线开头，而在导入时，省略开头的下划线</strong>。</p>\n<p>“导入”的存在使得变量声明结果不可预料，一般来说，后者覆盖前者。当为变量声明添加额外的 <code>!default</code> 标签时，意味着该值是变量的默认值，默认值的优先级是最低的，无论它在何处声明。</p>\n<p>另外，CSS中存在也存在 <code>@import</code>，为了将两者区分开来，SASS的导入命令只针对SASS文件有效，凡以<code>.sass</code>或者<code>.scss</code>结尾的文件都可以在预编译阶段完成导入操作，而已 <code>.css</code> 结尾的文件会被保留下来，作为原生的CSS导入。如果你希望在预编译阶段导入CSS文件，不妨将<code>.css</code>后缀改成<code>.scss</code>后缀。</p>\n<hr>\n<h3 id=\"4-静默注释\"><a href=\"#4-静默注释\" class=\"headerlink\" title=\"4. 静默注释\"></a>4. 静默注释</h3><p>SASS 支持两种注释方式，一种是 CSS 标准注释，即<code>／*...*／</code>。<br>另外一种类似于 JS 中的单行注释，以 <code>//</code> 开头一直到行末，这种注释方式称为<strong>静默注释</strong>，是用这种方式书写的注释会在预编译阶段自动抹去。</p>\n<hr>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/ShelLiu\" target=\"_blank\" rel=\"external\">She Liu</a><br>系列教程： <a href=\"https://www.zybuluo.com/Shel/note/835485\" target=\"_blank\" rel=\"external\">Sass &amp; Compass 教程</a><br>参考文献：《SASS and Compass IN ACTION》 [美] Wynn Netherland</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>阅读本篇你将收获</p>\n<ul>\n<li>变量需要先声明后使用，且不存在变量提升。</li>\n<li>嵌套使得样式结构清晰。</li>\n<li>利用导入来分离代码，优化文件组织。</li>\n</ul>\n</blockquote>","more":"<h3 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1. 变量\"></a>1. 变量</h3><p>SASS使用 <code>$</code> 符号来标志变量。变量遵循<strong>先声明后使用</strong>的原则。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123; </div><div class=\"line\">  font-size: $normal-size;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$normal-size: 14px;</div><div class=\"line\"></div><div class=\"line\">// 编译代码将会得到错误输出</div><div class=\"line\">// Undefined variable: &quot;$normal-size&quot;.</div></pre></td></tr></table></figure></p>\n<p>变量的声明具有<strong>作用域</strong>，我们甚至可以多次定义同一个变量的值。看下面的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$normal-size: 14px;</div><div class=\"line\"></div><div class=\"line\">body &#123; </div><div class=\"line\">  $normal-size: 12px;</div><div class=\"line\">  font-size: $normal-size;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p &#123;</div><div class=\"line\">  font-size: $normal-size;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$normal-size: 12px;</div><div class=\"line\"></div><div class=\"line\">h6 &#123;</div><div class=\"line\">  font-size: $normal-size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译后：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面例子中，<code>body</code>内部声明的变量仅仅在其内部产生作用，同样的变量在<code>p</code>使用时没有被影响，然而，在同一作用域内，再次定义变量的值，只会影响后面的规则，前面的规则却没有被影响，这就是为何<code>h6</code>与<code>p</code>字号结果不一。可见 SASS 的编译过程是从上到下依次执行的，但与 js 不一样的是它不存在变量的提升。<br><strong>它的基本原理是：变量被值替换。</strong></p>\n<hr>\n<h3 id=\"2-嵌套\"><a href=\"#2-嵌套\" class=\"headerlink\" title=\"2. 嵌套\"></a>2. 嵌套</h3><p>嵌套的存在使得我们编写规则更加直观，层次结构十分清晰。就像是在 <code>html</code> 标签之间相互嵌套一般。<strong>嵌套是为解决重复书写的问题。</strong>先来个直观的感受：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 在 CSS 中我们使用下面的形式来描述层级结构的样式</div><div class=\"line\">article h1 &#123;</div><div class=\"line\">  color: #333;</div><div class=\"line\">&#125;</div><div class=\"line\">article p &#123;</div><div class=\"line\">  color: #eee;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// SASS 使用嵌套写法</div><div class=\"line\">article &#123;</div><div class=\"line\">  h1 &#123; color: #333 &#125;</div><div class=\"line\">  p &#123; color: #eee &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样的写法让我们很容易联想到DOM。<br>它的原理十分简单：当父选择器内存在子选择器的时候，SASS会将子选择（包括其内的规则）抽出，然后将父选择器放在子选择器前，并用一个<strong>空格</strong>将二者连接起来。<br>但有的时候我们并不希望使用空格连接，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">a:hover &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 想要编译出上面的CSS，如果使用普通的嵌套写法</div><div class=\"line\">a &#123; </div><div class=\"line\">  color: red;</div><div class=\"line\">  </div><div class=\"line\">  :hover &#123; color: green &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// 编译后</div><div class=\"line\">a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">a :hover &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，<strong>伪类</strong>是不能直接嵌套书写的。<br>默认的前后选择器之间的连接是存在一个空格的，如果想要消除它，可以使用 <code>&amp;</code> 符号。官方将它叫做<strong>父选择器</strong>，笔者给它起了一个接地气的名字：<strong>粘贴符</strong>😛，顾名思义，它会将前后两者紧紧的粘在一起，因此上述 SASS 正确的写法是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a &#123; </div><div class=\"line\">  color: red;</div><div class=\"line\">  </div><div class=\"line\">  &amp;:hover &#123; color: green &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>除了重复书写选择器，重复书写属性名也是十分繁琐的工作。例如<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</div><div class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#ccc</span>;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>SASS的嵌套语法同样可以作用于属性名，只不过这回使用的连接符号不是空格而是 <code>-</code> 符号。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">nav &#123;</div><div class=\"line\">  border: &#123;</div><div class=\"line\">    style: solid;</div><div class=\"line\">    width: 1px;</div><div class=\"line\">    color: #ccc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">nav &#123;</div><div class=\"line\">  border: solid 1px #ccc &#123;</div><div class=\"line\">    left: 0;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述一直在讲述如何使用嵌套语法来简化我们的工作，但别忘了它给我们带来的另一大益处是，直观的视觉缩进使得结构清晰，行文优雅，易于阅读。</p>\n<hr>\n<h3 id=\"3-导入-import\"><a href=\"#3-导入-import\" class=\"headerlink\" title=\"3. 导入@import\"></a>3. 导入@import</h3><p>SASS的导入命令是在预编译阶段完成的，这有利于我们更好的组织管理样式文件。我们约定，在文件的开头使用 <code>@import</code> 命令导入外部文件。<br>有些文件是专门为了整合 <code>@import</code> 命令而编写的，并不需要编译成CSS文件，这样的文件官方称之为<strong>局部文件</strong>。<br><strong>并且约定，这样的文件名以下划线开头，而在导入时，省略开头的下划线</strong>。</p>\n<p>“导入”的存在使得变量声明结果不可预料，一般来说，后者覆盖前者。当为变量声明添加额外的 <code>!default</code> 标签时，意味着该值是变量的默认值，默认值的优先级是最低的，无论它在何处声明。</p>\n<p>另外，CSS中存在也存在 <code>@import</code>，为了将两者区分开来，SASS的导入命令只针对SASS文件有效，凡以<code>.sass</code>或者<code>.scss</code>结尾的文件都可以在预编译阶段完成导入操作，而已 <code>.css</code> 结尾的文件会被保留下来，作为原生的CSS导入。如果你希望在预编译阶段导入CSS文件，不妨将<code>.css</code>后缀改成<code>.scss</code>后缀。</p>\n<hr>\n<h3 id=\"4-静默注释\"><a href=\"#4-静默注释\" class=\"headerlink\" title=\"4. 静默注释\"></a>4. 静默注释</h3><p>SASS 支持两种注释方式，一种是 CSS 标准注释，即<code>／*...*／</code>。<br>另外一种类似于 JS 中的单行注释，以 <code>//</code> 开头一直到行末，这种注释方式称为<strong>静默注释</strong>，是用这种方式书写的注释会在预编译阶段自动抹去。</p>\n<hr>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/ShelLiu\" target=\"_blank\" rel=\"external\">She Liu</a><br>系列教程： <a href=\"https://www.zybuluo.com/Shel/note/835485\" target=\"_blank\" rel=\"external\">Sass &amp; Compass 教程</a><br>参考文献：《SASS and Compass IN ACTION》 [美] Wynn Netherland</p>\n</blockquote>"},{"title":"Sass & Compass 教程 -- 语法篇(二)","date":"2017-08-19T02:00:00.000Z","_content":"\n> 阅读本篇你将收获\n  - 使用混合器封装重用的样式。 \n  - 使用选择器继承减少样式重复。\n  - 从视觉效果的角度出发描述元素。\n\n<!-- more -->\n\n### 5. 混合器@mixin\n\n如果读者曾经接触过 `Less`，那么这个概念你一定不会陌生。就如同 JS 中的函数一样，在样式的世界里，我们将重复使用的属性、规则包装在一个混合器中，并用 `@mixin` 来声明，然后在需要的地方，使用 `@include` 调用。先让我们来一个例子，直观的感受一下。\n```sass\n@mixin no-bullets {\n  list-style: none;\n   li {\n     list-style: {\n       image: none;\n       type: none;\n     }\n     margin: 0;\n   }\n}\n\nul.plain {\n  @include no-bullets;\n}\n\n// 编译成CSS\nul.plain {\n  list-style: none;\n}\nul.plain li {\n  list-style-image: none;\n  list-style-type: none;\n  margin: 0;\n}\n```\n使用混合器最终目的是让它返回一堆属性和规则。\n同时，我们还可以给它传递参数，使它输出不同的结果。\n就如同 js 中函数的参数一样，混合器的参数其实就是在混合器内部声明的局部变量，我们可以在声明时给参数附上默认值。\n而在调用混合器时，采用**模式匹配**给参数赋值。\n```sass\n@mixin link-colors($normal,$hover:$normal,$visited:$normal) {\n  color: $normal;\n  &:hover { color: $hover; }  // 给参数附上默认值\n  &:visited { color: $visited; }\n}\n\na {\n  @include link-colors($normal: red,$hover: blue);\n}\n\n// 编译后的CSS\na {\n  color: red;\n}\na:hover {\n  color: blue;\n}\na:visited {\n  color: red;\n}\n```\n混合器很强大，就如同函数在 js 中一样的地位一样。然而无休止的滥用混合器会导致项目难以维护。\n\n> When you have only one hammer in your hand, you tend to look at all the problems as nails. \n> —— Maslow\n\n一条经验法则：**你能否为这个混合器找到一个短名字来描述这些属性修饰的样式。**\n\n对于混合器的命名，应该带有**展示性的描述**，侧重于表达当应用了这个样式后所带来的视觉效果。比如：\"fancy-font\"。这与CSS类名有所不同，两者容易混淆。\n\n一种主流的命名方法：CSS类名使用语义化的描述，混合器的名字则采用展示性的描述。\n\n鉴于上面的命名方法，我们得出，混合器的最佳使用点是封装重用的展示性样式。\n\n\n----------\n### 6. 选择器继承 @extend\n\n先看下面例子：\n```sass\n// SASS\n.error {\n  border: 1px red solid;\n  color: red;\n  background: #fff;\n}\n.danger-error {\n  @extend .error;\n  color: #fff;\n  background: red;\n  font-size: 1.8em;\n}\n\n// CSS\n.error, .danger-error {\n  border: 1px red solid;\n  color: red;\n  background: #fff;\n}\n\n.danger-error {\n  color: #fff;\n  background: red;\n  font-size: 1.8em;\n}\n```\n\nSASS 使用 `@extend` 来实现选择器继承。\n它背后的基本原理是，**如果 A 继承于 B ，那么在样式表的任何一处 B 都将会被 A，B 这一选择器组替换**。\n\n继承是基于选择器的，常常是基于类选择器，上面说到类的命名应当是语义化的，因此，继承也是建立在语义化的关系上。就好比当你在编写样式时发现一个类是另一个类的细化的时候，比如上面`.danger-error` 是 `.error`的细化。\n\n同样的目的我们可以使用混合器来解决，然而混合器的使用会复制大段的代码，并且混合器的命名也会违背上面的原则，对此更好的解决方案是使用继承，上面的例子可以看出，继承只会增加选择器的数量，不会复制大量属性代码。\n\n想要熟练的使用混合器与继承，需要日常反复练习，在实践中体会二者的侧重，这里笔者给出一条经验法则：**为效果而混合，为逻辑而继承**。\n\n----------\n> 本文作者：[She Liu](https://github.com/ShelLiu)\n> 系列教程： [Sass & Compass 教程](https://www.zybuluo.com/Shel/note/835485)\n> 参考文献：《SASS and Compass IN ACTION》 [美] Wynn Netherland","source":"_posts/Sass & Compass 教程 -- 语法篇(二).md","raw":"---\ntitle: Sass & Compass 教程 -- 语法篇(二)\ndate: 2017-8-19 10:00:00\ntags:\n- Sass \n- CSS \n- Compass\n---\n\n> 阅读本篇你将收获\n  - 使用混合器封装重用的样式。 \n  - 使用选择器继承减少样式重复。\n  - 从视觉效果的角度出发描述元素。\n\n<!-- more -->\n\n### 5. 混合器@mixin\n\n如果读者曾经接触过 `Less`，那么这个概念你一定不会陌生。就如同 JS 中的函数一样，在样式的世界里，我们将重复使用的属性、规则包装在一个混合器中，并用 `@mixin` 来声明，然后在需要的地方，使用 `@include` 调用。先让我们来一个例子，直观的感受一下。\n```sass\n@mixin no-bullets {\n  list-style: none;\n   li {\n     list-style: {\n       image: none;\n       type: none;\n     }\n     margin: 0;\n   }\n}\n\nul.plain {\n  @include no-bullets;\n}\n\n// 编译成CSS\nul.plain {\n  list-style: none;\n}\nul.plain li {\n  list-style-image: none;\n  list-style-type: none;\n  margin: 0;\n}\n```\n使用混合器最终目的是让它返回一堆属性和规则。\n同时，我们还可以给它传递参数，使它输出不同的结果。\n就如同 js 中函数的参数一样，混合器的参数其实就是在混合器内部声明的局部变量，我们可以在声明时给参数附上默认值。\n而在调用混合器时，采用**模式匹配**给参数赋值。\n```sass\n@mixin link-colors($normal,$hover:$normal,$visited:$normal) {\n  color: $normal;\n  &:hover { color: $hover; }  // 给参数附上默认值\n  &:visited { color: $visited; }\n}\n\na {\n  @include link-colors($normal: red,$hover: blue);\n}\n\n// 编译后的CSS\na {\n  color: red;\n}\na:hover {\n  color: blue;\n}\na:visited {\n  color: red;\n}\n```\n混合器很强大，就如同函数在 js 中一样的地位一样。然而无休止的滥用混合器会导致项目难以维护。\n\n> When you have only one hammer in your hand, you tend to look at all the problems as nails. \n> —— Maslow\n\n一条经验法则：**你能否为这个混合器找到一个短名字来描述这些属性修饰的样式。**\n\n对于混合器的命名，应该带有**展示性的描述**，侧重于表达当应用了这个样式后所带来的视觉效果。比如：\"fancy-font\"。这与CSS类名有所不同，两者容易混淆。\n\n一种主流的命名方法：CSS类名使用语义化的描述，混合器的名字则采用展示性的描述。\n\n鉴于上面的命名方法，我们得出，混合器的最佳使用点是封装重用的展示性样式。\n\n\n----------\n### 6. 选择器继承 @extend\n\n先看下面例子：\n```sass\n// SASS\n.error {\n  border: 1px red solid;\n  color: red;\n  background: #fff;\n}\n.danger-error {\n  @extend .error;\n  color: #fff;\n  background: red;\n  font-size: 1.8em;\n}\n\n// CSS\n.error, .danger-error {\n  border: 1px red solid;\n  color: red;\n  background: #fff;\n}\n\n.danger-error {\n  color: #fff;\n  background: red;\n  font-size: 1.8em;\n}\n```\n\nSASS 使用 `@extend` 来实现选择器继承。\n它背后的基本原理是，**如果 A 继承于 B ，那么在样式表的任何一处 B 都将会被 A，B 这一选择器组替换**。\n\n继承是基于选择器的，常常是基于类选择器，上面说到类的命名应当是语义化的，因此，继承也是建立在语义化的关系上。就好比当你在编写样式时发现一个类是另一个类的细化的时候，比如上面`.danger-error` 是 `.error`的细化。\n\n同样的目的我们可以使用混合器来解决，然而混合器的使用会复制大段的代码，并且混合器的命名也会违背上面的原则，对此更好的解决方案是使用继承，上面的例子可以看出，继承只会增加选择器的数量，不会复制大量属性代码。\n\n想要熟练的使用混合器与继承，需要日常反复练习，在实践中体会二者的侧重，这里笔者给出一条经验法则：**为效果而混合，为逻辑而继承**。\n\n----------\n> 本文作者：[She Liu](https://github.com/ShelLiu)\n> 系列教程： [Sass & Compass 教程](https://www.zybuluo.com/Shel/note/835485)\n> 参考文献：《SASS and Compass IN ACTION》 [美] Wynn Netherland","slug":"Sass & Compass 教程 -- 语法篇(二)","published":1,"updated":"2017-08-19T03:45:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctseh0001m079ojkialsb","content":"<blockquote>\n<p>阅读本篇你将收获</p>\n<ul>\n<li>使用混合器封装重用的样式。 </li>\n<li>使用选择器继承减少样式重复。</li>\n<li>从视觉效果的角度出发描述元素。</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"5-混合器-mixin\"><a href=\"#5-混合器-mixin\" class=\"headerlink\" title=\"5. 混合器@mixin\"></a>5. 混合器@mixin</h3><p>如果读者曾经接触过 <code>Less</code>，那么这个概念你一定不会陌生。就如同 JS 中的函数一样，在样式的世界里，我们将重复使用的属性、规则包装在一个混合器中，并用 <code>@mixin</code> 来声明，然后在需要的地方，使用 <code>@include</code> 调用。先让我们来一个例子，直观的感受一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin no-bullets &#123;</div><div class=\"line\">  list-style: none;</div><div class=\"line\">   li &#123;</div><div class=\"line\">     list-style: &#123;</div><div class=\"line\">       image: none;</div><div class=\"line\">       type: none;</div><div class=\"line\">     &#125;</div><div class=\"line\">     margin: 0;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ul.plain &#123;</div><div class=\"line\">  @include no-bullets;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 编译成CSS</div><div class=\"line\">ul.plain &#123;</div><div class=\"line\">  list-style: none;</div><div class=\"line\">&#125;</div><div class=\"line\">ul.plain li &#123;</div><div class=\"line\">  list-style-image: none;</div><div class=\"line\">  list-style-type: none;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用混合器最终目的是让它返回一堆属性和规则。<br>同时，我们还可以给它传递参数，使它输出不同的结果。<br>就如同 js 中函数的参数一样，混合器的参数其实就是在混合器内部声明的局部变量，我们可以在声明时给参数附上默认值。<br>而在调用混合器时，采用<strong>模式匹配</strong>给参数赋值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin link-colors($normal,$hover:$normal,$visited:$normal) &#123;</div><div class=\"line\">  color: $normal;</div><div class=\"line\">  &amp;:hover &#123; color: $hover; &#125;  // 给参数附上默认值</div><div class=\"line\">  &amp;:visited &#123; color: $visited; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">a &#123;</div><div class=\"line\">  @include link-colors($normal: red,$hover: blue);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 编译后的CSS</div><div class=\"line\">a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">a:hover &#123;</div><div class=\"line\">  color: blue;</div><div class=\"line\">&#125;</div><div class=\"line\">a:visited &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>混合器很强大，就如同函数在 js 中一样的地位一样。然而无休止的滥用混合器会导致项目难以维护。</p>\n<blockquote>\n<p>When you have only one hammer in your hand, you tend to look at all the problems as nails.<br>—— Maslow</p>\n</blockquote>\n<p>一条经验法则：<strong>你能否为这个混合器找到一个短名字来描述这些属性修饰的样式。</strong></p>\n<p>对于混合器的命名，应该带有<strong>展示性的描述</strong>，侧重于表达当应用了这个样式后所带来的视觉效果。比如：”fancy-font”。这与CSS类名有所不同，两者容易混淆。</p>\n<p>一种主流的命名方法：CSS类名使用语义化的描述，混合器的名字则采用展示性的描述。</p>\n<p>鉴于上面的命名方法，我们得出，混合器的最佳使用点是封装重用的展示性样式。</p>\n<hr>\n<h3 id=\"6-选择器继承-extend\"><a href=\"#6-选择器继承-extend\" class=\"headerlink\" title=\"6. 选择器继承 @extend\"></a>6. 选择器继承 @extend</h3><p>先看下面例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">.error &#123;</div><div class=\"line\">  border: 1px red solid;</div><div class=\"line\">  color: red;</div><div class=\"line\">  background: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\">.danger-error &#123;</div><div class=\"line\">  @extend .error;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  background: red;</div><div class=\"line\">  font-size: 1.8em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// CSS</div><div class=\"line\">.error, .danger-error &#123;</div><div class=\"line\">  border: 1px red solid;</div><div class=\"line\">  color: red;</div><div class=\"line\">  background: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.danger-error &#123;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  background: red;</div><div class=\"line\">  font-size: 1.8em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>SASS 使用 <code>@extend</code> 来实现选择器继承。<br>它背后的基本原理是，<strong>如果 A 继承于 B ，那么在样式表的任何一处 B 都将会被 A，B 这一选择器组替换</strong>。</p>\n<p>继承是基于选择器的，常常是基于类选择器，上面说到类的命名应当是语义化的，因此，继承也是建立在语义化的关系上。就好比当你在编写样式时发现一个类是另一个类的细化的时候，比如上面<code>.danger-error</code> 是 <code>.error</code>的细化。</p>\n<p>同样的目的我们可以使用混合器来解决，然而混合器的使用会复制大段的代码，并且混合器的命名也会违背上面的原则，对此更好的解决方案是使用继承，上面的例子可以看出，继承只会增加选择器的数量，不会复制大量属性代码。</p>\n<p>想要熟练的使用混合器与继承，需要日常反复练习，在实践中体会二者的侧重，这里笔者给出一条经验法则：<strong>为效果而混合，为逻辑而继承</strong>。</p>\n<hr>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/ShelLiu\" target=\"_blank\" rel=\"external\">She Liu</a><br>系列教程： <a href=\"https://www.zybuluo.com/Shel/note/835485\" target=\"_blank\" rel=\"external\">Sass &amp; Compass 教程</a><br>参考文献：《SASS and Compass IN ACTION》 [美] Wynn Netherland</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>阅读本篇你将收获</p>\n<ul>\n<li>使用混合器封装重用的样式。 </li>\n<li>使用选择器继承减少样式重复。</li>\n<li>从视觉效果的角度出发描述元素。</li>\n</ul>\n</blockquote>","more":"<h3 id=\"5-混合器-mixin\"><a href=\"#5-混合器-mixin\" class=\"headerlink\" title=\"5. 混合器@mixin\"></a>5. 混合器@mixin</h3><p>如果读者曾经接触过 <code>Less</code>，那么这个概念你一定不会陌生。就如同 JS 中的函数一样，在样式的世界里，我们将重复使用的属性、规则包装在一个混合器中，并用 <code>@mixin</code> 来声明，然后在需要的地方，使用 <code>@include</code> 调用。先让我们来一个例子，直观的感受一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin no-bullets &#123;</div><div class=\"line\">  list-style: none;</div><div class=\"line\">   li &#123;</div><div class=\"line\">     list-style: &#123;</div><div class=\"line\">       image: none;</div><div class=\"line\">       type: none;</div><div class=\"line\">     &#125;</div><div class=\"line\">     margin: 0;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ul.plain &#123;</div><div class=\"line\">  @include no-bullets;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 编译成CSS</div><div class=\"line\">ul.plain &#123;</div><div class=\"line\">  list-style: none;</div><div class=\"line\">&#125;</div><div class=\"line\">ul.plain li &#123;</div><div class=\"line\">  list-style-image: none;</div><div class=\"line\">  list-style-type: none;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用混合器最终目的是让它返回一堆属性和规则。<br>同时，我们还可以给它传递参数，使它输出不同的结果。<br>就如同 js 中函数的参数一样，混合器的参数其实就是在混合器内部声明的局部变量，我们可以在声明时给参数附上默认值。<br>而在调用混合器时，采用<strong>模式匹配</strong>给参数赋值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin link-colors($normal,$hover:$normal,$visited:$normal) &#123;</div><div class=\"line\">  color: $normal;</div><div class=\"line\">  &amp;:hover &#123; color: $hover; &#125;  // 给参数附上默认值</div><div class=\"line\">  &amp;:visited &#123; color: $visited; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">a &#123;</div><div class=\"line\">  @include link-colors($normal: red,$hover: blue);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 编译后的CSS</div><div class=\"line\">a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">a:hover &#123;</div><div class=\"line\">  color: blue;</div><div class=\"line\">&#125;</div><div class=\"line\">a:visited &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>混合器很强大，就如同函数在 js 中一样的地位一样。然而无休止的滥用混合器会导致项目难以维护。</p>\n<blockquote>\n<p>When you have only one hammer in your hand, you tend to look at all the problems as nails.<br>—— Maslow</p>\n</blockquote>\n<p>一条经验法则：<strong>你能否为这个混合器找到一个短名字来描述这些属性修饰的样式。</strong></p>\n<p>对于混合器的命名，应该带有<strong>展示性的描述</strong>，侧重于表达当应用了这个样式后所带来的视觉效果。比如：”fancy-font”。这与CSS类名有所不同，两者容易混淆。</p>\n<p>一种主流的命名方法：CSS类名使用语义化的描述，混合器的名字则采用展示性的描述。</p>\n<p>鉴于上面的命名方法，我们得出，混合器的最佳使用点是封装重用的展示性样式。</p>\n<hr>\n<h3 id=\"6-选择器继承-extend\"><a href=\"#6-选择器继承-extend\" class=\"headerlink\" title=\"6. 选择器继承 @extend\"></a>6. 选择器继承 @extend</h3><p>先看下面例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">// SASS</div><div class=\"line\">.error &#123;</div><div class=\"line\">  border: 1px red solid;</div><div class=\"line\">  color: red;</div><div class=\"line\">  background: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\">.danger-error &#123;</div><div class=\"line\">  @extend .error;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  background: red;</div><div class=\"line\">  font-size: 1.8em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// CSS</div><div class=\"line\">.error, .danger-error &#123;</div><div class=\"line\">  border: 1px red solid;</div><div class=\"line\">  color: red;</div><div class=\"line\">  background: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.danger-error &#123;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  background: red;</div><div class=\"line\">  font-size: 1.8em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>SASS 使用 <code>@extend</code> 来实现选择器继承。<br>它背后的基本原理是，<strong>如果 A 继承于 B ，那么在样式表的任何一处 B 都将会被 A，B 这一选择器组替换</strong>。</p>\n<p>继承是基于选择器的，常常是基于类选择器，上面说到类的命名应当是语义化的，因此，继承也是建立在语义化的关系上。就好比当你在编写样式时发现一个类是另一个类的细化的时候，比如上面<code>.danger-error</code> 是 <code>.error</code>的细化。</p>\n<p>同样的目的我们可以使用混合器来解决，然而混合器的使用会复制大段的代码，并且混合器的命名也会违背上面的原则，对此更好的解决方案是使用继承，上面的例子可以看出，继承只会增加选择器的数量，不会复制大量属性代码。</p>\n<p>想要熟练的使用混合器与继承，需要日常反复练习，在实践中体会二者的侧重，这里笔者给出一条经验法则：<strong>为效果而混合，为逻辑而继承</strong>。</p>\n<hr>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/ShelLiu\" target=\"_blank\" rel=\"external\">She Liu</a><br>系列教程： <a href=\"https://www.zybuluo.com/Shel/note/835485\" target=\"_blank\" rel=\"external\">Sass &amp; Compass 教程</a><br>参考文献：《SASS and Compass IN ACTION》 [美] Wynn Netherland</p>\n</blockquote>"},{"title":"Git使用入门教程","date":"2017-08-06T13:20:22.000Z","_content":"\n# 大纲图\n{% asset_img git-outline.png git入门教程 %}\n\n<!-- more -->\n\n[原图地址](http://naotu.baidu.com/file/5dcda8cf019f0f79dc6285c98298daf8?token=a65a47efab6ab2be)\n\n# 起步 - 关于版本控制\n\n- 什么是“版本控制”？\n> 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。\n\n## 本地版本控制系统\n\n- 使用本地数据库记录文件的历次更新**差异**\n\n{% asset_img version-control-1.png git入门教程 %}\n\n>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 \n>这么做唯一的好处就是简单，但是特别容易犯错。\n>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。\n>其中最流行的一种叫做 RCS，它的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。\n\n\n## 集中化的版本控制系统 Centralized Version Control Systems，简称 CVCS\n\n接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，集中化的版本控制系统\n- 优点：方便协作、权限控制、相比于维护本地数据库成本更低\n- 缺点：容错率低（服务器宕机、服务器数据丢失导致不可恢复的问题）\n{% asset_img version-control-2.png git入门教程 %}\n\n## 分布式版本控制系统\n- 客户端把代码仓库**完整地镜像**下来。每一次的克隆操作，实际上都是一次对代码仓库的完整备份。\n- 这类系统都可以指定和若干不同的远端代码仓库进行交互。\n{% asset_img version-control-3.png git入门教程 %}\n\n\n# Git 简介\n\n## 什么是Git\nGit 是目前世界上被最广泛使用的现代软件版本管理系统。\n\n## 优点\n- 速度\n- 简单的设计\n- 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）\n- 完全分布式\n- 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）\n\n## 安装 Git\n- Mac 用户：Xcode Command Line Tools 自带 Git (`xcode-select --install`)\n- Linux 用户：`sudo apt-get install git`\n- Windows 用户：下载 [Git SCM](https://git-scm.com/)\n- 对于 Windows 用户，安装后如果希望在全局的 cmd 中使用 git，需要把 git.exe 加入 PATH 环境变量中，或在 Git Bash 中使用 Git。\n\n# 初始化\n- [配置SSH公钥](https://coding.net/help/doc/git/ssh-key.html)\n\n## 基础配置\n\n```\n$ git config --global user.name \"your_username\"\n$ git config --global user.email your_email@domain.com\n```\n\n## `git config` 常用配置\n\n```\n# 默认情况下，Git 会调用环境变量（$VISUAL 或 $EDITOR）设置的任意文本编辑器\n$ git config --global core.editor emacs\n# 设置 commit 的模板\n$ git config --global commit.template ~/.gitmessage.txt\n# 查看最后10次提交 \n$ git config --global alias.last \"log -10 --pretty=format:'%C(yellow)%h%Creset(%Cred%ad%Creset) - %Cgreen%aN%Creset : %s'  --date=format:'%Y-%m-%d %H:%M:%S' --graph\"\n```\nGit 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。\n * `.git/config` – 特定仓库的设置。\n * `~/.gitconfig` – 特定用户的设置。这也是 `--global` 标记的设置项存放的位置。\n * `$(prefix)/etc/gitconfig` – 系统层面的设置。\n\n所有配置项都储存在纯文本文件中，所以 `git config` 命令其实只是一个提供便捷的命令行接口。\n\n \n> 拓展阅读\n>   [How do I make Git use the editor of my choice for commits?](https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits)\n>   [Git log pretty formats](https://git-scm.com/docs/git-log#_pretty_formats)\n\n\n# 检出仓库\n语法\n```bash\ngit clone <repo> <directory>\n```\n例子\n```\n# 本地仓库\n$ git clone /path/to/repository\n# 通过 SSH\n$ git clone git@git.hypers.com:Godfery/git-share-salloto.git\n# 通过 HTTPS\n$ git clone https:/path/to/repository.git\n```\n克隆某个分支\n```bash\ngit clone -b master git@git.hypers.com:Godfery/git-share-salloto.git\n```\n## HTTPS和 SSH \n> - HTTPS：拿到url可以随便clone，但是在push的时候需要验证用户名和密码；可以缓存密码\n> - SSH：安全，需要在clone前添加SSH Key。SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。\n\n> 拓展阅读\n> [Git Url HTTPS SSH 区别](http://wanderyt.github.io/2016/04/12/Git-Url-HTTPS-SSH-Difference/)\n\n \n# 创建新仓库\n```\ngit init\n#在指定目录创建一个空的 Git 仓库\ngit init <directory>\n#初始化一个裸的 Git 仓库\ngit init --bare <directory>\n```\n\n{% asset_img git-init-bare.svg 初始化裸仓库 %}\n\n无论什么时候，都可以通过 `git status` 来查看你的 git 仓库状态。\n\n> `-—bare` 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将`-—bare`看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。\n\n# 管理 `remote`\n```bash\n# 查看当前 remote\n$ git remote -v  \n# 删除 remote\n$ git remote remove origin\n# 添加 remote\n$ git remote add origin git@git.hypers.com:Godfery/git-share-salloto.git\n```\n\n\n# 工作方式\n## 本地工作流\n{% asset_img workflow.png git入门教程 %}\n\n> 你的本地仓库由 git 维护的三棵“树”组成。\n> 第一个是你的 `工作目录`，它持有实际文件；\n> 第二个是 `缓存区（Index）`，它像个缓存区域，临时保存你的改动；\n> 最后是 `HEAD`，指向你最近一次提交后的结果。\n\n## 工作原理\n\n{% asset_img workflow2.png 工作原理 %}\n\n| 术语 | 解释 |\n| --- | --- |\n|  仓库（Repository） |  一个仓库包括了所有的版本信息、所有的分支和标记信息。在Git中仓库的每份拷贝都是完整的。仓库让你可以从中取得你的工作副本。 |\n|  分支（Branches）  |  一个分支意味着一个独立的、拥有自己历史信息的代码线（code line）。 |\n|  标签（Tags） |  一个标记指的是某个分支某个特定时间点的状态。 |\n|  提交（Commit） |  提交代码后，仓库会创建一个新的版本。这个版本可以在后续被重新获得。 |\n|  修订（Revision） |  用来表示代码的一个版本状态。最新的版本可以通过HEAD来获取。之前的版本可以通过\"HEAD~1\"来获取，以此类推。Git通过用SHA1 hash算法表示的id来标识不同的版本。每一个 SHA1 id都是160位长，16进制标识的字符串。 |\n\n# 添加与提交\n## `git add`\n```bash\n# 添加某个文件\n$ git add < filename >\n# 添加所有更改的文件\n$ git add .\n# 交互式添加文件\n$ git add -p\n```\n\n## `git commit`\n```bash\n$ git commit\n$ git commit -m \"测试提交\"\n# 注意此操作会重写之前的提交\n$ git commit -m \"测试提交\" --amend\n```\n\n# 忽略特定的文件\n可以配置 Git 忽略特定的文件或者是文件夹。这些配置都放在 “`.gitignore`” 文件中。这个文件可以存在于不同的文件夹中，可以包含不同的文件匹配模式。\n```bash\n# 工作目录下的 gitignore，对所有的 clone 有效\n/.gitignore\n# 用户全局 gitignore，只对当前的用户有效\n~/.gitignore_global\n# 项目目录下的 gitignore ，只对当前的 clone 有效(你也可以使用配置变量 `core.excludesfile`)\n$GIT_DIR/info/exclude\n```\n忽略已被跟踪的文件的更改\n```bash\n# 忽略某个文件的变更\n$ git update-index --assume-unchanged\n# 去取消忽略某个文件的变更\n$ git update-index --no-assume-unchanged\n# 列出所有被 `assume-unchanged` 的文件\n$ git ls-files -v | grep '^h'\n```\n\n> 拓展阅读\n> [git-ls-files](https://git-scm.com/docs/git-ls-files)\n\n\n# 储藏与取出储藏\n## `git stash`\n```bash\n# 储藏当前所有的未提交 回到 HEAD 的状态\n$ git stash \n# 还原一个储藏，如不指定则为最后一个储藏\n$ git stash apply  <stash@{1}>\n# 储藏列表\n$ git stash list\n# 还原最后一个储藏，并将其从 list 中删除\n$ git stash pop\n# 清空所有储藏\n$ git stash clear\n```\n\n\n# 检查仓库状态\n## `git status`\n用法\n```bash\n$ git status\n```\n{% asset_img git-status-screenshots.png git入门教程 %}\n\n- new file：新文件\n- modified：修改的文件\n- deleted：删除的文件\n- Untracked file：未跟踪的文件\n\n## `git log` \n```bash\n#使用默认格式显示完整地项目历史\n$ git log\n# 将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。\n$ git log --oneline\n#搜索特定作者的提交。`<pattern>` 可以是字符串或正则表达式。\n$ git log --author=\"<pattern>\"\n#搜索提交信息匹配特定 `<pattern>` 的提交。`<pattern>` 可以是字符串或正则表达式。\n$ git log --grep=\"<pattern>\"\n#只显示发生在 `<since>` 和 `<until>` 之间的提交。两个参数可以是提交 ID、分支名、`HEAD` 或是任何一种引用。\n$ git log <since>..<until>\n#只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。\n$ git log <file>\n```\n\n\n## 检出之前的提交\n`git checkout` 这个命令有三个不同的作用：**检出文件**、**检出提交**和**检出分支**。\n```bash\n# 查看文件之前的版本。它将工作目录中的 `<file>` 文件变成 `<commit>` 中那个文件的拷贝，并将它加入缓存区。\n$ git checkout <commit> <file>\n# 更新工作目录中的所有文件，使得和某个特定提交中的文件一致。\n$ git checkout <commit>\n```\n\n\n# 回滚错误的修改\n## `git revert` 和 `git reset`\n```bash\n# 用来撤销一个已经提交的快照。\n$ git revert\n# 重置提交\n$ git reset\n```\n{% asset_img git-revert.png git入门教程 %}\n\n通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的新提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。\n<br/>\n撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 `git revert`，它帮你做了所有的事情。\n\n### `git revert`\n```bash\n# 编辑一些文件\n\n# 提交一份快照\n$ git commit -m \"做了一些改变\"\n\n# 撤销刚刚的提交\n$ git revert HEAD\n```\n\n{% asset_img git-revert-show1.png git入门教程 %}\n{% asset_img git-revert-show2.png git入门教程 %}\n\n### `git reset`\n和 `git checkout` 一样，`git reset` 有很多种用法。它可以被用来移除提交快照。它应该只被用于 _本地_ 修改——你永远不应该重设和其他开发者共享的快照。\n```bash\n# 从缓存区移除特定文件，但工作目录不变。\n$ git reset <file>\n# 重设缓冲区，匹配最近的一次提交，但工作目录不变。\n$ git reset\n# 重设缓冲区和工作目录，匹配最近的一次提交。\n$ git reset --hard\n# 将当前分支的末端移到 `<commit>`，将缓存区重设到这个提交，但不改变工作目录。\n$ git reset <commit>\n# 将当前分支的末端移到 `<commit>`，将缓存区和工作目录都重设到这个提交。\n$ git reset --hard <commit>\n```\n\n### `git revert` 和 `git reset`的区别\n撤销(revert)被设计为撤销 _公开_ 的提交的安全方式，`git reset`被设计为重设 _本地_ 更改。\n因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。\n\n**不要重设公共历史** \n\n当有 `<commit>` 之后的提交被推送到公共仓库后，你绝不应该使用 `git reset`。发布一个提交之后，你必须假设其他开发者会依赖于它。\n重点是，确保你只对本地的修改使用 `git reset`，而不是公共更改。如果你需要修复一个公共提交，`git revert` 命令正是被设计来做这个的。\n\n### 取消文件缓存\n`git reset` 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，`hello.js` 和 `main.js`它们已经被加入了仓库中。\n- 例1\n```bash\n# 编辑了hello.js和main.js\n\n# 缓存了目录下所有文件\n$ git add .\n\n# 意识到hello.js和main.js中的修改应该在不同的快照中提交\n\n# 取消main.js缓存\n$ git reset main.js\n# 只提交hello.js\n$ git commit -m \"在hello.js做了一些改变\"\n# 在另一份快照中提交main.js\n$ git add main.js\n$ git commit -m \"编辑 main.js\"\n```\n- 例2\n```bash\n# 创建一个叫`foo.js`的新文件，增加代码\n\n# 提交到项目历史\n$ git add foo.js\n$ git commit -m \"开始开发一个屌爆了的功能\"\n\n# 再次编辑`foo.js`，修改其他文件\n\n# 提交另一份快照\n$ git commit -a -m \"添加了屌炸了的功能\"\n\n# 决定废弃这个功能，并删除相关的更改\n$ git reset --hard HEAD~2\n\n```\n\n## `git clean`\n\n`git clean` 命令将未跟踪的文件从你的工作目录中移除。他和`rm`一样，只是提供了一条捷径。\n`git clean` 命令经常和 `git reset --hard` 一起使用。`reset` 只影响被跟踪的文件。\n```bash\n# 告诉你那些文件在命令执行后会被移除，而不是真的删除它。\n$ git clean -n\n# 移除当前目录下未被跟踪的文件\n$ git clean -f\n# 移除未跟踪的文件，但限制在某个路径下。\n$ git clean -f <path>\n# 移除未跟踪的文件，以及目录。\n$ git clean -df\n```\n\n如果你在本地仓库中作死之后想要毁尸灭迹，`git reset --hard` 和 `git clean -f` 是你最好的选择。运行这两个命令使工作目录和最近的提交保持一致，让你在干净的状态下继续工作。\n```bash\n# 编辑了一些文件\n# 新增了一些文件\n# 发现有点问题需要 \"回滚\"\n\n# 将跟踪的文件回滚回去\n$ git reset --hard\n\n# 移除未跟踪的文件\n$ git clean -df\n```\n\n>移除当前目录下未被跟踪的文件。`-f`（强制）标记是必需的，除非 `clean.requireForce` 配置项被设为了 `false`（默认为 `true`）。它 _不会_ 删除 `.gitignore` 中指定的未跟踪的文件。\n\n\n# 重写项目历史\n## `git commit --amend`\n```bash\n$ git commit --amend\n```\n\n{% asset_img git-commit-ammend1.png git入门教程 %}\n{% asset_img git-commit-ammend2.png git入门教程 %}\n\n> 注意 **不要修复公共提交**\n> 修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。\n\n```bash\n# 编辑 hello.js 和 main.js\n$ git add hello.js\n$ git commit\n\n# 意识到你忘记添加 main.js 的更改\n$ git add main.js\n$ git commit --amend --no-edit\n```\n加入 `--no-edit` 标记会修复提交但不修改提交信息。\n\n> `git commit --amend` 命令是修复最新提交的便捷方式。amend 不只是修改了最新的提交——它进行了一次替换。\n\n## `git rebase`\n```bash\n# 将当前分支 rebase 到 `<base>`\n$ git rebase <base>\n```\n> 这里可以是任何类型的提交引用（ID、分支名、标签，或是 `HEAD` 的相对引用）。\n\nrebase 的主要目的是为了保持一个线性的项目历史。\n\n{% asset_img git-rebase-1.png git入门教程 %}\n要将你的 feature 分支整合进 master 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。下图展示了为什么 rebase 到 master 分支会促成一个快速向前的合并。\n{% asset_img git-rebase-2.png git入门教程 %}\n{% asset_img git-rebase-3.png git入门教程 %}\nrebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 git merge 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。\n\n\n \n> 注意 **不要 rebase 公共历史**\n\n### `git rebase -i`\n```bash\npick fc62e55 added:file_size\npick 9824bf4 fixed:little thing\npick 21d80a5 added:number to log\npick 76b9da6 added:the apply command\npick c264051 Revert:\"added file_size\" - not implemented correctly\n\n# Rebase f408319..b04dc3d onto f408319\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n\n这些信息表示从你上一次推送操作起有5个提交。每个提交都用一行来表示，行格式如下：\n```bash\n(action) (partial-sha) (short commit message)\n```\n\n- 如果指定进行'pick'操作，git会以同样的提交信息（commit message）保存提交\n- 如果指定进行'reword'操作，git会保存提交，但是会停下来修改提交信息（commit message）\n- 如果指定进行'edit'操作，git会完成同样的工作，但是在对下一提交进行操作之前，它会返回到命令行让你对提交进行修正，或者对提交内容进行修改。\n- 如果指定进行'squash'操作，git会把这个提交和前一个提交合并成为一个新的提交\n- 如果指定进行'fixup'操作，但是丢弃提交的日志信息\n- 如果指定进行'exec'操作，使用 shell 执行命令\n- 如果指定进行'drop'操作，删除此次提交\n\n更改完成之后\n```bash\ngit rebase --continue\n```\n\n## `git reflog`\nGit 用引用日志这种机制来记录分支顶端的更新。\n\n每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。\n\n🌰\n\n```bash\n$ git reflog\n```\n{% asset_img git-reflog.png git入门教程 %}\n```bash\n$ git reset --hard 9d43f81\n```\n使用 `git reset`，就有可能能将master变回之前的那个提交。\n\n**务必记住**，引用日志提供的安全网只对提交到本地仓库的更改有效\n\n\n# 保持同步\n## `git remote`\n```bash\n# 显示你和其他远程仓库的连接。\n$ git remote\n# 和上个命令相同，并且同时显示每个连接的 URL。\n$ git remote -v\n# 创建一个新的远程仓库连接。\n$ git remote add <name> <url>\n# 移除名为 <name> 的远程仓库的连接。\n$ git remote rm <name>\n# 重命名远程连接\n$ git remote rename <old-name> <new-name>\n```\n\n> 当你用 `git clone` 克隆仓库时，它会自动创建了一个名为 origin 的远程连接，指向被克隆的仓库。\n\n## `git fetch`\n```bash\n# 拉取仓库中所有的分支。同时会从另一个仓库中下载所有需要的提交和文件。\n$ git fetch <remote>\n# 和上一个命令相同，但只拉取指定的分支。\n$ git fetch <remote> <branch>\n```\n\n🌰\n\n```bash\n$ git fetch origin\n```\n\n{% asset_img git-fetch.png git入门教程 %}\n\n```bash\n# 查看 master 与 origin/master 的区别\n$ git log --oneline master..origin/master\n# 合并\n$ git merge origin/master\n```\n\n```bash\n$ git pull \n# 等价于\n$ git fetch && git merge\n```\n用法\n```bash\n# 拉取当前分支对应的远程副本中的更改，并立即并入本地副本。\n$ git pull <remote>\n# 效果等同于\n$ git fetch && git merge origin/.\n# 使用 `git rebase` 合并远程分支和本地分支，而不是使用 `git merge`。\n$ git pull --rebase <remote>\n```\n\n> `--rebase` 标记可以用来保证线性的项目历史，防止合并提交（merge commits）的产生。很多开发者倾向于使用 rebase 而不是 merge，因为「我想要把我的更改放在其他人完成的工作之后」。\n\n## `git push`\nPush 是你将本地仓库中的提交转移到远程仓库中时要做的事。\n```bash\n# 将指定的分支推送到 `<remote>` 上\n$ git push <remote> <branch>\n# 强制推送\n$ git push <remote> --force\n# 将所有本地分支推送到指定的远程仓库。\n$ git push <remote> --all\n# 当你推送一个分支或是使用 `--all` 选项时，标签不会被自动推送上去。`--tags` 将你所有的本地标签推送到远程仓库中去。\n$ git push <remote> --tags\n```\n\n### 将本地提交推送到中央仓库的一些标准做法。\n\n```bash\n# 切换到 master 分支\n$ git checkout master\n# fetch 远程分支的代码\n$ git fetch origin master\n# 変基到 origin/master\n$ git rebase -i origin/master\n# Squash commits, fix up commit messages etc.\n$ git push origin master\n```\n> 因为我们已经确信本地的 `master` 分支是最新的，它应该导致快速向前的合并，`git push` 不应该抛出非快速向前之类的问题。\n\n```bash\n# 列出仓库中所有分支。\n$ git branch\n# 创建一个名为 `<branch>` 的分支，__不会__ 自动切换到那个分支去\n$ git branch <branch>\n# 删除指定分支。这是一个安全的操作，Git 会阻止你删除包含未合并更改的分支。\n$ git branch -d <branch>\n# 强制删除指定分支，即使包含未合并更改。\n$ git branch -D <branch>\n# 将当前分支命名为 `<branch>`\n$ git branch -m <branch>\n```\n\n\n# 使用分支\n## `git checkout`\n\n```bash\n# 查看特定分支，分支应该已经通过 `git branch` 创建。之后 `<existing-branch>` 成为当前的分支，并更新工作目录的版本。\n$ git checkout <existing-branch>\n# 创建一个名为 `<branch>` 的分支，__不会__ 自动切换到那个分支去\n$ git checkout -b <new-branch>\n# 与上一条命令相同，只是将 `<existing-branch>` 作为新分支的基，而不是当前分支。\n$ git checkout -b <new-branch> <existing-branch>\n```\n\n## `git merge`\n合并是 Git 将被 fork 的历史放回到一起的方式。`git merge` 命令允许你将 `git branch` 创建的多条分支合并成一个。\n```bash\ngit merge <branch>\n```\n\n{% asset_img git-merge.png git入门教程 %}\n\n# Git cheat sheet\n最后附上[cheat sheet 下载链接](https://www.atlassian.com/dam/jcr:8132028b-024f-4b6b-953e-e68fcce0c5fa/atlassian-git-cheatsheet.pdf)\n\n# 参考文章列表\n- [git book](https://git-scm.com/book/en/v2)\n- [git-recipes BY 童仲毅（geeeeeeeeek@github）](https://github.com/geeeeeeeeek/git-recipes/wiki/)\n- [atlassian git tutorials](https://www.atlassian.com/git/tutorials)\n- [sparkbox/standard/style/git/.gitmessage](https://github.com/sparkbox/standard/blob/master/style/git/.gitmessage)\n- [你需要知道的12个Git高级命令](http://www.infoq.com/cn/news/2016/01/12-git-advanced-commands)\n- [Why does GitHub recommend HTTPS over SSH?](https://stackoverflow.com/questions/11041729/why-does-github-recommend-https-over-ssh)\n- [Git Community Book 中文版](http://gitbook.liuhui998.com/index.html)\n\n> 本文作者：[杨过](https://github.com/hiyangguo)","source":"_posts/git-tutorials.md","raw":"---\ntitle: Git使用入门教程\ndate: 2017-08-06 21:20:22\ntags:\n- git \n- 入门教程\n---\n\n# 大纲图\n{% asset_img git-outline.png git入门教程 %}\n\n<!-- more -->\n\n[原图地址](http://naotu.baidu.com/file/5dcda8cf019f0f79dc6285c98298daf8?token=a65a47efab6ab2be)\n\n# 起步 - 关于版本控制\n\n- 什么是“版本控制”？\n> 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。\n\n## 本地版本控制系统\n\n- 使用本地数据库记录文件的历次更新**差异**\n\n{% asset_img version-control-1.png git入门教程 %}\n\n>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 \n>这么做唯一的好处就是简单，但是特别容易犯错。\n>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。\n>其中最流行的一种叫做 RCS，它的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。\n\n\n## 集中化的版本控制系统 Centralized Version Control Systems，简称 CVCS\n\n接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，集中化的版本控制系统\n- 优点：方便协作、权限控制、相比于维护本地数据库成本更低\n- 缺点：容错率低（服务器宕机、服务器数据丢失导致不可恢复的问题）\n{% asset_img version-control-2.png git入门教程 %}\n\n## 分布式版本控制系统\n- 客户端把代码仓库**完整地镜像**下来。每一次的克隆操作，实际上都是一次对代码仓库的完整备份。\n- 这类系统都可以指定和若干不同的远端代码仓库进行交互。\n{% asset_img version-control-3.png git入门教程 %}\n\n\n# Git 简介\n\n## 什么是Git\nGit 是目前世界上被最广泛使用的现代软件版本管理系统。\n\n## 优点\n- 速度\n- 简单的设计\n- 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）\n- 完全分布式\n- 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）\n\n## 安装 Git\n- Mac 用户：Xcode Command Line Tools 自带 Git (`xcode-select --install`)\n- Linux 用户：`sudo apt-get install git`\n- Windows 用户：下载 [Git SCM](https://git-scm.com/)\n- 对于 Windows 用户，安装后如果希望在全局的 cmd 中使用 git，需要把 git.exe 加入 PATH 环境变量中，或在 Git Bash 中使用 Git。\n\n# 初始化\n- [配置SSH公钥](https://coding.net/help/doc/git/ssh-key.html)\n\n## 基础配置\n\n```\n$ git config --global user.name \"your_username\"\n$ git config --global user.email your_email@domain.com\n```\n\n## `git config` 常用配置\n\n```\n# 默认情况下，Git 会调用环境变量（$VISUAL 或 $EDITOR）设置的任意文本编辑器\n$ git config --global core.editor emacs\n# 设置 commit 的模板\n$ git config --global commit.template ~/.gitmessage.txt\n# 查看最后10次提交 \n$ git config --global alias.last \"log -10 --pretty=format:'%C(yellow)%h%Creset(%Cred%ad%Creset) - %Cgreen%aN%Creset : %s'  --date=format:'%Y-%m-%d %H:%M:%S' --graph\"\n```\nGit 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。\n * `.git/config` – 特定仓库的设置。\n * `~/.gitconfig` – 特定用户的设置。这也是 `--global` 标记的设置项存放的位置。\n * `$(prefix)/etc/gitconfig` – 系统层面的设置。\n\n所有配置项都储存在纯文本文件中，所以 `git config` 命令其实只是一个提供便捷的命令行接口。\n\n \n> 拓展阅读\n>   [How do I make Git use the editor of my choice for commits?](https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits)\n>   [Git log pretty formats](https://git-scm.com/docs/git-log#_pretty_formats)\n\n\n# 检出仓库\n语法\n```bash\ngit clone <repo> <directory>\n```\n例子\n```\n# 本地仓库\n$ git clone /path/to/repository\n# 通过 SSH\n$ git clone git@git.hypers.com:Godfery/git-share-salloto.git\n# 通过 HTTPS\n$ git clone https:/path/to/repository.git\n```\n克隆某个分支\n```bash\ngit clone -b master git@git.hypers.com:Godfery/git-share-salloto.git\n```\n## HTTPS和 SSH \n> - HTTPS：拿到url可以随便clone，但是在push的时候需要验证用户名和密码；可以缓存密码\n> - SSH：安全，需要在clone前添加SSH Key。SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。\n\n> 拓展阅读\n> [Git Url HTTPS SSH 区别](http://wanderyt.github.io/2016/04/12/Git-Url-HTTPS-SSH-Difference/)\n\n \n# 创建新仓库\n```\ngit init\n#在指定目录创建一个空的 Git 仓库\ngit init <directory>\n#初始化一个裸的 Git 仓库\ngit init --bare <directory>\n```\n\n{% asset_img git-init-bare.svg 初始化裸仓库 %}\n\n无论什么时候，都可以通过 `git status` 来查看你的 git 仓库状态。\n\n> `-—bare` 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将`-—bare`看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。\n\n# 管理 `remote`\n```bash\n# 查看当前 remote\n$ git remote -v  \n# 删除 remote\n$ git remote remove origin\n# 添加 remote\n$ git remote add origin git@git.hypers.com:Godfery/git-share-salloto.git\n```\n\n\n# 工作方式\n## 本地工作流\n{% asset_img workflow.png git入门教程 %}\n\n> 你的本地仓库由 git 维护的三棵“树”组成。\n> 第一个是你的 `工作目录`，它持有实际文件；\n> 第二个是 `缓存区（Index）`，它像个缓存区域，临时保存你的改动；\n> 最后是 `HEAD`，指向你最近一次提交后的结果。\n\n## 工作原理\n\n{% asset_img workflow2.png 工作原理 %}\n\n| 术语 | 解释 |\n| --- | --- |\n|  仓库（Repository） |  一个仓库包括了所有的版本信息、所有的分支和标记信息。在Git中仓库的每份拷贝都是完整的。仓库让你可以从中取得你的工作副本。 |\n|  分支（Branches）  |  一个分支意味着一个独立的、拥有自己历史信息的代码线（code line）。 |\n|  标签（Tags） |  一个标记指的是某个分支某个特定时间点的状态。 |\n|  提交（Commit） |  提交代码后，仓库会创建一个新的版本。这个版本可以在后续被重新获得。 |\n|  修订（Revision） |  用来表示代码的一个版本状态。最新的版本可以通过HEAD来获取。之前的版本可以通过\"HEAD~1\"来获取，以此类推。Git通过用SHA1 hash算法表示的id来标识不同的版本。每一个 SHA1 id都是160位长，16进制标识的字符串。 |\n\n# 添加与提交\n## `git add`\n```bash\n# 添加某个文件\n$ git add < filename >\n# 添加所有更改的文件\n$ git add .\n# 交互式添加文件\n$ git add -p\n```\n\n## `git commit`\n```bash\n$ git commit\n$ git commit -m \"测试提交\"\n# 注意此操作会重写之前的提交\n$ git commit -m \"测试提交\" --amend\n```\n\n# 忽略特定的文件\n可以配置 Git 忽略特定的文件或者是文件夹。这些配置都放在 “`.gitignore`” 文件中。这个文件可以存在于不同的文件夹中，可以包含不同的文件匹配模式。\n```bash\n# 工作目录下的 gitignore，对所有的 clone 有效\n/.gitignore\n# 用户全局 gitignore，只对当前的用户有效\n~/.gitignore_global\n# 项目目录下的 gitignore ，只对当前的 clone 有效(你也可以使用配置变量 `core.excludesfile`)\n$GIT_DIR/info/exclude\n```\n忽略已被跟踪的文件的更改\n```bash\n# 忽略某个文件的变更\n$ git update-index --assume-unchanged\n# 去取消忽略某个文件的变更\n$ git update-index --no-assume-unchanged\n# 列出所有被 `assume-unchanged` 的文件\n$ git ls-files -v | grep '^h'\n```\n\n> 拓展阅读\n> [git-ls-files](https://git-scm.com/docs/git-ls-files)\n\n\n# 储藏与取出储藏\n## `git stash`\n```bash\n# 储藏当前所有的未提交 回到 HEAD 的状态\n$ git stash \n# 还原一个储藏，如不指定则为最后一个储藏\n$ git stash apply  <stash@{1}>\n# 储藏列表\n$ git stash list\n# 还原最后一个储藏，并将其从 list 中删除\n$ git stash pop\n# 清空所有储藏\n$ git stash clear\n```\n\n\n# 检查仓库状态\n## `git status`\n用法\n```bash\n$ git status\n```\n{% asset_img git-status-screenshots.png git入门教程 %}\n\n- new file：新文件\n- modified：修改的文件\n- deleted：删除的文件\n- Untracked file：未跟踪的文件\n\n## `git log` \n```bash\n#使用默认格式显示完整地项目历史\n$ git log\n# 将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。\n$ git log --oneline\n#搜索特定作者的提交。`<pattern>` 可以是字符串或正则表达式。\n$ git log --author=\"<pattern>\"\n#搜索提交信息匹配特定 `<pattern>` 的提交。`<pattern>` 可以是字符串或正则表达式。\n$ git log --grep=\"<pattern>\"\n#只显示发生在 `<since>` 和 `<until>` 之间的提交。两个参数可以是提交 ID、分支名、`HEAD` 或是任何一种引用。\n$ git log <since>..<until>\n#只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。\n$ git log <file>\n```\n\n\n## 检出之前的提交\n`git checkout` 这个命令有三个不同的作用：**检出文件**、**检出提交**和**检出分支**。\n```bash\n# 查看文件之前的版本。它将工作目录中的 `<file>` 文件变成 `<commit>` 中那个文件的拷贝，并将它加入缓存区。\n$ git checkout <commit> <file>\n# 更新工作目录中的所有文件，使得和某个特定提交中的文件一致。\n$ git checkout <commit>\n```\n\n\n# 回滚错误的修改\n## `git revert` 和 `git reset`\n```bash\n# 用来撤销一个已经提交的快照。\n$ git revert\n# 重置提交\n$ git reset\n```\n{% asset_img git-revert.png git入门教程 %}\n\n通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的新提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。\n<br/>\n撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 `git revert`，它帮你做了所有的事情。\n\n### `git revert`\n```bash\n# 编辑一些文件\n\n# 提交一份快照\n$ git commit -m \"做了一些改变\"\n\n# 撤销刚刚的提交\n$ git revert HEAD\n```\n\n{% asset_img git-revert-show1.png git入门教程 %}\n{% asset_img git-revert-show2.png git入门教程 %}\n\n### `git reset`\n和 `git checkout` 一样，`git reset` 有很多种用法。它可以被用来移除提交快照。它应该只被用于 _本地_ 修改——你永远不应该重设和其他开发者共享的快照。\n```bash\n# 从缓存区移除特定文件，但工作目录不变。\n$ git reset <file>\n# 重设缓冲区，匹配最近的一次提交，但工作目录不变。\n$ git reset\n# 重设缓冲区和工作目录，匹配最近的一次提交。\n$ git reset --hard\n# 将当前分支的末端移到 `<commit>`，将缓存区重设到这个提交，但不改变工作目录。\n$ git reset <commit>\n# 将当前分支的末端移到 `<commit>`，将缓存区和工作目录都重设到这个提交。\n$ git reset --hard <commit>\n```\n\n### `git revert` 和 `git reset`的区别\n撤销(revert)被设计为撤销 _公开_ 的提交的安全方式，`git reset`被设计为重设 _本地_ 更改。\n因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。\n\n**不要重设公共历史** \n\n当有 `<commit>` 之后的提交被推送到公共仓库后，你绝不应该使用 `git reset`。发布一个提交之后，你必须假设其他开发者会依赖于它。\n重点是，确保你只对本地的修改使用 `git reset`，而不是公共更改。如果你需要修复一个公共提交，`git revert` 命令正是被设计来做这个的。\n\n### 取消文件缓存\n`git reset` 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，`hello.js` 和 `main.js`它们已经被加入了仓库中。\n- 例1\n```bash\n# 编辑了hello.js和main.js\n\n# 缓存了目录下所有文件\n$ git add .\n\n# 意识到hello.js和main.js中的修改应该在不同的快照中提交\n\n# 取消main.js缓存\n$ git reset main.js\n# 只提交hello.js\n$ git commit -m \"在hello.js做了一些改变\"\n# 在另一份快照中提交main.js\n$ git add main.js\n$ git commit -m \"编辑 main.js\"\n```\n- 例2\n```bash\n# 创建一个叫`foo.js`的新文件，增加代码\n\n# 提交到项目历史\n$ git add foo.js\n$ git commit -m \"开始开发一个屌爆了的功能\"\n\n# 再次编辑`foo.js`，修改其他文件\n\n# 提交另一份快照\n$ git commit -a -m \"添加了屌炸了的功能\"\n\n# 决定废弃这个功能，并删除相关的更改\n$ git reset --hard HEAD~2\n\n```\n\n## `git clean`\n\n`git clean` 命令将未跟踪的文件从你的工作目录中移除。他和`rm`一样，只是提供了一条捷径。\n`git clean` 命令经常和 `git reset --hard` 一起使用。`reset` 只影响被跟踪的文件。\n```bash\n# 告诉你那些文件在命令执行后会被移除，而不是真的删除它。\n$ git clean -n\n# 移除当前目录下未被跟踪的文件\n$ git clean -f\n# 移除未跟踪的文件，但限制在某个路径下。\n$ git clean -f <path>\n# 移除未跟踪的文件，以及目录。\n$ git clean -df\n```\n\n如果你在本地仓库中作死之后想要毁尸灭迹，`git reset --hard` 和 `git clean -f` 是你最好的选择。运行这两个命令使工作目录和最近的提交保持一致，让你在干净的状态下继续工作。\n```bash\n# 编辑了一些文件\n# 新增了一些文件\n# 发现有点问题需要 \"回滚\"\n\n# 将跟踪的文件回滚回去\n$ git reset --hard\n\n# 移除未跟踪的文件\n$ git clean -df\n```\n\n>移除当前目录下未被跟踪的文件。`-f`（强制）标记是必需的，除非 `clean.requireForce` 配置项被设为了 `false`（默认为 `true`）。它 _不会_ 删除 `.gitignore` 中指定的未跟踪的文件。\n\n\n# 重写项目历史\n## `git commit --amend`\n```bash\n$ git commit --amend\n```\n\n{% asset_img git-commit-ammend1.png git入门教程 %}\n{% asset_img git-commit-ammend2.png git入门教程 %}\n\n> 注意 **不要修复公共提交**\n> 修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。\n\n```bash\n# 编辑 hello.js 和 main.js\n$ git add hello.js\n$ git commit\n\n# 意识到你忘记添加 main.js 的更改\n$ git add main.js\n$ git commit --amend --no-edit\n```\n加入 `--no-edit` 标记会修复提交但不修改提交信息。\n\n> `git commit --amend` 命令是修复最新提交的便捷方式。amend 不只是修改了最新的提交——它进行了一次替换。\n\n## `git rebase`\n```bash\n# 将当前分支 rebase 到 `<base>`\n$ git rebase <base>\n```\n> 这里可以是任何类型的提交引用（ID、分支名、标签，或是 `HEAD` 的相对引用）。\n\nrebase 的主要目的是为了保持一个线性的项目历史。\n\n{% asset_img git-rebase-1.png git入门教程 %}\n要将你的 feature 分支整合进 master 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。下图展示了为什么 rebase 到 master 分支会促成一个快速向前的合并。\n{% asset_img git-rebase-2.png git入门教程 %}\n{% asset_img git-rebase-3.png git入门教程 %}\nrebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 git merge 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。\n\n\n \n> 注意 **不要 rebase 公共历史**\n\n### `git rebase -i`\n```bash\npick fc62e55 added:file_size\npick 9824bf4 fixed:little thing\npick 21d80a5 added:number to log\npick 76b9da6 added:the apply command\npick c264051 Revert:\"added file_size\" - not implemented correctly\n\n# Rebase f408319..b04dc3d onto f408319\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n\n这些信息表示从你上一次推送操作起有5个提交。每个提交都用一行来表示，行格式如下：\n```bash\n(action) (partial-sha) (short commit message)\n```\n\n- 如果指定进行'pick'操作，git会以同样的提交信息（commit message）保存提交\n- 如果指定进行'reword'操作，git会保存提交，但是会停下来修改提交信息（commit message）\n- 如果指定进行'edit'操作，git会完成同样的工作，但是在对下一提交进行操作之前，它会返回到命令行让你对提交进行修正，或者对提交内容进行修改。\n- 如果指定进行'squash'操作，git会把这个提交和前一个提交合并成为一个新的提交\n- 如果指定进行'fixup'操作，但是丢弃提交的日志信息\n- 如果指定进行'exec'操作，使用 shell 执行命令\n- 如果指定进行'drop'操作，删除此次提交\n\n更改完成之后\n```bash\ngit rebase --continue\n```\n\n## `git reflog`\nGit 用引用日志这种机制来记录分支顶端的更新。\n\n每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。\n\n🌰\n\n```bash\n$ git reflog\n```\n{% asset_img git-reflog.png git入门教程 %}\n```bash\n$ git reset --hard 9d43f81\n```\n使用 `git reset`，就有可能能将master变回之前的那个提交。\n\n**务必记住**，引用日志提供的安全网只对提交到本地仓库的更改有效\n\n\n# 保持同步\n## `git remote`\n```bash\n# 显示你和其他远程仓库的连接。\n$ git remote\n# 和上个命令相同，并且同时显示每个连接的 URL。\n$ git remote -v\n# 创建一个新的远程仓库连接。\n$ git remote add <name> <url>\n# 移除名为 <name> 的远程仓库的连接。\n$ git remote rm <name>\n# 重命名远程连接\n$ git remote rename <old-name> <new-name>\n```\n\n> 当你用 `git clone` 克隆仓库时，它会自动创建了一个名为 origin 的远程连接，指向被克隆的仓库。\n\n## `git fetch`\n```bash\n# 拉取仓库中所有的分支。同时会从另一个仓库中下载所有需要的提交和文件。\n$ git fetch <remote>\n# 和上一个命令相同，但只拉取指定的分支。\n$ git fetch <remote> <branch>\n```\n\n🌰\n\n```bash\n$ git fetch origin\n```\n\n{% asset_img git-fetch.png git入门教程 %}\n\n```bash\n# 查看 master 与 origin/master 的区别\n$ git log --oneline master..origin/master\n# 合并\n$ git merge origin/master\n```\n\n```bash\n$ git pull \n# 等价于\n$ git fetch && git merge\n```\n用法\n```bash\n# 拉取当前分支对应的远程副本中的更改，并立即并入本地副本。\n$ git pull <remote>\n# 效果等同于\n$ git fetch && git merge origin/.\n# 使用 `git rebase` 合并远程分支和本地分支，而不是使用 `git merge`。\n$ git pull --rebase <remote>\n```\n\n> `--rebase` 标记可以用来保证线性的项目历史，防止合并提交（merge commits）的产生。很多开发者倾向于使用 rebase 而不是 merge，因为「我想要把我的更改放在其他人完成的工作之后」。\n\n## `git push`\nPush 是你将本地仓库中的提交转移到远程仓库中时要做的事。\n```bash\n# 将指定的分支推送到 `<remote>` 上\n$ git push <remote> <branch>\n# 强制推送\n$ git push <remote> --force\n# 将所有本地分支推送到指定的远程仓库。\n$ git push <remote> --all\n# 当你推送一个分支或是使用 `--all` 选项时，标签不会被自动推送上去。`--tags` 将你所有的本地标签推送到远程仓库中去。\n$ git push <remote> --tags\n```\n\n### 将本地提交推送到中央仓库的一些标准做法。\n\n```bash\n# 切换到 master 分支\n$ git checkout master\n# fetch 远程分支的代码\n$ git fetch origin master\n# 変基到 origin/master\n$ git rebase -i origin/master\n# Squash commits, fix up commit messages etc.\n$ git push origin master\n```\n> 因为我们已经确信本地的 `master` 分支是最新的，它应该导致快速向前的合并，`git push` 不应该抛出非快速向前之类的问题。\n\n```bash\n# 列出仓库中所有分支。\n$ git branch\n# 创建一个名为 `<branch>` 的分支，__不会__ 自动切换到那个分支去\n$ git branch <branch>\n# 删除指定分支。这是一个安全的操作，Git 会阻止你删除包含未合并更改的分支。\n$ git branch -d <branch>\n# 强制删除指定分支，即使包含未合并更改。\n$ git branch -D <branch>\n# 将当前分支命名为 `<branch>`\n$ git branch -m <branch>\n```\n\n\n# 使用分支\n## `git checkout`\n\n```bash\n# 查看特定分支，分支应该已经通过 `git branch` 创建。之后 `<existing-branch>` 成为当前的分支，并更新工作目录的版本。\n$ git checkout <existing-branch>\n# 创建一个名为 `<branch>` 的分支，__不会__ 自动切换到那个分支去\n$ git checkout -b <new-branch>\n# 与上一条命令相同，只是将 `<existing-branch>` 作为新分支的基，而不是当前分支。\n$ git checkout -b <new-branch> <existing-branch>\n```\n\n## `git merge`\n合并是 Git 将被 fork 的历史放回到一起的方式。`git merge` 命令允许你将 `git branch` 创建的多条分支合并成一个。\n```bash\ngit merge <branch>\n```\n\n{% asset_img git-merge.png git入门教程 %}\n\n# Git cheat sheet\n最后附上[cheat sheet 下载链接](https://www.atlassian.com/dam/jcr:8132028b-024f-4b6b-953e-e68fcce0c5fa/atlassian-git-cheatsheet.pdf)\n\n# 参考文章列表\n- [git book](https://git-scm.com/book/en/v2)\n- [git-recipes BY 童仲毅（geeeeeeeeek@github）](https://github.com/geeeeeeeeek/git-recipes/wiki/)\n- [atlassian git tutorials](https://www.atlassian.com/git/tutorials)\n- [sparkbox/standard/style/git/.gitmessage](https://github.com/sparkbox/standard/blob/master/style/git/.gitmessage)\n- [你需要知道的12个Git高级命令](http://www.infoq.com/cn/news/2016/01/12-git-advanced-commands)\n- [Why does GitHub recommend HTTPS over SSH?](https://stackoverflow.com/questions/11041729/why-does-github-recommend-https-over-ssh)\n- [Git Community Book 中文版](http://gitbook.liuhui998.com/index.html)\n\n> 本文作者：[杨过](https://github.com/hiyangguo)","slug":"git-tutorials","published":1,"updated":"2017-08-07T06:03:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctsel0003m079heqzwvgv","content":"<h1 id=\"大纲图\"><a href=\"#大纲图\" class=\"headerlink\" title=\"大纲图\"></a>大纲图</h1><img src=\"/2017/08/06/git-tutorials/git-outline.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<a id=\"more\"></a>\n<p><a href=\"http://naotu.baidu.com/file/5dcda8cf019f0f79dc6285c98298daf8?token=a65a47efab6ab2be\" target=\"_blank\" rel=\"external\">原图地址</a></p>\n<h1 id=\"起步-关于版本控制\"><a href=\"#起步-关于版本控制\" class=\"headerlink\" title=\"起步 - 关于版本控制\"></a>起步 - 关于版本控制</h1><ul>\n<li>什么是“版本控制”？<blockquote>\n<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"本地版本控制系统\"><a href=\"#本地版本控制系统\" class=\"headerlink\" title=\"本地版本控制系统\"></a>本地版本控制系统</h2><ul>\n<li>使用本地数据库记录文件的历次更新<strong>差异</strong></li>\n</ul>\n<img src=\"/2017/08/06/git-tutorials/version-control-1.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<blockquote>\n<p>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。<br>这么做唯一的好处就是简单，但是特别容易犯错。<br>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。<br>其中最流行的一种叫做 RCS，它的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。</p>\n</blockquote>\n<h2 id=\"集中化的版本控制系统-Centralized-Version-Control-Systems，简称-CVCS\"><a href=\"#集中化的版本控制系统-Centralized-Version-Control-Systems，简称-CVCS\" class=\"headerlink\" title=\"集中化的版本控制系统 Centralized Version Control Systems，简称 CVCS\"></a>集中化的版本控制系统 Centralized Version Control Systems，简称 CVCS</h2><p>接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，集中化的版本控制系统</p>\n<ul>\n<li>优点：方便协作、权限控制、相比于维护本地数据库成本更低</li>\n<li>缺点：容错率低（服务器宕机、服务器数据丢失导致不可恢复的问题）<img src=\"/2017/08/06/git-tutorials/version-control-2.png\" alt=\"git入门教程\" title=\"git入门教程\">\n</li>\n</ul>\n<h2 id=\"分布式版本控制系统\"><a href=\"#分布式版本控制系统\" class=\"headerlink\" title=\"分布式版本控制系统\"></a>分布式版本控制系统</h2><ul>\n<li>客户端把代码仓库<strong>完整地镜像</strong>下来。每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</li>\n<li>这类系统都可以指定和若干不同的远端代码仓库进行交互。<img src=\"/2017/08/06/git-tutorials/version-control-3.png\" alt=\"git入门教程\" title=\"git入门教程\">\n</li>\n</ul>\n<h1 id=\"Git-简介\"><a href=\"#Git-简介\" class=\"headerlink\" title=\"Git 简介\"></a>Git 简介</h1><h2 id=\"什么是Git\"><a href=\"#什么是Git\" class=\"headerlink\" title=\"什么是Git\"></a>什么是Git</h2><p>Git 是目前世界上被最广泛使用的现代软件版本管理系统。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>速度</li>\n<li>简单的设计</li>\n<li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li>\n<li>完全分布式</li>\n<li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li>\n</ul>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li>Mac 用户：Xcode Command Line Tools 自带 Git (<code>xcode-select --install</code>)</li>\n<li>Linux 用户：<code>sudo apt-get install git</code></li>\n<li>Windows 用户：下载 <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git SCM</a></li>\n<li>对于 Windows 用户，安装后如果希望在全局的 cmd 中使用 git，需要把 git.exe 加入 PATH 环境变量中，或在 Git Bash 中使用 Git。</li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><ul>\n<li><a href=\"https://coding.net/help/doc/git/ssh-key.html\" target=\"_blank\" rel=\"external\">配置SSH公钥</a></li>\n</ul>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;your_username&quot;</div><div class=\"line\">$ git config --global user.email your_email@domain.com</div></pre></td></tr></table></figure>\n<h2 id=\"git-config-常用配置\"><a href=\"#git-config-常用配置\" class=\"headerlink\" title=\"git config 常用配置\"></a><code>git config</code> 常用配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 默认情况下，Git 会调用环境变量（$VISUAL 或 $EDITOR）设置的任意文本编辑器</div><div class=\"line\">$ git config --global core.editor emacs</div><div class=\"line\"># 设置 commit 的模板</div><div class=\"line\">$ git config --global commit.template ~/.gitmessage.txt</div><div class=\"line\"># 查看最后10次提交 </div><div class=\"line\">$ git config --global alias.last &quot;log -10 --pretty=format:&apos;%C(yellow)%h%Creset(%Cred%ad%Creset) - %Cgreen%aN%Creset : %s&apos;  --date=format:&apos;%Y-%m-%d %H:%M:%S&apos; --graph&quot;</div></pre></td></tr></table></figure>\n<p>Git 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。</p>\n<ul>\n<li><code>.git/config</code> – 特定仓库的设置。</li>\n<li><code>~/.gitconfig</code> – 特定用户的设置。这也是 <code>--global</code> 标记的设置项存放的位置。</li>\n<li><code>$(prefix)/etc/gitconfig</code> – 系统层面的设置。</li>\n</ul>\n<p>所有配置项都储存在纯文本文件中，所以 <code>git config</code> 命令其实只是一个提供便捷的命令行接口。</p>\n<blockquote>\n<p>拓展阅读<br>  <a href=\"https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits\" target=\"_blank\" rel=\"external\">How do I make Git use the editor of my choice for commits?</a><br>  <a href=\"https://git-scm.com/docs/git-log#_pretty_formats\" target=\"_blank\" rel=\"external\">Git log pretty formats</a></p>\n</blockquote>\n<h1 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h1><p>语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure></p>\n<p>例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 本地仓库</div><div class=\"line\">$ git clone /path/to/repository</div><div class=\"line\"># 通过 SSH</div><div class=\"line\">$ git clone git@git.hypers.com:Godfery/git-share-salloto.git</div><div class=\"line\"># 通过 HTTPS</div><div class=\"line\">$ git clone https:/path/to/repository.git</div></pre></td></tr></table></figure></p>\n<p>克隆某个分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> -b master git@git.hypers.com:Godfery/git-share-salloto.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"HTTPS和-SSH\"><a href=\"#HTTPS和-SSH\" class=\"headerlink\" title=\"HTTPS和 SSH\"></a>HTTPS和 SSH</h2><blockquote>\n<ul>\n<li>HTTPS：拿到url可以随便clone，但是在push的时候需要验证用户名和密码；可以缓存密码</li>\n<li>SSH：安全，需要在clone前添加SSH Key。SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</li>\n</ul>\n<p>拓展阅读<br><a href=\"http://wanderyt.github.io/2016/04/12/Git-Url-HTTPS-SSH-Difference/\" target=\"_blank\" rel=\"external\">Git Url HTTPS SSH 区别</a></p>\n</blockquote>\n<h1 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">#在指定目录创建一个空的 Git 仓库</div><div class=\"line\">git init &lt;directory&gt;</div><div class=\"line\">#初始化一个裸的 Git 仓库</div><div class=\"line\">git init --bare &lt;directory&gt;</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-init-bare.svg\" alt=\"初始化裸仓库\" title=\"初始化裸仓库\">\n<p>无论什么时候，都可以通过 <code>git status</code> 来查看你的 git 仓库状态。</p>\n<blockquote>\n<p><code>-—bare</code> 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将<code>-—bare</code>看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。</p>\n</blockquote>\n<h1 id=\"管理-remote\"><a href=\"#管理-remote\" class=\"headerlink\" title=\"管理 remote\"></a>管理 <code>remote</code></h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看当前 remote</span></div><div class=\"line\">$ git remote -v  </div><div class=\"line\"><span class=\"comment\"># 删除 remote</span></div><div class=\"line\">$ git remote remove origin</div><div class=\"line\"><span class=\"comment\"># 添加 remote</span></div><div class=\"line\">$ git remote add origin git@git.hypers.com:Godfery/git-share-salloto.git</div></pre></td></tr></table></figure>\n<h1 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h1><h2 id=\"本地工作流\"><a href=\"#本地工作流\" class=\"headerlink\" title=\"本地工作流\"></a>本地工作流</h2><img src=\"/2017/08/06/git-tutorials/workflow.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<blockquote>\n<p>你的本地仓库由 git 维护的三棵“树”组成。<br>第一个是你的 <code>工作目录</code>，它持有实际文件；<br>第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；<br>最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p>\n</blockquote>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><img src=\"/2017/08/06/git-tutorials/workflow2.png\" alt=\"工作原理\" title=\"工作原理\">\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>仓库（Repository）</td>\n<td>一个仓库包括了所有的版本信息、所有的分支和标记信息。在Git中仓库的每份拷贝都是完整的。仓库让你可以从中取得你的工作副本。</td>\n</tr>\n<tr>\n<td>分支（Branches）</td>\n<td>一个分支意味着一个独立的、拥有自己历史信息的代码线（code line）。</td>\n</tr>\n<tr>\n<td>标签（Tags）</td>\n<td>一个标记指的是某个分支某个特定时间点的状态。</td>\n</tr>\n<tr>\n<td>提交（Commit）</td>\n<td>提交代码后，仓库会创建一个新的版本。这个版本可以在后续被重新获得。</td>\n</tr>\n<tr>\n<td>修订（Revision）</td>\n<td>用来表示代码的一个版本状态。最新的版本可以通过HEAD来获取。之前的版本可以通过”HEAD~1”来获取，以此类推。Git通过用SHA1 hash算法表示的id来标识不同的版本。每一个 SHA1 id都是160位长，16进制标识的字符串。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"添加与提交\"><a href=\"#添加与提交\" class=\"headerlink\" title=\"添加与提交\"></a>添加与提交</h1><h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a><code>git add</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加某个文件</span></div><div class=\"line\">$ git add &lt; filename &gt;</div><div class=\"line\"><span class=\"comment\"># 添加所有更改的文件</span></div><div class=\"line\">$ git add .</div><div class=\"line\"><span class=\"comment\"># 交互式添加文件</span></div><div class=\"line\">$ git add -p</div></pre></td></tr></table></figure>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a><code>git commit</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit</div><div class=\"line\">$ git commit -m <span class=\"string\">\"测试提交\"</span></div><div class=\"line\"><span class=\"comment\"># 注意此操作会重写之前的提交</span></div><div class=\"line\">$ git commit -m <span class=\"string\">\"测试提交\"</span> --amend</div></pre></td></tr></table></figure>\n<h1 id=\"忽略特定的文件\"><a href=\"#忽略特定的文件\" class=\"headerlink\" title=\"忽略特定的文件\"></a>忽略特定的文件</h1><p>可以配置 Git 忽略特定的文件或者是文件夹。这些配置都放在 “<code>.gitignore</code>” 文件中。这个文件可以存在于不同的文件夹中，可以包含不同的文件匹配模式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 工作目录下的 gitignore，对所有的 clone 有效</span></div><div class=\"line\">/.gitignore</div><div class=\"line\"><span class=\"comment\"># 用户全局 gitignore，只对当前的用户有效</span></div><div class=\"line\">~/.gitignore_global</div><div class=\"line\"><span class=\"comment\"># 项目目录下的 gitignore ，只对当前的 clone 有效(你也可以使用配置变量 `core.excludesfile`)</span></div><div class=\"line\"><span class=\"variable\">$GIT_DIR</span>/info/exclude</div></pre></td></tr></table></figure></p>\n<p>忽略已被跟踪的文件的更改<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 忽略某个文件的变更</span></div><div class=\"line\">$ git update-index --assume-unchanged</div><div class=\"line\"><span class=\"comment\"># 去取消忽略某个文件的变更</span></div><div class=\"line\">$ git update-index --no-assume-unchanged</div><div class=\"line\"><span class=\"comment\"># 列出所有被 `assume-unchanged` 的文件</span></div><div class=\"line\">$ git ls-files -v | grep <span class=\"string\">'^h'</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>拓展阅读<br><a href=\"https://git-scm.com/docs/git-ls-files\" target=\"_blank\" rel=\"external\">git-ls-files</a></p>\n</blockquote>\n<h1 id=\"储藏与取出储藏\"><a href=\"#储藏与取出储藏\" class=\"headerlink\" title=\"储藏与取出储藏\"></a>储藏与取出储藏</h1><h2 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a><code>git stash</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 储藏当前所有的未提交 回到 HEAD 的状态</span></div><div class=\"line\">$ git stash </div><div class=\"line\"><span class=\"comment\"># 还原一个储藏，如不指定则为最后一个储藏</span></div><div class=\"line\">$ git stash apply  &lt;stash@&#123;1&#125;&gt;</div><div class=\"line\"><span class=\"comment\"># 储藏列表</span></div><div class=\"line\">$ git stash list</div><div class=\"line\"><span class=\"comment\"># 还原最后一个储藏，并将其从 list 中删除</span></div><div class=\"line\">$ git stash pop</div><div class=\"line\"><span class=\"comment\"># 清空所有储藏</span></div><div class=\"line\">$ git stash clear</div></pre></td></tr></table></figure>\n<h1 id=\"检查仓库状态\"><a href=\"#检查仓库状态\" class=\"headerlink\" title=\"检查仓库状态\"></a>检查仓库状态</h1><h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a><code>git status</code></h2><p>用法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure></p>\n<img src=\"/2017/08/06/git-tutorials/git-status-screenshots.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<ul>\n<li>new file：新文件</li>\n<li>modified：修改的文件</li>\n<li>deleted：删除的文件</li>\n<li>Untracked file：未跟踪的文件</li>\n</ul>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a><code>git log</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#使用默认格式显示完整地项目历史</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span></div><div class=\"line\"><span class=\"comment\"># 将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> --oneline</div><div class=\"line\"><span class=\"comment\">#搜索特定作者的提交。`&lt;pattern&gt;` 可以是字符串或正则表达式。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> --author=<span class=\"string\">\"&lt;pattern&gt;\"</span></div><div class=\"line\"><span class=\"comment\">#搜索提交信息匹配特定 `&lt;pattern&gt;` 的提交。`&lt;pattern&gt;` 可以是字符串或正则表达式。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> --grep=<span class=\"string\">\"&lt;pattern&gt;\"</span></div><div class=\"line\"><span class=\"comment\">#只显示发生在 `&lt;since&gt;` 和 `&lt;until&gt;` 之间的提交。两个参数可以是提交 ID、分支名、`HEAD` 或是任何一种引用。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> &lt;since&gt;..&lt;until&gt;</div><div class=\"line\"><span class=\"comment\">#只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> &lt;file&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"检出之前的提交\"><a href=\"#检出之前的提交\" class=\"headerlink\" title=\"检出之前的提交\"></a>检出之前的提交</h2><p><code>git checkout</code> 这个命令有三个不同的作用：<strong>检出文件</strong>、<strong>检出提交</strong>和<strong>检出分支</strong>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看文件之前的版本。它将工作目录中的 `&lt;file&gt;` 文件变成 `&lt;commit&gt;` 中那个文件的拷贝，并将它加入缓存区。</span></div><div class=\"line\">$ git checkout &lt;commit&gt; &lt;file&gt;</div><div class=\"line\"><span class=\"comment\"># 更新工作目录中的所有文件，使得和某个特定提交中的文件一致。</span></div><div class=\"line\">$ git checkout &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"回滚错误的修改\"><a href=\"#回滚错误的修改\" class=\"headerlink\" title=\"回滚错误的修改\"></a>回滚错误的修改</h1><h2 id=\"git-revert-和-git-reset\"><a href=\"#git-revert-和-git-reset\" class=\"headerlink\" title=\"git revert 和 git reset\"></a><code>git revert</code> 和 <code>git reset</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 用来撤销一个已经提交的快照。</span></div><div class=\"line\">$ git revert</div><div class=\"line\"><span class=\"comment\"># 重置提交</span></div><div class=\"line\">$ git reset</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-revert.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<p>通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的新提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。<br><br><br>撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 <code>git revert</code>，它帮你做了所有的事情。</p>\n<h3 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a><code>git revert</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑一些文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交一份快照</span></div><div class=\"line\">$ git commit -m <span class=\"string\">\"做了一些改变\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 撤销刚刚的提交</span></div><div class=\"line\">$ git revert HEAD</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-revert-show1.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<img src=\"/2017/08/06/git-tutorials/git-revert-show2.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a><code>git reset</code></h3><p>和 <code>git checkout</code> 一样，<code>git reset</code> 有很多种用法。它可以被用来移除提交快照。它应该只被用于 <em>本地</em> 修改——你永远不应该重设和其他开发者共享的快照。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 从缓存区移除特定文件，但工作目录不变。</span></div><div class=\"line\">$ git reset &lt;file&gt;</div><div class=\"line\"><span class=\"comment\"># 重设缓冲区，匹配最近的一次提交，但工作目录不变。</span></div><div class=\"line\">$ git reset</div><div class=\"line\"><span class=\"comment\"># 重设缓冲区和工作目录，匹配最近的一次提交。</span></div><div class=\"line\">$ git reset --hard</div><div class=\"line\"><span class=\"comment\"># 将当前分支的末端移到 `&lt;commit&gt;`，将缓存区重设到这个提交，但不改变工作目录。</span></div><div class=\"line\">$ git reset &lt;commit&gt;</div><div class=\"line\"><span class=\"comment\"># 将当前分支的末端移到 `&lt;commit&gt;`，将缓存区和工作目录都重设到这个提交。</span></div><div class=\"line\">$ git reset --hard &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"git-revert-和-git-reset的区别\"><a href=\"#git-revert-和-git-reset的区别\" class=\"headerlink\" title=\"git revert 和 git reset的区别\"></a><code>git revert</code> 和 <code>git reset</code>的区别</h3><p>撤销(revert)被设计为撤销 <em>公开</em> 的提交的安全方式，<code>git reset</code>被设计为重设 <em>本地</em> 更改。<br>因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。</p>\n<p><strong>不要重设公共历史</strong> </p>\n<p>当有 <code>&lt;commit&gt;</code> 之后的提交被推送到公共仓库后，你绝不应该使用 <code>git reset</code>。发布一个提交之后，你必须假设其他开发者会依赖于它。<br>重点是，确保你只对本地的修改使用 <code>git reset</code>，而不是公共更改。如果你需要修复一个公共提交，<code>git revert</code> 命令正是被设计来做这个的。</p>\n<h3 id=\"取消文件缓存\"><a href=\"#取消文件缓存\" class=\"headerlink\" title=\"取消文件缓存\"></a>取消文件缓存</h3><p><code>git reset</code> 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，<code>hello.js</code> 和 <code>main.js</code>它们已经被加入了仓库中。</p>\n<ul>\n<li><p>例1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑了hello.js和main.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 缓存了目录下所有文件</span></div><div class=\"line\">$ git add .</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 意识到hello.js和main.js中的修改应该在不同的快照中提交</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 取消main.js缓存</span></div><div class=\"line\">$ git reset main.js</div><div class=\"line\"><span class=\"comment\"># 只提交hello.js</span></div><div class=\"line\">$ git commit -m <span class=\"string\">\"在hello.js做了一些改变\"</span></div><div class=\"line\"><span class=\"comment\"># 在另一份快照中提交main.js</span></div><div class=\"line\">$ git add main.js</div><div class=\"line\">$ git commit -m <span class=\"string\">\"编辑 main.js\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>例2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建一个叫`foo.js`的新文件，增加代码</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交到项目历史</span></div><div class=\"line\">$ git add foo.js</div><div class=\"line\">$ git commit -m <span class=\"string\">\"开始开发一个屌爆了的功能\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 再次编辑`foo.js`，修改其他文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交另一份快照</span></div><div class=\"line\">$ git commit -a -m <span class=\"string\">\"添加了屌炸了的功能\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 决定废弃这个功能，并删除相关的更改</span></div><div class=\"line\">$ git reset --hard HEAD~2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-clean\"><a href=\"#git-clean\" class=\"headerlink\" title=\"git clean\"></a><code>git clean</code></h2><p><code>git clean</code> 命令将未跟踪的文件从你的工作目录中移除。他和<code>rm</code>一样，只是提供了一条捷径。<br><code>git clean</code> 命令经常和 <code>git reset --hard</code> 一起使用。<code>reset</code> 只影响被跟踪的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 告诉你那些文件在命令执行后会被移除，而不是真的删除它。</span></div><div class=\"line\">$ git clean -n</div><div class=\"line\"><span class=\"comment\"># 移除当前目录下未被跟踪的文件</span></div><div class=\"line\">$ git clean -f</div><div class=\"line\"><span class=\"comment\"># 移除未跟踪的文件，但限制在某个路径下。</span></div><div class=\"line\">$ git clean -f &lt;path&gt;</div><div class=\"line\"><span class=\"comment\"># 移除未跟踪的文件，以及目录。</span></div><div class=\"line\">$ git clean -df</div></pre></td></tr></table></figure></p>\n<p>如果你在本地仓库中作死之后想要毁尸灭迹，<code>git reset --hard</code> 和 <code>git clean -f</code> 是你最好的选择。运行这两个命令使工作目录和最近的提交保持一致，让你在干净的状态下继续工作。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑了一些文件</span></div><div class=\"line\"><span class=\"comment\"># 新增了一些文件</span></div><div class=\"line\"><span class=\"comment\"># 发现有点问题需要 \"回滚\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将跟踪的文件回滚回去</span></div><div class=\"line\">$ git reset --hard</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 移除未跟踪的文件</span></div><div class=\"line\">$ git clean -df</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>移除当前目录下未被跟踪的文件。<code>-f</code>（强制）标记是必需的，除非 <code>clean.requireForce</code> 配置项被设为了 <code>false</code>（默认为 <code>true</code>）。它 <em>不会</em> 删除 <code>.gitignore</code> 中指定的未跟踪的文件。</p>\n</blockquote>\n<h1 id=\"重写项目历史\"><a href=\"#重写项目历史\" class=\"headerlink\" title=\"重写项目历史\"></a>重写项目历史</h1><h2 id=\"git-commit-amend\"><a href=\"#git-commit-amend\" class=\"headerlink\" title=\"git commit --amend\"></a><code>git commit --amend</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-commit-ammend1.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<img src=\"/2017/08/06/git-tutorials/git-commit-ammend2.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<blockquote>\n<p>注意 <strong>不要修复公共提交</strong><br>修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑 hello.js 和 main.js</span></div><div class=\"line\">$ git add hello.js</div><div class=\"line\">$ git commit</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 意识到你忘记添加 main.js 的更改</span></div><div class=\"line\">$ git add main.js</div><div class=\"line\">$ git commit --amend --no-edit</div></pre></td></tr></table></figure>\n<p>加入 <code>--no-edit</code> 标记会修复提交但不修改提交信息。</p>\n<blockquote>\n<p><code>git commit --amend</code> 命令是修复最新提交的便捷方式。amend 不只是修改了最新的提交——它进行了一次替换。</p>\n</blockquote>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a><code>git rebase</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将当前分支 rebase 到 `&lt;base&gt;`</span></div><div class=\"line\">$ git rebase &lt;base&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里可以是任何类型的提交引用（ID、分支名、标签，或是 <code>HEAD</code> 的相对引用）。</p>\n</blockquote>\n<p>rebase 的主要目的是为了保持一个线性的项目历史。</p>\n<img src=\"/2017/08/06/git-tutorials/git-rebase-1.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<p>要将你的 feature 分支整合进 master 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。下图展示了为什么 rebase 到 master 分支会促成一个快速向前的合并。<br><img src=\"/2017/08/06/git-tutorials/git-rebase-2.png\" alt=\"git入门教程\" title=\"git入门教程\"><br><img src=\"/2017/08/06/git-tutorials/git-rebase-3.png\" alt=\"git入门教程\" title=\"git入门教程\"><br>rebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 git merge 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。</p>\n<blockquote>\n<p>注意 <strong>不要 rebase 公共历史</strong></p>\n</blockquote>\n<h3 id=\"git-rebase-i\"><a href=\"#git-rebase-i\" class=\"headerlink\" title=\"git rebase -i\"></a><code>git rebase -i</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick fc62e55 added:file_size</div><div class=\"line\">pick 9824bf4 fixed:little thing</div><div class=\"line\">pick 21d80a5 added:number to <span class=\"built_in\">log</span></div><div class=\"line\">pick 76b9da6 added:the apply <span class=\"built_in\">command</span></div><div class=\"line\">pick c264051 Revert:<span class=\"string\">\"added file_size\"</span> - not implemented correctly</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Rebase f408319..b04dc3d onto f408319</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Commands:</span></div><div class=\"line\"><span class=\"comment\"># p, pick = use commit</span></div><div class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></div><div class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></div><div class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></div><div class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></div><div class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></div><div class=\"line\"><span class=\"comment\"># d, drop = remove commit</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></div><div class=\"line\"><span class=\"comment\">#</span></div></pre></td></tr></table></figure>\n<p>这些信息表示从你上一次推送操作起有5个提交。每个提交都用一行来表示，行格式如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(action) (partial-sha) (short commit message)</div></pre></td></tr></table></figure></p>\n<ul>\n<li>如果指定进行’pick’操作，git会以同样的提交信息（commit message）保存提交</li>\n<li>如果指定进行’reword’操作，git会保存提交，但是会停下来修改提交信息（commit message）</li>\n<li>如果指定进行’edit’操作，git会完成同样的工作，但是在对下一提交进行操作之前，它会返回到命令行让你对提交进行修正，或者对提交内容进行修改。</li>\n<li>如果指定进行’squash’操作，git会把这个提交和前一个提交合并成为一个新的提交</li>\n<li>如果指定进行’fixup’操作，但是丢弃提交的日志信息</li>\n<li>如果指定进行’exec’操作，使用 shell 执行命令</li>\n<li>如果指定进行’drop’操作，删除此次提交</li>\n</ul>\n<p>更改完成之后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase --<span class=\"built_in\">continue</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a><code>git reflog</code></h2><p>Git 用引用日志这种机制来记录分支顶端的更新。</p>\n<p>每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。</p>\n<p>🌰</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reflog</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-reflog.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --hard 9d43f81</div></pre></td></tr></table></figure>\n<p>使用 <code>git reset</code>，就有可能能将master变回之前的那个提交。</p>\n<p><strong>务必记住</strong>，引用日志提供的安全网只对提交到本地仓库的更改有效</p>\n<h1 id=\"保持同步\"><a href=\"#保持同步\" class=\"headerlink\" title=\"保持同步\"></a>保持同步</h1><h2 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a><code>git remote</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 显示你和其他远程仓库的连接。</span></div><div class=\"line\">$ git remote</div><div class=\"line\"><span class=\"comment\"># 和上个命令相同，并且同时显示每个连接的 URL。</span></div><div class=\"line\">$ git remote -v</div><div class=\"line\"><span class=\"comment\"># 创建一个新的远程仓库连接。</span></div><div class=\"line\">$ git remote add &lt;name&gt; &lt;url&gt;</div><div class=\"line\"><span class=\"comment\"># 移除名为 &lt;name&gt; 的远程仓库的连接。</span></div><div class=\"line\">$ git remote rm &lt;name&gt;</div><div class=\"line\"><span class=\"comment\"># 重命名远程连接</span></div><div class=\"line\">$ git remote rename &lt;old-name&gt; &lt;new-name&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>当你用 <code>git clone</code> 克隆仓库时，它会自动创建了一个名为 origin 的远程连接，指向被克隆的仓库。</p>\n</blockquote>\n<h2 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a><code>git fetch</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 拉取仓库中所有的分支。同时会从另一个仓库中下载所有需要的提交和文件。</span></div><div class=\"line\">$ git fetch &lt;remote&gt;</div><div class=\"line\"><span class=\"comment\"># 和上一个命令相同，但只拉取指定的分支。</span></div><div class=\"line\">$ git fetch &lt;remote&gt; &lt;branch&gt;</div></pre></td></tr></table></figure>\n<p>🌰</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-fetch.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看 master 与 origin/master 的区别</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> --oneline master..origin/master</div><div class=\"line\"><span class=\"comment\"># 合并</span></div><div class=\"line\">$ git merge origin/master</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull </div><div class=\"line\"><span class=\"comment\"># 等价于</span></div><div class=\"line\">$ git fetch &amp;&amp; git merge</div></pre></td></tr></table></figure>\n<p>用法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 拉取当前分支对应的远程副本中的更改，并立即并入本地副本。</span></div><div class=\"line\">$ git pull &lt;remote&gt;</div><div class=\"line\"><span class=\"comment\"># 效果等同于</span></div><div class=\"line\">$ git fetch &amp;&amp; git merge origin/.</div><div class=\"line\"><span class=\"comment\"># 使用 `git rebase` 合并远程分支和本地分支，而不是使用 `git merge`。</span></div><div class=\"line\">$ git pull --rebase &lt;remote&gt;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>--rebase</code> 标记可以用来保证线性的项目历史，防止合并提交（merge commits）的产生。很多开发者倾向于使用 rebase 而不是 merge，因为「我想要把我的更改放在其他人完成的工作之后」。</p>\n</blockquote>\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a><code>git push</code></h2><p>Push 是你将本地仓库中的提交转移到远程仓库中时要做的事。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将指定的分支推送到 `&lt;remote&gt;` 上</span></div><div class=\"line\">$ git push &lt;remote&gt; &lt;branch&gt;</div><div class=\"line\"><span class=\"comment\"># 强制推送</span></div><div class=\"line\">$ git push &lt;remote&gt; --force</div><div class=\"line\"><span class=\"comment\"># 将所有本地分支推送到指定的远程仓库。</span></div><div class=\"line\">$ git push &lt;remote&gt; --all</div><div class=\"line\"><span class=\"comment\"># 当你推送一个分支或是使用 `--all` 选项时，标签不会被自动推送上去。`--tags` 将你所有的本地标签推送到远程仓库中去。</span></div><div class=\"line\">$ git push &lt;remote&gt; --tags</div></pre></td></tr></table></figure></p>\n<h3 id=\"将本地提交推送到中央仓库的一些标准做法。\"><a href=\"#将本地提交推送到中央仓库的一些标准做法。\" class=\"headerlink\" title=\"将本地提交推送到中央仓库的一些标准做法。\"></a>将本地提交推送到中央仓库的一些标准做法。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 切换到 master 分支</span></div><div class=\"line\">$ git checkout master</div><div class=\"line\"><span class=\"comment\"># fetch 远程分支的代码</span></div><div class=\"line\">$ git fetch origin master</div><div class=\"line\"><span class=\"comment\"># 変基到 origin/master</span></div><div class=\"line\">$ git rebase -i origin/master</div><div class=\"line\"><span class=\"comment\"># Squash commits, fix up commit messages etc.</span></div><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n<blockquote>\n<p>因为我们已经确信本地的 <code>master</code> 分支是最新的，它应该导致快速向前的合并，<code>git push</code> 不应该抛出非快速向前之类的问题。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 列出仓库中所有分支。</span></div><div class=\"line\">$ git branch</div><div class=\"line\"><span class=\"comment\"># 创建一个名为 `&lt;branch&gt;` 的分支，__不会__ 自动切换到那个分支去</span></div><div class=\"line\">$ git branch &lt;branch&gt;</div><div class=\"line\"><span class=\"comment\"># 删除指定分支。这是一个安全的操作，Git 会阻止你删除包含未合并更改的分支。</span></div><div class=\"line\">$ git branch -d &lt;branch&gt;</div><div class=\"line\"><span class=\"comment\"># 强制删除指定分支，即使包含未合并更改。</span></div><div class=\"line\">$ git branch -D &lt;branch&gt;</div><div class=\"line\"><span class=\"comment\"># 将当前分支命名为 `&lt;branch&gt;`</span></div><div class=\"line\">$ git branch -m &lt;branch&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"使用分支\"><a href=\"#使用分支\" class=\"headerlink\" title=\"使用分支\"></a>使用分支</h1><h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a><code>git checkout</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看特定分支，分支应该已经通过 `git branch` 创建。之后 `&lt;existing-branch&gt;` 成为当前的分支，并更新工作目录的版本。</span></div><div class=\"line\">$ git checkout &lt;existing-branch&gt;</div><div class=\"line\"><span class=\"comment\"># 创建一个名为 `&lt;branch&gt;` 的分支，__不会__ 自动切换到那个分支去</span></div><div class=\"line\">$ git checkout -b &lt;new-branch&gt;</div><div class=\"line\"><span class=\"comment\"># 与上一条命令相同，只是将 `&lt;existing-branch&gt;` 作为新分支的基，而不是当前分支。</span></div><div class=\"line\">$ git checkout -b &lt;new-branch&gt; &lt;existing-branch&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a><code>git merge</code></h2><p>合并是 Git 将被 fork 的历史放回到一起的方式。<code>git merge</code> 命令允许你将 <code>git branch</code> 创建的多条分支合并成一个。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<img src=\"/2017/08/06/git-tutorials/git-merge.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<h1 id=\"Git-cheat-sheet\"><a href=\"#Git-cheat-sheet\" class=\"headerlink\" title=\"Git cheat sheet\"></a>Git cheat sheet</h1><p>最后附上<a href=\"https://www.atlassian.com/dam/jcr:8132028b-024f-4b6b-953e-e68fcce0c5fa/atlassian-git-cheatsheet.pdf\" target=\"_blank\" rel=\"external\">cheat sheet 下载链接</a></p>\n<h1 id=\"参考文章列表\"><a href=\"#参考文章列表\" class=\"headerlink\" title=\"参考文章列表\"></a>参考文章列表</h1><ul>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"external\">git book</a></li>\n<li><a href=\"https://github.com/geeeeeeeeek/git-recipes/wiki/\" target=\"_blank\" rel=\"external\">git-recipes BY 童仲毅（geeeeeeeeek@github）</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials\" target=\"_blank\" rel=\"external\">atlassian git tutorials</a></li>\n<li><a href=\"https://github.com/sparkbox/standard/blob/master/style/git/.gitmessage\" target=\"_blank\" rel=\"external\">sparkbox/standard/style/git/.gitmessage</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2016/01/12-git-advanced-commands\" target=\"_blank\" rel=\"external\">你需要知道的12个Git高级命令</a></li>\n<li><a href=\"https://stackoverflow.com/questions/11041729/why-does-github-recommend-https-over-ssh\" target=\"_blank\" rel=\"external\">Why does GitHub recommend HTTPS over SSH?</a></li>\n<li><a href=\"http://gitbook.liuhui998.com/index.html\" target=\"_blank\" rel=\"external\">Git Community Book 中文版</a></li>\n</ul>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/hiyangguo\" target=\"_blank\" rel=\"external\">杨过</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"大纲图\"><a href=\"#大纲图\" class=\"headerlink\" title=\"大纲图\"></a>大纲图</h1><img src=\"/2017/08/06/git-tutorials/git-outline.png\" alt=\"git入门教程\" title=\"git入门教程\">","more":"<p><a href=\"http://naotu.baidu.com/file/5dcda8cf019f0f79dc6285c98298daf8?token=a65a47efab6ab2be\" target=\"_blank\" rel=\"external\">原图地址</a></p>\n<h1 id=\"起步-关于版本控制\"><a href=\"#起步-关于版本控制\" class=\"headerlink\" title=\"起步 - 关于版本控制\"></a>起步 - 关于版本控制</h1><ul>\n<li>什么是“版本控制”？<blockquote>\n<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"本地版本控制系统\"><a href=\"#本地版本控制系统\" class=\"headerlink\" title=\"本地版本控制系统\"></a>本地版本控制系统</h2><ul>\n<li>使用本地数据库记录文件的历次更新<strong>差异</strong></li>\n</ul>\n<img src=\"/2017/08/06/git-tutorials/version-control-1.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<blockquote>\n<p>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。<br>这么做唯一的好处就是简单，但是特别容易犯错。<br>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。<br>其中最流行的一种叫做 RCS，它的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。</p>\n</blockquote>\n<h2 id=\"集中化的版本控制系统-Centralized-Version-Control-Systems，简称-CVCS\"><a href=\"#集中化的版本控制系统-Centralized-Version-Control-Systems，简称-CVCS\" class=\"headerlink\" title=\"集中化的版本控制系统 Centralized Version Control Systems，简称 CVCS\"></a>集中化的版本控制系统 Centralized Version Control Systems，简称 CVCS</h2><p>接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，集中化的版本控制系统</p>\n<ul>\n<li>优点：方便协作、权限控制、相比于维护本地数据库成本更低</li>\n<li>缺点：容错率低（服务器宕机、服务器数据丢失导致不可恢复的问题）<img src=\"/2017/08/06/git-tutorials/version-control-2.png\" alt=\"git入门教程\" title=\"git入门教程\">\n</li>\n</ul>\n<h2 id=\"分布式版本控制系统\"><a href=\"#分布式版本控制系统\" class=\"headerlink\" title=\"分布式版本控制系统\"></a>分布式版本控制系统</h2><ul>\n<li>客户端把代码仓库<strong>完整地镜像</strong>下来。每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</li>\n<li>这类系统都可以指定和若干不同的远端代码仓库进行交互。<img src=\"/2017/08/06/git-tutorials/version-control-3.png\" alt=\"git入门教程\" title=\"git入门教程\">\n</li>\n</ul>\n<h1 id=\"Git-简介\"><a href=\"#Git-简介\" class=\"headerlink\" title=\"Git 简介\"></a>Git 简介</h1><h2 id=\"什么是Git\"><a href=\"#什么是Git\" class=\"headerlink\" title=\"什么是Git\"></a>什么是Git</h2><p>Git 是目前世界上被最广泛使用的现代软件版本管理系统。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>速度</li>\n<li>简单的设计</li>\n<li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li>\n<li>完全分布式</li>\n<li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li>\n</ul>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li>Mac 用户：Xcode Command Line Tools 自带 Git (<code>xcode-select --install</code>)</li>\n<li>Linux 用户：<code>sudo apt-get install git</code></li>\n<li>Windows 用户：下载 <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git SCM</a></li>\n<li>对于 Windows 用户，安装后如果希望在全局的 cmd 中使用 git，需要把 git.exe 加入 PATH 环境变量中，或在 Git Bash 中使用 Git。</li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><ul>\n<li><a href=\"https://coding.net/help/doc/git/ssh-key.html\" target=\"_blank\" rel=\"external\">配置SSH公钥</a></li>\n</ul>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;your_username&quot;</div><div class=\"line\">$ git config --global user.email your_email@domain.com</div></pre></td></tr></table></figure>\n<h2 id=\"git-config-常用配置\"><a href=\"#git-config-常用配置\" class=\"headerlink\" title=\"git config 常用配置\"></a><code>git config</code> 常用配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 默认情况下，Git 会调用环境变量（$VISUAL 或 $EDITOR）设置的任意文本编辑器</div><div class=\"line\">$ git config --global core.editor emacs</div><div class=\"line\"># 设置 commit 的模板</div><div class=\"line\">$ git config --global commit.template ~/.gitmessage.txt</div><div class=\"line\"># 查看最后10次提交 </div><div class=\"line\">$ git config --global alias.last &quot;log -10 --pretty=format:&apos;%C(yellow)%h%Creset(%Cred%ad%Creset) - %Cgreen%aN%Creset : %s&apos;  --date=format:&apos;%Y-%m-%d %H:%M:%S&apos; --graph&quot;</div></pre></td></tr></table></figure>\n<p>Git 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。</p>\n<ul>\n<li><code>.git/config</code> – 特定仓库的设置。</li>\n<li><code>~/.gitconfig</code> – 特定用户的设置。这也是 <code>--global</code> 标记的设置项存放的位置。</li>\n<li><code>$(prefix)/etc/gitconfig</code> – 系统层面的设置。</li>\n</ul>\n<p>所有配置项都储存在纯文本文件中，所以 <code>git config</code> 命令其实只是一个提供便捷的命令行接口。</p>\n<blockquote>\n<p>拓展阅读<br>  <a href=\"https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits\" target=\"_blank\" rel=\"external\">How do I make Git use the editor of my choice for commits?</a><br>  <a href=\"https://git-scm.com/docs/git-log#_pretty_formats\" target=\"_blank\" rel=\"external\">Git log pretty formats</a></p>\n</blockquote>\n<h1 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h1><p>语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure></p>\n<p>例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 本地仓库</div><div class=\"line\">$ git clone /path/to/repository</div><div class=\"line\"># 通过 SSH</div><div class=\"line\">$ git clone git@git.hypers.com:Godfery/git-share-salloto.git</div><div class=\"line\"># 通过 HTTPS</div><div class=\"line\">$ git clone https:/path/to/repository.git</div></pre></td></tr></table></figure></p>\n<p>克隆某个分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> -b master git@git.hypers.com:Godfery/git-share-salloto.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"HTTPS和-SSH\"><a href=\"#HTTPS和-SSH\" class=\"headerlink\" title=\"HTTPS和 SSH\"></a>HTTPS和 SSH</h2><blockquote>\n<ul>\n<li>HTTPS：拿到url可以随便clone，但是在push的时候需要验证用户名和密码；可以缓存密码</li>\n<li>SSH：安全，需要在clone前添加SSH Key。SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</li>\n</ul>\n<p>拓展阅读<br><a href=\"http://wanderyt.github.io/2016/04/12/Git-Url-HTTPS-SSH-Difference/\" target=\"_blank\" rel=\"external\">Git Url HTTPS SSH 区别</a></p>\n</blockquote>\n<h1 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">#在指定目录创建一个空的 Git 仓库</div><div class=\"line\">git init &lt;directory&gt;</div><div class=\"line\">#初始化一个裸的 Git 仓库</div><div class=\"line\">git init --bare &lt;directory&gt;</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-init-bare.svg\" alt=\"初始化裸仓库\" title=\"初始化裸仓库\">\n<p>无论什么时候，都可以通过 <code>git status</code> 来查看你的 git 仓库状态。</p>\n<blockquote>\n<p><code>-—bare</code> 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将<code>-—bare</code>看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。</p>\n</blockquote>\n<h1 id=\"管理-remote\"><a href=\"#管理-remote\" class=\"headerlink\" title=\"管理 remote\"></a>管理 <code>remote</code></h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看当前 remote</span></div><div class=\"line\">$ git remote -v  </div><div class=\"line\"><span class=\"comment\"># 删除 remote</span></div><div class=\"line\">$ git remote remove origin</div><div class=\"line\"><span class=\"comment\"># 添加 remote</span></div><div class=\"line\">$ git remote add origin git@git.hypers.com:Godfery/git-share-salloto.git</div></pre></td></tr></table></figure>\n<h1 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h1><h2 id=\"本地工作流\"><a href=\"#本地工作流\" class=\"headerlink\" title=\"本地工作流\"></a>本地工作流</h2><img src=\"/2017/08/06/git-tutorials/workflow.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<blockquote>\n<p>你的本地仓库由 git 维护的三棵“树”组成。<br>第一个是你的 <code>工作目录</code>，它持有实际文件；<br>第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；<br>最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p>\n</blockquote>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><img src=\"/2017/08/06/git-tutorials/workflow2.png\" alt=\"工作原理\" title=\"工作原理\">\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>仓库（Repository）</td>\n<td>一个仓库包括了所有的版本信息、所有的分支和标记信息。在Git中仓库的每份拷贝都是完整的。仓库让你可以从中取得你的工作副本。</td>\n</tr>\n<tr>\n<td>分支（Branches）</td>\n<td>一个分支意味着一个独立的、拥有自己历史信息的代码线（code line）。</td>\n</tr>\n<tr>\n<td>标签（Tags）</td>\n<td>一个标记指的是某个分支某个特定时间点的状态。</td>\n</tr>\n<tr>\n<td>提交（Commit）</td>\n<td>提交代码后，仓库会创建一个新的版本。这个版本可以在后续被重新获得。</td>\n</tr>\n<tr>\n<td>修订（Revision）</td>\n<td>用来表示代码的一个版本状态。最新的版本可以通过HEAD来获取。之前的版本可以通过”HEAD~1”来获取，以此类推。Git通过用SHA1 hash算法表示的id来标识不同的版本。每一个 SHA1 id都是160位长，16进制标识的字符串。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"添加与提交\"><a href=\"#添加与提交\" class=\"headerlink\" title=\"添加与提交\"></a>添加与提交</h1><h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a><code>git add</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加某个文件</span></div><div class=\"line\">$ git add &lt; filename &gt;</div><div class=\"line\"><span class=\"comment\"># 添加所有更改的文件</span></div><div class=\"line\">$ git add .</div><div class=\"line\"><span class=\"comment\"># 交互式添加文件</span></div><div class=\"line\">$ git add -p</div></pre></td></tr></table></figure>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a><code>git commit</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit</div><div class=\"line\">$ git commit -m <span class=\"string\">\"测试提交\"</span></div><div class=\"line\"><span class=\"comment\"># 注意此操作会重写之前的提交</span></div><div class=\"line\">$ git commit -m <span class=\"string\">\"测试提交\"</span> --amend</div></pre></td></tr></table></figure>\n<h1 id=\"忽略特定的文件\"><a href=\"#忽略特定的文件\" class=\"headerlink\" title=\"忽略特定的文件\"></a>忽略特定的文件</h1><p>可以配置 Git 忽略特定的文件或者是文件夹。这些配置都放在 “<code>.gitignore</code>” 文件中。这个文件可以存在于不同的文件夹中，可以包含不同的文件匹配模式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 工作目录下的 gitignore，对所有的 clone 有效</span></div><div class=\"line\">/.gitignore</div><div class=\"line\"><span class=\"comment\"># 用户全局 gitignore，只对当前的用户有效</span></div><div class=\"line\">~/.gitignore_global</div><div class=\"line\"><span class=\"comment\"># 项目目录下的 gitignore ，只对当前的 clone 有效(你也可以使用配置变量 `core.excludesfile`)</span></div><div class=\"line\"><span class=\"variable\">$GIT_DIR</span>/info/exclude</div></pre></td></tr></table></figure></p>\n<p>忽略已被跟踪的文件的更改<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 忽略某个文件的变更</span></div><div class=\"line\">$ git update-index --assume-unchanged</div><div class=\"line\"><span class=\"comment\"># 去取消忽略某个文件的变更</span></div><div class=\"line\">$ git update-index --no-assume-unchanged</div><div class=\"line\"><span class=\"comment\"># 列出所有被 `assume-unchanged` 的文件</span></div><div class=\"line\">$ git ls-files -v | grep <span class=\"string\">'^h'</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>拓展阅读<br><a href=\"https://git-scm.com/docs/git-ls-files\" target=\"_blank\" rel=\"external\">git-ls-files</a></p>\n</blockquote>\n<h1 id=\"储藏与取出储藏\"><a href=\"#储藏与取出储藏\" class=\"headerlink\" title=\"储藏与取出储藏\"></a>储藏与取出储藏</h1><h2 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a><code>git stash</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 储藏当前所有的未提交 回到 HEAD 的状态</span></div><div class=\"line\">$ git stash </div><div class=\"line\"><span class=\"comment\"># 还原一个储藏，如不指定则为最后一个储藏</span></div><div class=\"line\">$ git stash apply  &lt;stash@&#123;1&#125;&gt;</div><div class=\"line\"><span class=\"comment\"># 储藏列表</span></div><div class=\"line\">$ git stash list</div><div class=\"line\"><span class=\"comment\"># 还原最后一个储藏，并将其从 list 中删除</span></div><div class=\"line\">$ git stash pop</div><div class=\"line\"><span class=\"comment\"># 清空所有储藏</span></div><div class=\"line\">$ git stash clear</div></pre></td></tr></table></figure>\n<h1 id=\"检查仓库状态\"><a href=\"#检查仓库状态\" class=\"headerlink\" title=\"检查仓库状态\"></a>检查仓库状态</h1><h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a><code>git status</code></h2><p>用法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure></p>\n<img src=\"/2017/08/06/git-tutorials/git-status-screenshots.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<ul>\n<li>new file：新文件</li>\n<li>modified：修改的文件</li>\n<li>deleted：删除的文件</li>\n<li>Untracked file：未跟踪的文件</li>\n</ul>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a><code>git log</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#使用默认格式显示完整地项目历史</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span></div><div class=\"line\"><span class=\"comment\"># 将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> --oneline</div><div class=\"line\"><span class=\"comment\">#搜索特定作者的提交。`&lt;pattern&gt;` 可以是字符串或正则表达式。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> --author=<span class=\"string\">\"&lt;pattern&gt;\"</span></div><div class=\"line\"><span class=\"comment\">#搜索提交信息匹配特定 `&lt;pattern&gt;` 的提交。`&lt;pattern&gt;` 可以是字符串或正则表达式。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> --grep=<span class=\"string\">\"&lt;pattern&gt;\"</span></div><div class=\"line\"><span class=\"comment\">#只显示发生在 `&lt;since&gt;` 和 `&lt;until&gt;` 之间的提交。两个参数可以是提交 ID、分支名、`HEAD` 或是任何一种引用。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> &lt;since&gt;..&lt;until&gt;</div><div class=\"line\"><span class=\"comment\">#只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> &lt;file&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"检出之前的提交\"><a href=\"#检出之前的提交\" class=\"headerlink\" title=\"检出之前的提交\"></a>检出之前的提交</h2><p><code>git checkout</code> 这个命令有三个不同的作用：<strong>检出文件</strong>、<strong>检出提交</strong>和<strong>检出分支</strong>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看文件之前的版本。它将工作目录中的 `&lt;file&gt;` 文件变成 `&lt;commit&gt;` 中那个文件的拷贝，并将它加入缓存区。</span></div><div class=\"line\">$ git checkout &lt;commit&gt; &lt;file&gt;</div><div class=\"line\"><span class=\"comment\"># 更新工作目录中的所有文件，使得和某个特定提交中的文件一致。</span></div><div class=\"line\">$ git checkout &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"回滚错误的修改\"><a href=\"#回滚错误的修改\" class=\"headerlink\" title=\"回滚错误的修改\"></a>回滚错误的修改</h1><h2 id=\"git-revert-和-git-reset\"><a href=\"#git-revert-和-git-reset\" class=\"headerlink\" title=\"git revert 和 git reset\"></a><code>git revert</code> 和 <code>git reset</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 用来撤销一个已经提交的快照。</span></div><div class=\"line\">$ git revert</div><div class=\"line\"><span class=\"comment\"># 重置提交</span></div><div class=\"line\">$ git reset</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-revert.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<p>通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的新提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。<br><br><br>撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 <code>git revert</code>，它帮你做了所有的事情。</p>\n<h3 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a><code>git revert</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑一些文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交一份快照</span></div><div class=\"line\">$ git commit -m <span class=\"string\">\"做了一些改变\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 撤销刚刚的提交</span></div><div class=\"line\">$ git revert HEAD</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-revert-show1.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<img src=\"/2017/08/06/git-tutorials/git-revert-show2.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a><code>git reset</code></h3><p>和 <code>git checkout</code> 一样，<code>git reset</code> 有很多种用法。它可以被用来移除提交快照。它应该只被用于 <em>本地</em> 修改——你永远不应该重设和其他开发者共享的快照。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 从缓存区移除特定文件，但工作目录不变。</span></div><div class=\"line\">$ git reset &lt;file&gt;</div><div class=\"line\"><span class=\"comment\"># 重设缓冲区，匹配最近的一次提交，但工作目录不变。</span></div><div class=\"line\">$ git reset</div><div class=\"line\"><span class=\"comment\"># 重设缓冲区和工作目录，匹配最近的一次提交。</span></div><div class=\"line\">$ git reset --hard</div><div class=\"line\"><span class=\"comment\"># 将当前分支的末端移到 `&lt;commit&gt;`，将缓存区重设到这个提交，但不改变工作目录。</span></div><div class=\"line\">$ git reset &lt;commit&gt;</div><div class=\"line\"><span class=\"comment\"># 将当前分支的末端移到 `&lt;commit&gt;`，将缓存区和工作目录都重设到这个提交。</span></div><div class=\"line\">$ git reset --hard &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"git-revert-和-git-reset的区别\"><a href=\"#git-revert-和-git-reset的区别\" class=\"headerlink\" title=\"git revert 和 git reset的区别\"></a><code>git revert</code> 和 <code>git reset</code>的区别</h3><p>撤销(revert)被设计为撤销 <em>公开</em> 的提交的安全方式，<code>git reset</code>被设计为重设 <em>本地</em> 更改。<br>因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。</p>\n<p><strong>不要重设公共历史</strong> </p>\n<p>当有 <code>&lt;commit&gt;</code> 之后的提交被推送到公共仓库后，你绝不应该使用 <code>git reset</code>。发布一个提交之后，你必须假设其他开发者会依赖于它。<br>重点是，确保你只对本地的修改使用 <code>git reset</code>，而不是公共更改。如果你需要修复一个公共提交，<code>git revert</code> 命令正是被设计来做这个的。</p>\n<h3 id=\"取消文件缓存\"><a href=\"#取消文件缓存\" class=\"headerlink\" title=\"取消文件缓存\"></a>取消文件缓存</h3><p><code>git reset</code> 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，<code>hello.js</code> 和 <code>main.js</code>它们已经被加入了仓库中。</p>\n<ul>\n<li><p>例1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑了hello.js和main.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 缓存了目录下所有文件</span></div><div class=\"line\">$ git add .</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 意识到hello.js和main.js中的修改应该在不同的快照中提交</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 取消main.js缓存</span></div><div class=\"line\">$ git reset main.js</div><div class=\"line\"><span class=\"comment\"># 只提交hello.js</span></div><div class=\"line\">$ git commit -m <span class=\"string\">\"在hello.js做了一些改变\"</span></div><div class=\"line\"><span class=\"comment\"># 在另一份快照中提交main.js</span></div><div class=\"line\">$ git add main.js</div><div class=\"line\">$ git commit -m <span class=\"string\">\"编辑 main.js\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>例2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建一个叫`foo.js`的新文件，增加代码</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交到项目历史</span></div><div class=\"line\">$ git add foo.js</div><div class=\"line\">$ git commit -m <span class=\"string\">\"开始开发一个屌爆了的功能\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 再次编辑`foo.js`，修改其他文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交另一份快照</span></div><div class=\"line\">$ git commit -a -m <span class=\"string\">\"添加了屌炸了的功能\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 决定废弃这个功能，并删除相关的更改</span></div><div class=\"line\">$ git reset --hard HEAD~2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-clean\"><a href=\"#git-clean\" class=\"headerlink\" title=\"git clean\"></a><code>git clean</code></h2><p><code>git clean</code> 命令将未跟踪的文件从你的工作目录中移除。他和<code>rm</code>一样，只是提供了一条捷径。<br><code>git clean</code> 命令经常和 <code>git reset --hard</code> 一起使用。<code>reset</code> 只影响被跟踪的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 告诉你那些文件在命令执行后会被移除，而不是真的删除它。</span></div><div class=\"line\">$ git clean -n</div><div class=\"line\"><span class=\"comment\"># 移除当前目录下未被跟踪的文件</span></div><div class=\"line\">$ git clean -f</div><div class=\"line\"><span class=\"comment\"># 移除未跟踪的文件，但限制在某个路径下。</span></div><div class=\"line\">$ git clean -f &lt;path&gt;</div><div class=\"line\"><span class=\"comment\"># 移除未跟踪的文件，以及目录。</span></div><div class=\"line\">$ git clean -df</div></pre></td></tr></table></figure></p>\n<p>如果你在本地仓库中作死之后想要毁尸灭迹，<code>git reset --hard</code> 和 <code>git clean -f</code> 是你最好的选择。运行这两个命令使工作目录和最近的提交保持一致，让你在干净的状态下继续工作。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑了一些文件</span></div><div class=\"line\"><span class=\"comment\"># 新增了一些文件</span></div><div class=\"line\"><span class=\"comment\"># 发现有点问题需要 \"回滚\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将跟踪的文件回滚回去</span></div><div class=\"line\">$ git reset --hard</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 移除未跟踪的文件</span></div><div class=\"line\">$ git clean -df</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>移除当前目录下未被跟踪的文件。<code>-f</code>（强制）标记是必需的，除非 <code>clean.requireForce</code> 配置项被设为了 <code>false</code>（默认为 <code>true</code>）。它 <em>不会</em> 删除 <code>.gitignore</code> 中指定的未跟踪的文件。</p>\n</blockquote>\n<h1 id=\"重写项目历史\"><a href=\"#重写项目历史\" class=\"headerlink\" title=\"重写项目历史\"></a>重写项目历史</h1><h2 id=\"git-commit-amend\"><a href=\"#git-commit-amend\" class=\"headerlink\" title=\"git commit --amend\"></a><code>git commit --amend</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-commit-ammend1.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<img src=\"/2017/08/06/git-tutorials/git-commit-ammend2.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<blockquote>\n<p>注意 <strong>不要修复公共提交</strong><br>修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑 hello.js 和 main.js</span></div><div class=\"line\">$ git add hello.js</div><div class=\"line\">$ git commit</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 意识到你忘记添加 main.js 的更改</span></div><div class=\"line\">$ git add main.js</div><div class=\"line\">$ git commit --amend --no-edit</div></pre></td></tr></table></figure>\n<p>加入 <code>--no-edit</code> 标记会修复提交但不修改提交信息。</p>\n<blockquote>\n<p><code>git commit --amend</code> 命令是修复最新提交的便捷方式。amend 不只是修改了最新的提交——它进行了一次替换。</p>\n</blockquote>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a><code>git rebase</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将当前分支 rebase 到 `&lt;base&gt;`</span></div><div class=\"line\">$ git rebase &lt;base&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里可以是任何类型的提交引用（ID、分支名、标签，或是 <code>HEAD</code> 的相对引用）。</p>\n</blockquote>\n<p>rebase 的主要目的是为了保持一个线性的项目历史。</p>\n<img src=\"/2017/08/06/git-tutorials/git-rebase-1.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<p>要将你的 feature 分支整合进 master 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。下图展示了为什么 rebase 到 master 分支会促成一个快速向前的合并。<br><img src=\"/2017/08/06/git-tutorials/git-rebase-2.png\" alt=\"git入门教程\" title=\"git入门教程\"><br><img src=\"/2017/08/06/git-tutorials/git-rebase-3.png\" alt=\"git入门教程\" title=\"git入门教程\"><br>rebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 git merge 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。</p>\n<blockquote>\n<p>注意 <strong>不要 rebase 公共历史</strong></p>\n</blockquote>\n<h3 id=\"git-rebase-i\"><a href=\"#git-rebase-i\" class=\"headerlink\" title=\"git rebase -i\"></a><code>git rebase -i</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick fc62e55 added:file_size</div><div class=\"line\">pick 9824bf4 fixed:little thing</div><div class=\"line\">pick 21d80a5 added:number to <span class=\"built_in\">log</span></div><div class=\"line\">pick 76b9da6 added:the apply <span class=\"built_in\">command</span></div><div class=\"line\">pick c264051 Revert:<span class=\"string\">\"added file_size\"</span> - not implemented correctly</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Rebase f408319..b04dc3d onto f408319</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Commands:</span></div><div class=\"line\"><span class=\"comment\"># p, pick = use commit</span></div><div class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></div><div class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></div><div class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></div><div class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></div><div class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></div><div class=\"line\"><span class=\"comment\"># d, drop = remove commit</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></div><div class=\"line\"><span class=\"comment\">#</span></div></pre></td></tr></table></figure>\n<p>这些信息表示从你上一次推送操作起有5个提交。每个提交都用一行来表示，行格式如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(action) (partial-sha) (short commit message)</div></pre></td></tr></table></figure></p>\n<ul>\n<li>如果指定进行’pick’操作，git会以同样的提交信息（commit message）保存提交</li>\n<li>如果指定进行’reword’操作，git会保存提交，但是会停下来修改提交信息（commit message）</li>\n<li>如果指定进行’edit’操作，git会完成同样的工作，但是在对下一提交进行操作之前，它会返回到命令行让你对提交进行修正，或者对提交内容进行修改。</li>\n<li>如果指定进行’squash’操作，git会把这个提交和前一个提交合并成为一个新的提交</li>\n<li>如果指定进行’fixup’操作，但是丢弃提交的日志信息</li>\n<li>如果指定进行’exec’操作，使用 shell 执行命令</li>\n<li>如果指定进行’drop’操作，删除此次提交</li>\n</ul>\n<p>更改完成之后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase --<span class=\"built_in\">continue</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a><code>git reflog</code></h2><p>Git 用引用日志这种机制来记录分支顶端的更新。</p>\n<p>每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。</p>\n<p>🌰</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reflog</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-reflog.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --hard 9d43f81</div></pre></td></tr></table></figure>\n<p>使用 <code>git reset</code>，就有可能能将master变回之前的那个提交。</p>\n<p><strong>务必记住</strong>，引用日志提供的安全网只对提交到本地仓库的更改有效</p>\n<h1 id=\"保持同步\"><a href=\"#保持同步\" class=\"headerlink\" title=\"保持同步\"></a>保持同步</h1><h2 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a><code>git remote</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 显示你和其他远程仓库的连接。</span></div><div class=\"line\">$ git remote</div><div class=\"line\"><span class=\"comment\"># 和上个命令相同，并且同时显示每个连接的 URL。</span></div><div class=\"line\">$ git remote -v</div><div class=\"line\"><span class=\"comment\"># 创建一个新的远程仓库连接。</span></div><div class=\"line\">$ git remote add &lt;name&gt; &lt;url&gt;</div><div class=\"line\"><span class=\"comment\"># 移除名为 &lt;name&gt; 的远程仓库的连接。</span></div><div class=\"line\">$ git remote rm &lt;name&gt;</div><div class=\"line\"><span class=\"comment\"># 重命名远程连接</span></div><div class=\"line\">$ git remote rename &lt;old-name&gt; &lt;new-name&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>当你用 <code>git clone</code> 克隆仓库时，它会自动创建了一个名为 origin 的远程连接，指向被克隆的仓库。</p>\n</blockquote>\n<h2 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a><code>git fetch</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 拉取仓库中所有的分支。同时会从另一个仓库中下载所有需要的提交和文件。</span></div><div class=\"line\">$ git fetch &lt;remote&gt;</div><div class=\"line\"><span class=\"comment\"># 和上一个命令相同，但只拉取指定的分支。</span></div><div class=\"line\">$ git fetch &lt;remote&gt; &lt;branch&gt;</div></pre></td></tr></table></figure>\n<p>🌰</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div></pre></td></tr></table></figure>\n<img src=\"/2017/08/06/git-tutorials/git-fetch.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看 master 与 origin/master 的区别</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> --oneline master..origin/master</div><div class=\"line\"><span class=\"comment\"># 合并</span></div><div class=\"line\">$ git merge origin/master</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull </div><div class=\"line\"><span class=\"comment\"># 等价于</span></div><div class=\"line\">$ git fetch &amp;&amp; git merge</div></pre></td></tr></table></figure>\n<p>用法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 拉取当前分支对应的远程副本中的更改，并立即并入本地副本。</span></div><div class=\"line\">$ git pull &lt;remote&gt;</div><div class=\"line\"><span class=\"comment\"># 效果等同于</span></div><div class=\"line\">$ git fetch &amp;&amp; git merge origin/.</div><div class=\"line\"><span class=\"comment\"># 使用 `git rebase` 合并远程分支和本地分支，而不是使用 `git merge`。</span></div><div class=\"line\">$ git pull --rebase &lt;remote&gt;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>--rebase</code> 标记可以用来保证线性的项目历史，防止合并提交（merge commits）的产生。很多开发者倾向于使用 rebase 而不是 merge，因为「我想要把我的更改放在其他人完成的工作之后」。</p>\n</blockquote>\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a><code>git push</code></h2><p>Push 是你将本地仓库中的提交转移到远程仓库中时要做的事。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将指定的分支推送到 `&lt;remote&gt;` 上</span></div><div class=\"line\">$ git push &lt;remote&gt; &lt;branch&gt;</div><div class=\"line\"><span class=\"comment\"># 强制推送</span></div><div class=\"line\">$ git push &lt;remote&gt; --force</div><div class=\"line\"><span class=\"comment\"># 将所有本地分支推送到指定的远程仓库。</span></div><div class=\"line\">$ git push &lt;remote&gt; --all</div><div class=\"line\"><span class=\"comment\"># 当你推送一个分支或是使用 `--all` 选项时，标签不会被自动推送上去。`--tags` 将你所有的本地标签推送到远程仓库中去。</span></div><div class=\"line\">$ git push &lt;remote&gt; --tags</div></pre></td></tr></table></figure></p>\n<h3 id=\"将本地提交推送到中央仓库的一些标准做法。\"><a href=\"#将本地提交推送到中央仓库的一些标准做法。\" class=\"headerlink\" title=\"将本地提交推送到中央仓库的一些标准做法。\"></a>将本地提交推送到中央仓库的一些标准做法。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 切换到 master 分支</span></div><div class=\"line\">$ git checkout master</div><div class=\"line\"><span class=\"comment\"># fetch 远程分支的代码</span></div><div class=\"line\">$ git fetch origin master</div><div class=\"line\"><span class=\"comment\"># 変基到 origin/master</span></div><div class=\"line\">$ git rebase -i origin/master</div><div class=\"line\"><span class=\"comment\"># Squash commits, fix up commit messages etc.</span></div><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n<blockquote>\n<p>因为我们已经确信本地的 <code>master</code> 分支是最新的，它应该导致快速向前的合并，<code>git push</code> 不应该抛出非快速向前之类的问题。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 列出仓库中所有分支。</span></div><div class=\"line\">$ git branch</div><div class=\"line\"><span class=\"comment\"># 创建一个名为 `&lt;branch&gt;` 的分支，__不会__ 自动切换到那个分支去</span></div><div class=\"line\">$ git branch &lt;branch&gt;</div><div class=\"line\"><span class=\"comment\"># 删除指定分支。这是一个安全的操作，Git 会阻止你删除包含未合并更改的分支。</span></div><div class=\"line\">$ git branch -d &lt;branch&gt;</div><div class=\"line\"><span class=\"comment\"># 强制删除指定分支，即使包含未合并更改。</span></div><div class=\"line\">$ git branch -D &lt;branch&gt;</div><div class=\"line\"><span class=\"comment\"># 将当前分支命名为 `&lt;branch&gt;`</span></div><div class=\"line\">$ git branch -m &lt;branch&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"使用分支\"><a href=\"#使用分支\" class=\"headerlink\" title=\"使用分支\"></a>使用分支</h1><h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a><code>git checkout</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看特定分支，分支应该已经通过 `git branch` 创建。之后 `&lt;existing-branch&gt;` 成为当前的分支，并更新工作目录的版本。</span></div><div class=\"line\">$ git checkout &lt;existing-branch&gt;</div><div class=\"line\"><span class=\"comment\"># 创建一个名为 `&lt;branch&gt;` 的分支，__不会__ 自动切换到那个分支去</span></div><div class=\"line\">$ git checkout -b &lt;new-branch&gt;</div><div class=\"line\"><span class=\"comment\"># 与上一条命令相同，只是将 `&lt;existing-branch&gt;` 作为新分支的基，而不是当前分支。</span></div><div class=\"line\">$ git checkout -b &lt;new-branch&gt; &lt;existing-branch&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a><code>git merge</code></h2><p>合并是 Git 将被 fork 的历史放回到一起的方式。<code>git merge</code> 命令允许你将 <code>git branch</code> 创建的多条分支合并成一个。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<img src=\"/2017/08/06/git-tutorials/git-merge.png\" alt=\"git入门教程\" title=\"git入门教程\">\n<h1 id=\"Git-cheat-sheet\"><a href=\"#Git-cheat-sheet\" class=\"headerlink\" title=\"Git cheat sheet\"></a>Git cheat sheet</h1><p>最后附上<a href=\"https://www.atlassian.com/dam/jcr:8132028b-024f-4b6b-953e-e68fcce0c5fa/atlassian-git-cheatsheet.pdf\" target=\"_blank\" rel=\"external\">cheat sheet 下载链接</a></p>\n<h1 id=\"参考文章列表\"><a href=\"#参考文章列表\" class=\"headerlink\" title=\"参考文章列表\"></a>参考文章列表</h1><ul>\n<li><a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"external\">git book</a></li>\n<li><a href=\"https://github.com/geeeeeeeeek/git-recipes/wiki/\" target=\"_blank\" rel=\"external\">git-recipes BY 童仲毅（geeeeeeeeek@github）</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials\" target=\"_blank\" rel=\"external\">atlassian git tutorials</a></li>\n<li><a href=\"https://github.com/sparkbox/standard/blob/master/style/git/.gitmessage\" target=\"_blank\" rel=\"external\">sparkbox/standard/style/git/.gitmessage</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2016/01/12-git-advanced-commands\" target=\"_blank\" rel=\"external\">你需要知道的12个Git高级命令</a></li>\n<li><a href=\"https://stackoverflow.com/questions/11041729/why-does-github-recommend-https-over-ssh\" target=\"_blank\" rel=\"external\">Why does GitHub recommend HTTPS over SSH?</a></li>\n<li><a href=\"http://gitbook.liuhui998.com/index.html\" target=\"_blank\" rel=\"external\">Git Community Book 中文版</a></li>\n</ul>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/hiyangguo\" target=\"_blank\" rel=\"external\">杨过</a></p>\n</blockquote>"},{"title":"从MVC到MVVM——数据与视图关系的演进","date":"2017-07-31T01:48:46.000Z","_content":"\n\n之前在网上看到过一位设计师这样说：现在绝大多数的网站做的其实只是把数据库里的内容展示到网页上，除此之外并没有做其他任何事情，所有的网站都是没有温度的。\n\n他当然是在只是在批评当前网站的单一与乏味，但是我们仔细想想前半句话却觉得似乎很有道理，似乎整个web开发史就只是在反反复复的解决这一件事。\n\n如何把数据展示到页面上，如何更快的把数据展示到页面上，如何更好的把数据展示到页面上，如何方便用户和展示到页面上的数据进行交互。web的发展史在重复的解决着这些问题，因此他们之间关系发展的历史也是web开发的发展史。\n\nweb的诞生时期\n\n关于web的诞生网上的资料大致是这个样子：\n\n> - 1989年3月: Tim Berners-Lee**撰写**了 “Information Management: A Proposal” 并在欧洲核子研究中心广泛征求意见。1990年10月，Tim Berners-Lee 开始进行使用NeXTStep开发环境开发超文本GUI浏览器及编辑器。他为这个项目命名为“万维网” 。\n> - 1991年8月: 互联网上出现了通过FTP传送的万维网软件。\n> - 1992年5月: Pei Wei的 “Viola” GUI 浏览器X测试版本诞生。\n> - 1993年2月: 国家超级计算应用中心（National Center for Supercomputing Applications ）发布了编写的“**Mosaic** for X” 的第一份alpha版本。\n> - 1993年4月: 欧洲核子研究中心宣布万维网技术将可以被人们免费使用，欧洲核子研究中心将不收取和此项技术相关的费用。\n> - 1994年5月: 第一节国际万维网大会在日内瓦的欧洲核子研究中心召开。\n> - 1994年10月: 万维网联盟（World Wide Web Consortium ，即W3C）成立。\n\n确切的时间并不重要，有人认为是1989年3月因为那个时候概念第一次被提出来，但是也有人认为是91年，因为那个时候这个概念才算第一次落地。\n\n但是正真意义上的web开发的诞生就是浏览器诞生之后了。那个时候我们的web开发，其实就是内容开发，它与今天我们做PPT，写word文档没有什么本质不同。为什么说在当时web开发等同于内容开发呢？看看HTML的全称就知道了，Hypertext Markup Language ，超文本标记语言。\n\n{% asset_img snipaste_20170730_122053.png snipaste_20170730_122053 %}\n\n```html\n<header>\n    <title>The World Wide Web project</title>\n    <nextid n=\"55\">\n</header>\n<body>\n    <h1>World Wide Web</h1>\n    The WorldWideWeb (W3) is a wide-area\n    <a name=\"0\" href=\"WhatIs.html\">\n    hypermedia\n    </a> information retrieval initiative aiming to give universal access to a large universe of documents.\n    <p>Everything there is online about W3 is linked directly or indirectly to this document, including an\n    \t<a name=\"24\" href=\"Summary.html\">executive summary</a> of the project,\n    \t<a name=\"29\" href=\"Administration/Mailing/Overview.html\">Mailing lists</a> ,\n    \t<a name=\"30\" href=\"Policy.html\">Policy</a> , November's\n    \t<a name=\"34\" href=\"News/9211.html\">W3  news</a> ,\n    \t<a name=\"41\" href=\"FAQ/List.html\">Frequently Asked Questions</a> .\n    \t<dl>\n    \t\t<dt><a name=\"44\" href=\"../DataSources/Top.html\">What's out there?</a>\n    \t\t<dd> Pointers to the world's online information,<a name=\"45\" href=\"../DataSources/bySubject/Overview.html\"> subjects</a>\n    , \n    \t\t<a name=\"z54\" href=\"../DataSources/WWW/Servers.html\">W3 servers</a>, etc.\n    \t\t<dt><a name=\"46\" href=\"Help.html\">Help</a>\n    \t\t<dd> on the browser you are using\n    \t\t<dt><a name=\"13\" href=\"Status.html\">Software Products</a>\n    \t\t<dd> A list of W3 project\n    \t\t...\n```\n\n我们看代码其实就是普通的HTML，所以那个时候的数据和视图的关系甚至说不上耦合，因为数据本身就是视图。\n\nCGI时代\n\nweb诞生之初所有的页面几乎都是人肉编写，服务器接收到对特定文件的请求，然后找到对应文件，丢给客户端。出于对动态内容的需要，人们定义了 CGI 。\n\nCGI （ Common Gateway Interface / 通用网关接口 ）它定义了web服务器与应用程序之间通讯的接口。有了CGI，web从之间返回给浏览器静态内容变成了，拿到URL解析出其中的参数，判断是否请求的是静态资源然后如果是动态资源，那么把解析出的参数丢给CGI程序，CGI调用外部数据库或者直接返回输出的内容给服务器。然后服务器把输出之间返回给浏览器。\n\n{% asset_img cgi.png CGI %}\n\n```c\n/*\n * parse_uri - parse URI into filename and CGI args\n *             return 0 if dynamic content, 1 if static\n */\n/* $begin parse_uri */\nint parse_uri(char *uri, char *filename, char *cgiargs) \n{\n    char *ptr;\n\n    if (!strstr(uri, \"cgi-bin\")) {  /* Static content */ \n      strcpy(cgiargs, \"\");                             \n      strcpy(filename, \".\");                           \n      strcat(filename, uri);                           \n      if (uri[strlen(uri)-1] == '/')                   \n          strcat(filename, \"home.html\");               \n      return 1;\n    }\n    else {  /* Dynamic content */                        \n      ptr = index(uri, '?');                           \n      if (ptr) {\n          strcpy(cgiargs, ptr+1);\n          *ptr = '\\0';\n\t}\n\telse {\n\t    strcpy(cgiargs, \"\");                         \n\t\tstrcpy(filename, \".\");                           \n\t\tstrcat(filename, uri);                           \n\t\treturn 0;\n    }\n}\n/* $end parse_uri */\n```\n\n这是《深入理解计算机系统》里一个服务器实现的一段代码，作用呢就是判断URL是直接请求静态资源还是动态内容。全部内容可以在原书里找到。\n\nWeb编程语言时代\n\nCGI程序一般返回的都是HTML内容，用当时的 C/C++ ，或者Perl语言直接来处理字符串，想想就会非常的酸爽。所以需要一些库或者之间在语言层面把这部分的工作给处理掉 。\n\n最好是这样，返回结果里永远不会变化的那部分的就放在一个固定的地方，然后动态的内容来填充这部分内容。\n\n基于这个想法，伟大的PHP诞生了。\n\nPHP（ Hypertext Preprocessor / 超文本预处理器 ）最早由 Rasmus Lerdorf 在1995年发明。它自带了对于模板的支持，可以把动态内容写在模板里，直接输出模板。\n\n```php\n<?php\nif (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {\n?>\n<h3>strpos() 肯定没有返回假 (FALSE)</h3>\n<p>正在使用 Internet Explorer</p>\n<?php\n} else {\n?>\n<h3>strpos() 肯定返回假 (FALSE)</h3>\n<center><b>没有使用 Internet Explorer</b></center>\n<?php\n}\n?>\n```\n\nPHP的一个小例子，通过UA来判断当前浏览器是否为IE，因为混合了html模板，可以在代码里直观的看到输出的结果。\n\n随着web的发展，逐渐出现了其他的web脚本语言，比如ASP和JSP脚本语言。这个时期的数据可以说是耦合在视图里的，开发者会直接在脚本里编写sql语句来查询数据，吐给服务器。\n\n这个时期 java 语言的jsp规范里提出了一个JSP Model 2 模型，并且将其定义为一种架构模式。这个东西最大的意义是把MVC 这种GUI编程架构带到了Web。\n\n{% asset_img mvc.gif MVC %}\n\n这个时期 JAVA web的各种基础应用的发展使得java提出了j2ee的web架构，而微软则提出了.net 开发平台。\n\nMVC开发框架时代\n\n2004年，DHH（David Heinemeier Hansson）在开发Basecamp的时候发现无论是php还是java来开发web应用都不怎么满意，然后在好友的建议下使用了ruby 并且一见钟情，于是在产品开发完毕后抽出了其中的框架，并且命名为Ruby on Rails。\n\n\n{% asset_img MVC.PNG MVC %}\n\n结合这张图片我们看一下rails的具体运作流程，\n\n首先用户发送一个请求：\n\nhttp://localhost:3000/articles/index\n\n这个请求被router拦截：\n\n```ruby\nRails::Application.routes.draw do\n  get \"articles/index\" => \"articles#index\"\n  # ...\nend\n```\n\n并且分发给welcom controller的say action\n\n```ruby\n\nclass ArticlesController < ApplicationController\n  def index\n    @articles = Article.all\n  end\n \n  def show\n    ...\n  end\n \n  def new\n    ...\n  end\n```\n\ncontroller把数据丢给view\n\n```ruby\n<h1>Listing articles</h1>\n \n<table>\n  <tr>\n    <th>Title</th>\n    <th>Text</th>\n  </tr>\n \n  <% @articles.each do |article| %>\n    <tr>\n      <td><%= article.title %></td>\n      <td><%= article.text %></td>\n    </tr>\n  <% end %>\n</table>\n```\n\n最后输出HTML返回给用户。\n\nSAP（Single Page Application / 单页应用）\n\n2005年出现的AJAX这个概念使得 JavaScript 催生了现代意义上的前端。AJAX即“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。使得页面可以进行局部刷新，而不是每次都重新请求新的页面，Google的一系列产品比如Gmail，google map的成功使得 AJAX 的应用变得越来越广泛。\n\n于是出现了SAP这个概念，SAP的出现没有改变后端web框架的模式，但是却将View也就是视图层的复杂度全部挪到了前端。于是，直接使用脚本方式的js越来越无法满足web开发的需要，催生出了前端的MVC框架。\n\n前端MVC与传统MVC的区别\n\n首先是前端的Controller的定义很模糊，因为很多控件的存在，它往往即是View又是Controller。这直接到了MVC的单一职责原则。\n\n其次，在后端的MVC框架里，每个请求作为一个Action，然而SAP应用里，Action的来源则有可能会有很多，既有可能是来自于用户的输入，也有可能来自于URL的改变，甚至是web程序本身。\n\n还有就是Model，前端MVC的Model不光要保存应用相关的状态（即从Server端拿到的数据），同时还要维护UI状态，比如Dropdown，Modal等组件的显示或者是隐藏。\n\n因此和后端MVC框架相比，前端框架的架构更像这个样子：\n\n{% asset_img FE-MVC.jpg FE-MVC %}\n\n区别在于Model和View是可以直接通讯的，但是View和Model直接通讯会带来诸多维护上的问题，最大的问题数据和界面同步的问题，\n\n解决这个问题的关键在于阻止View和Model进行直接通讯，于是我们可以将上图中一部分可以和View进行通讯的Model拿出来作为View-model，同时把Controller里面用于同步View和Model关系的部分也放到View-model里，然后他们之间的关系就变成这样。\n\n{% asset_img MVVM.png MVVM %}\n\nVue作为一个视图框架实现了的视图和数据的双向绑定功能\n\n```jsx\n<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n```\n\n```jsx\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n```\n\n{% asset_img 2-way.png 2-way %}\n\n传统的MV*框架存在着数据流不清晰的问题，因为View和Model直接的通信往往都是双向的。\n\n{% asset_img MV.PNG 2way %}\n\n因此为了让数据流更加清楚，Facebook提出了单向数据流的Flux框架。\n\n{% asset_img FLUX.png Flux %}\n\n用户发出一个Action Dispatcher收到Action 分发给Store，Store根据Action的类型来改变数据，然后通知View，View收到通知更新界面。\n\n如果需要从View来更新数据的话就添加一个Action，这样即使在应用很复杂的情况下，数据的流向也会变得很清楚了。\n\n{% asset_img 1-way.jpg 1-WAY %}\n\n总结一下，事实上纵观web发展史，框架直接的架构本质上来看在传统web开发框架Rails出现之后久没发生太大变化了，后面的几乎都是这种模式的变体，web还在发展，也肯定会有旧的框架死掉，新的框架出来，抓住其中的核心才是最关键的。\n\n\n\n最后本文内容参考了众多资料：\n\n这里只列出最主要的几篇，感谢他们用心写下的文章。\n\nhttps://www.zhihu.com/question/22689579/answer/87879505\n\nhttp://draveness.me/mvx.html\n\nhttp://www.cnblogs.com/winter-cn/p/4285171.html\n\n> 本文作者: [Xiaoxiong](https://github.com/posebear1990)","source":"_posts/modern-front-end-develop.md","raw":"---\ntitle: 从MVC到MVVM——数据与视图关系的演进\ndate: 2017-07-31 09:48:46\ntags:\n- mvc\n- web框架\n- mvvm\n---\n\n\n之前在网上看到过一位设计师这样说：现在绝大多数的网站做的其实只是把数据库里的内容展示到网页上，除此之外并没有做其他任何事情，所有的网站都是没有温度的。\n\n他当然是在只是在批评当前网站的单一与乏味，但是我们仔细想想前半句话却觉得似乎很有道理，似乎整个web开发史就只是在反反复复的解决这一件事。\n\n如何把数据展示到页面上，如何更快的把数据展示到页面上，如何更好的把数据展示到页面上，如何方便用户和展示到页面上的数据进行交互。web的发展史在重复的解决着这些问题，因此他们之间关系发展的历史也是web开发的发展史。\n\nweb的诞生时期\n\n关于web的诞生网上的资料大致是这个样子：\n\n> - 1989年3月: Tim Berners-Lee**撰写**了 “Information Management: A Proposal” 并在欧洲核子研究中心广泛征求意见。1990年10月，Tim Berners-Lee 开始进行使用NeXTStep开发环境开发超文本GUI浏览器及编辑器。他为这个项目命名为“万维网” 。\n> - 1991年8月: 互联网上出现了通过FTP传送的万维网软件。\n> - 1992年5月: Pei Wei的 “Viola” GUI 浏览器X测试版本诞生。\n> - 1993年2月: 国家超级计算应用中心（National Center for Supercomputing Applications ）发布了编写的“**Mosaic** for X” 的第一份alpha版本。\n> - 1993年4月: 欧洲核子研究中心宣布万维网技术将可以被人们免费使用，欧洲核子研究中心将不收取和此项技术相关的费用。\n> - 1994年5月: 第一节国际万维网大会在日内瓦的欧洲核子研究中心召开。\n> - 1994年10月: 万维网联盟（World Wide Web Consortium ，即W3C）成立。\n\n确切的时间并不重要，有人认为是1989年3月因为那个时候概念第一次被提出来，但是也有人认为是91年，因为那个时候这个概念才算第一次落地。\n\n但是正真意义上的web开发的诞生就是浏览器诞生之后了。那个时候我们的web开发，其实就是内容开发，它与今天我们做PPT，写word文档没有什么本质不同。为什么说在当时web开发等同于内容开发呢？看看HTML的全称就知道了，Hypertext Markup Language ，超文本标记语言。\n\n{% asset_img snipaste_20170730_122053.png snipaste_20170730_122053 %}\n\n```html\n<header>\n    <title>The World Wide Web project</title>\n    <nextid n=\"55\">\n</header>\n<body>\n    <h1>World Wide Web</h1>\n    The WorldWideWeb (W3) is a wide-area\n    <a name=\"0\" href=\"WhatIs.html\">\n    hypermedia\n    </a> information retrieval initiative aiming to give universal access to a large universe of documents.\n    <p>Everything there is online about W3 is linked directly or indirectly to this document, including an\n    \t<a name=\"24\" href=\"Summary.html\">executive summary</a> of the project,\n    \t<a name=\"29\" href=\"Administration/Mailing/Overview.html\">Mailing lists</a> ,\n    \t<a name=\"30\" href=\"Policy.html\">Policy</a> , November's\n    \t<a name=\"34\" href=\"News/9211.html\">W3  news</a> ,\n    \t<a name=\"41\" href=\"FAQ/List.html\">Frequently Asked Questions</a> .\n    \t<dl>\n    \t\t<dt><a name=\"44\" href=\"../DataSources/Top.html\">What's out there?</a>\n    \t\t<dd> Pointers to the world's online information,<a name=\"45\" href=\"../DataSources/bySubject/Overview.html\"> subjects</a>\n    , \n    \t\t<a name=\"z54\" href=\"../DataSources/WWW/Servers.html\">W3 servers</a>, etc.\n    \t\t<dt><a name=\"46\" href=\"Help.html\">Help</a>\n    \t\t<dd> on the browser you are using\n    \t\t<dt><a name=\"13\" href=\"Status.html\">Software Products</a>\n    \t\t<dd> A list of W3 project\n    \t\t...\n```\n\n我们看代码其实就是普通的HTML，所以那个时候的数据和视图的关系甚至说不上耦合，因为数据本身就是视图。\n\nCGI时代\n\nweb诞生之初所有的页面几乎都是人肉编写，服务器接收到对特定文件的请求，然后找到对应文件，丢给客户端。出于对动态内容的需要，人们定义了 CGI 。\n\nCGI （ Common Gateway Interface / 通用网关接口 ）它定义了web服务器与应用程序之间通讯的接口。有了CGI，web从之间返回给浏览器静态内容变成了，拿到URL解析出其中的参数，判断是否请求的是静态资源然后如果是动态资源，那么把解析出的参数丢给CGI程序，CGI调用外部数据库或者直接返回输出的内容给服务器。然后服务器把输出之间返回给浏览器。\n\n{% asset_img cgi.png CGI %}\n\n```c\n/*\n * parse_uri - parse URI into filename and CGI args\n *             return 0 if dynamic content, 1 if static\n */\n/* $begin parse_uri */\nint parse_uri(char *uri, char *filename, char *cgiargs) \n{\n    char *ptr;\n\n    if (!strstr(uri, \"cgi-bin\")) {  /* Static content */ \n      strcpy(cgiargs, \"\");                             \n      strcpy(filename, \".\");                           \n      strcat(filename, uri);                           \n      if (uri[strlen(uri)-1] == '/')                   \n          strcat(filename, \"home.html\");               \n      return 1;\n    }\n    else {  /* Dynamic content */                        \n      ptr = index(uri, '?');                           \n      if (ptr) {\n          strcpy(cgiargs, ptr+1);\n          *ptr = '\\0';\n\t}\n\telse {\n\t    strcpy(cgiargs, \"\");                         \n\t\tstrcpy(filename, \".\");                           \n\t\tstrcat(filename, uri);                           \n\t\treturn 0;\n    }\n}\n/* $end parse_uri */\n```\n\n这是《深入理解计算机系统》里一个服务器实现的一段代码，作用呢就是判断URL是直接请求静态资源还是动态内容。全部内容可以在原书里找到。\n\nWeb编程语言时代\n\nCGI程序一般返回的都是HTML内容，用当时的 C/C++ ，或者Perl语言直接来处理字符串，想想就会非常的酸爽。所以需要一些库或者之间在语言层面把这部分的工作给处理掉 。\n\n最好是这样，返回结果里永远不会变化的那部分的就放在一个固定的地方，然后动态的内容来填充这部分内容。\n\n基于这个想法，伟大的PHP诞生了。\n\nPHP（ Hypertext Preprocessor / 超文本预处理器 ）最早由 Rasmus Lerdorf 在1995年发明。它自带了对于模板的支持，可以把动态内容写在模板里，直接输出模板。\n\n```php\n<?php\nif (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {\n?>\n<h3>strpos() 肯定没有返回假 (FALSE)</h3>\n<p>正在使用 Internet Explorer</p>\n<?php\n} else {\n?>\n<h3>strpos() 肯定返回假 (FALSE)</h3>\n<center><b>没有使用 Internet Explorer</b></center>\n<?php\n}\n?>\n```\n\nPHP的一个小例子，通过UA来判断当前浏览器是否为IE，因为混合了html模板，可以在代码里直观的看到输出的结果。\n\n随着web的发展，逐渐出现了其他的web脚本语言，比如ASP和JSP脚本语言。这个时期的数据可以说是耦合在视图里的，开发者会直接在脚本里编写sql语句来查询数据，吐给服务器。\n\n这个时期 java 语言的jsp规范里提出了一个JSP Model 2 模型，并且将其定义为一种架构模式。这个东西最大的意义是把MVC 这种GUI编程架构带到了Web。\n\n{% asset_img mvc.gif MVC %}\n\n这个时期 JAVA web的各种基础应用的发展使得java提出了j2ee的web架构，而微软则提出了.net 开发平台。\n\nMVC开发框架时代\n\n2004年，DHH（David Heinemeier Hansson）在开发Basecamp的时候发现无论是php还是java来开发web应用都不怎么满意，然后在好友的建议下使用了ruby 并且一见钟情，于是在产品开发完毕后抽出了其中的框架，并且命名为Ruby on Rails。\n\n\n{% asset_img MVC.PNG MVC %}\n\n结合这张图片我们看一下rails的具体运作流程，\n\n首先用户发送一个请求：\n\nhttp://localhost:3000/articles/index\n\n这个请求被router拦截：\n\n```ruby\nRails::Application.routes.draw do\n  get \"articles/index\" => \"articles#index\"\n  # ...\nend\n```\n\n并且分发给welcom controller的say action\n\n```ruby\n\nclass ArticlesController < ApplicationController\n  def index\n    @articles = Article.all\n  end\n \n  def show\n    ...\n  end\n \n  def new\n    ...\n  end\n```\n\ncontroller把数据丢给view\n\n```ruby\n<h1>Listing articles</h1>\n \n<table>\n  <tr>\n    <th>Title</th>\n    <th>Text</th>\n  </tr>\n \n  <% @articles.each do |article| %>\n    <tr>\n      <td><%= article.title %></td>\n      <td><%= article.text %></td>\n    </tr>\n  <% end %>\n</table>\n```\n\n最后输出HTML返回给用户。\n\nSAP（Single Page Application / 单页应用）\n\n2005年出现的AJAX这个概念使得 JavaScript 催生了现代意义上的前端。AJAX即“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。使得页面可以进行局部刷新，而不是每次都重新请求新的页面，Google的一系列产品比如Gmail，google map的成功使得 AJAX 的应用变得越来越广泛。\n\n于是出现了SAP这个概念，SAP的出现没有改变后端web框架的模式，但是却将View也就是视图层的复杂度全部挪到了前端。于是，直接使用脚本方式的js越来越无法满足web开发的需要，催生出了前端的MVC框架。\n\n前端MVC与传统MVC的区别\n\n首先是前端的Controller的定义很模糊，因为很多控件的存在，它往往即是View又是Controller。这直接到了MVC的单一职责原则。\n\n其次，在后端的MVC框架里，每个请求作为一个Action，然而SAP应用里，Action的来源则有可能会有很多，既有可能是来自于用户的输入，也有可能来自于URL的改变，甚至是web程序本身。\n\n还有就是Model，前端MVC的Model不光要保存应用相关的状态（即从Server端拿到的数据），同时还要维护UI状态，比如Dropdown，Modal等组件的显示或者是隐藏。\n\n因此和后端MVC框架相比，前端框架的架构更像这个样子：\n\n{% asset_img FE-MVC.jpg FE-MVC %}\n\n区别在于Model和View是可以直接通讯的，但是View和Model直接通讯会带来诸多维护上的问题，最大的问题数据和界面同步的问题，\n\n解决这个问题的关键在于阻止View和Model进行直接通讯，于是我们可以将上图中一部分可以和View进行通讯的Model拿出来作为View-model，同时把Controller里面用于同步View和Model关系的部分也放到View-model里，然后他们之间的关系就变成这样。\n\n{% asset_img MVVM.png MVVM %}\n\nVue作为一个视图框架实现了的视图和数据的双向绑定功能\n\n```jsx\n<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n```\n\n```jsx\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n```\n\n{% asset_img 2-way.png 2-way %}\n\n传统的MV*框架存在着数据流不清晰的问题，因为View和Model直接的通信往往都是双向的。\n\n{% asset_img MV.PNG 2way %}\n\n因此为了让数据流更加清楚，Facebook提出了单向数据流的Flux框架。\n\n{% asset_img FLUX.png Flux %}\n\n用户发出一个Action Dispatcher收到Action 分发给Store，Store根据Action的类型来改变数据，然后通知View，View收到通知更新界面。\n\n如果需要从View来更新数据的话就添加一个Action，这样即使在应用很复杂的情况下，数据的流向也会变得很清楚了。\n\n{% asset_img 1-way.jpg 1-WAY %}\n\n总结一下，事实上纵观web发展史，框架直接的架构本质上来看在传统web开发框架Rails出现之后久没发生太大变化了，后面的几乎都是这种模式的变体，web还在发展，也肯定会有旧的框架死掉，新的框架出来，抓住其中的核心才是最关键的。\n\n\n\n最后本文内容参考了众多资料：\n\n这里只列出最主要的几篇，感谢他们用心写下的文章。\n\nhttps://www.zhihu.com/question/22689579/answer/87879505\n\nhttp://draveness.me/mvx.html\n\nhttp://www.cnblogs.com/winter-cn/p/4285171.html\n\n> 本文作者: [Xiaoxiong](https://github.com/posebear1990)","slug":"modern-front-end-develop","published":1,"updated":"2017-08-06T14:10:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctsep0004m079quqfv974","content":"<p>之前在网上看到过一位设计师这样说：现在绝大多数的网站做的其实只是把数据库里的内容展示到网页上，除此之外并没有做其他任何事情，所有的网站都是没有温度的。</p>\n<p>他当然是在只是在批评当前网站的单一与乏味，但是我们仔细想想前半句话却觉得似乎很有道理，似乎整个web开发史就只是在反反复复的解决这一件事。</p>\n<p>如何把数据展示到页面上，如何更快的把数据展示到页面上，如何更好的把数据展示到页面上，如何方便用户和展示到页面上的数据进行交互。web的发展史在重复的解决着这些问题，因此他们之间关系发展的历史也是web开发的发展史。</p>\n<p>web的诞生时期</p>\n<p>关于web的诞生网上的资料大致是这个样子：</p>\n<blockquote>\n<ul>\n<li>1989年3月: Tim Berners-Lee<strong>撰写</strong>了 “Information Management: A Proposal” 并在欧洲核子研究中心广泛征求意见。1990年10月，Tim Berners-Lee 开始进行使用NeXTStep开发环境开发超文本GUI浏览器及编辑器。他为这个项目命名为“万维网” 。</li>\n<li>1991年8月: 互联网上出现了通过FTP传送的万维网软件。</li>\n<li>1992年5月: Pei Wei的 “Viola” GUI 浏览器X测试版本诞生。</li>\n<li>1993年2月: 国家超级计算应用中心（National Center for Supercomputing Applications ）发布了编写的“<strong>Mosaic</strong> for X” 的第一份alpha版本。</li>\n<li>1993年4月: 欧洲核子研究中心宣布万维网技术将可以被人们免费使用，欧洲核子研究中心将不收取和此项技术相关的费用。</li>\n<li>1994年5月: 第一节国际万维网大会在日内瓦的欧洲核子研究中心召开。</li>\n<li>1994年10月: 万维网联盟（World Wide Web Consortium ，即W3C）成立。</li>\n</ul>\n</blockquote>\n<p>确切的时间并不重要，有人认为是1989年3月因为那个时候概念第一次被提出来，但是也有人认为是91年，因为那个时候这个概念才算第一次落地。</p>\n<p>但是正真意义上的web开发的诞生就是浏览器诞生之后了。那个时候我们的web开发，其实就是内容开发，它与今天我们做PPT，写word文档没有什么本质不同。为什么说在当时web开发等同于内容开发呢？看看HTML的全称就知道了，Hypertext Markup Language ，超文本标记语言。</p>\n<img src=\"/2017/07/31/modern-front-end-develop/snipaste_20170730_122053.png\" alt=\"snipaste_20170730_122053\" title=\"snipaste_20170730_122053\">\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>The World Wide Web project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nextid</span> <span class=\"attr\">n</span>=<span class=\"string\">\"55\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>World Wide Web<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    The WorldWideWeb (W3) is a wide-area</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"WhatIs.html\"</span>&gt;</span></div><div class=\"line\">    hypermedia</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> information retrieval initiative aiming to give universal access to a large universe of documents.</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Everything there is online about W3 is linked directly or indirectly to this document, including an</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Summary.html\"</span>&gt;</span>executive summary<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> of the project,</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"29\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Administration/Mailing/Overview.html\"</span>&gt;</span>Mailing lists<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> ,</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Policy.html\"</span>&gt;</span>Policy<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> , November's</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"34\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"News/9211.html\"</span>&gt;</span>W3  news<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> ,</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"41\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"FAQ/List.html\"</span>&gt;</span>Frequently Asked Questions<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> .</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"44\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../DataSources/Top.html\"</span>&gt;</span>What's out there?<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span> Pointers to the world's online information,<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"45\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../DataSources/bySubject/Overview.html\"</span>&gt;</span> subjects<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    , </div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"z54\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../DataSources/WWW/Servers.html\"</span>&gt;</span>W3 servers<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>, etc.</div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"46\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Help.html\"</span>&gt;</span>Help<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span> on the browser you are using</div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Status.html\"</span>&gt;</span>Software Products<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span> A list of W3 project</div><div class=\"line\">    \t\t...</div></pre></td></tr></table></figure>\n<p>我们看代码其实就是普通的HTML，所以那个时候的数据和视图的关系甚至说不上耦合，因为数据本身就是视图。</p>\n<p>CGI时代</p>\n<p>web诞生之初所有的页面几乎都是人肉编写，服务器接收到对特定文件的请求，然后找到对应文件，丢给客户端。出于对动态内容的需要，人们定义了 CGI 。</p>\n<p>CGI （ Common Gateway Interface / 通用网关接口 ）它定义了web服务器与应用程序之间通讯的接口。有了CGI，web从之间返回给浏览器静态内容变成了，拿到URL解析出其中的参数，判断是否请求的是静态资源然后如果是动态资源，那么把解析出的参数丢给CGI程序，CGI调用外部数据库或者直接返回输出的内容给服务器。然后服务器把输出之间返回给浏览器。</p>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * parse_uri - parse URI into filename and CGI args</span></div><div class=\"line\"><span class=\"comment\"> *             return 0 if dynamic content, 1 if static</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"comment\">/* $begin parse_uri */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">parse_uri</span><span class=\"params\">(<span class=\"keyword\">char</span> *uri, <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">char</span> *cgiargs)</span> </span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *ptr;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">strstr</span>(uri, <span class=\"string\">\"cgi-bin\"</span>)) &#123;  <span class=\"comment\">/* Static content */</span> </div><div class=\"line\">      <span class=\"built_in\">strcpy</span>(cgiargs, <span class=\"string\">\"\"</span>);                             </div><div class=\"line\">      <span class=\"built_in\">strcpy</span>(filename, <span class=\"string\">\".\"</span>);                           </div><div class=\"line\">      <span class=\"built_in\">strcat</span>(filename, uri);                           </div><div class=\"line\">      <span class=\"keyword\">if</span> (uri[<span class=\"built_in\">strlen</span>(uri)<span class=\"number\">-1</span>] == <span class=\"string\">'/'</span>)                   </div><div class=\"line\">          <span class=\"built_in\">strcat</span>(filename, <span class=\"string\">\"home.html\"</span>);               </div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">/* Dynamic content */</span>                        </div><div class=\"line\">      ptr = index(uri, <span class=\"string\">'?'</span>);                           </div><div class=\"line\">      <span class=\"keyword\">if</span> (ptr) &#123;</div><div class=\"line\">          <span class=\"built_in\">strcpy</span>(cgiargs, ptr+<span class=\"number\">1</span>);</div><div class=\"line\">          *ptr = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t    <span class=\"built_in\">strcpy</span>(cgiargs, <span class=\"string\">\"\"</span>);                         </div><div class=\"line\">\t\t<span class=\"built_in\">strcpy</span>(filename, <span class=\"string\">\".\"</span>);                           </div><div class=\"line\">\t\t<span class=\"built_in\">strcat</span>(filename, uri);                           </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* $end parse_uri */</span></div></pre></td></tr></table></figure>\n<p>这是《深入理解计算机系统》里一个服务器实现的一段代码，作用呢就是判断URL是直接请求静态资源还是动态内容。全部内容可以在原书里找到。</p>\n<p>Web编程语言时代</p>\n<p>CGI程序一般返回的都是HTML内容，用当时的 C/C++ ，或者Perl语言直接来处理字符串，想想就会非常的酸爽。所以需要一些库或者之间在语言层面把这部分的工作给处理掉 。</p>\n<p>最好是这样，返回结果里永远不会变化的那部分的就放在一个固定的地方，然后动态的内容来填充这部分内容。</p>\n<p>基于这个想法，伟大的PHP诞生了。</p>\n<p>PHP（ Hypertext Preprocessor / 超文本预处理器 ）最早由 Rasmus Lerdorf 在1995年发明。它自带了对于模板的支持，可以把动态内容写在模板里，直接输出模板。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span> (strpos($_SERVER[<span class=\"string\">'HTTP_USER_AGENT'</span>], <span class=\"string\">'MSIE'</span>) !== <span class=\"keyword\">FALSE</span>) &#123;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">&lt;h3&gt;strpos() 肯定没有返回假 (<span class=\"keyword\">FALSE</span>)&lt;/h3&gt;</div><div class=\"line\">&lt;p&gt;正在使用 Internet Explorer&lt;/p&gt;</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">&lt;h3&gt;strpos() 肯定返回假 (<span class=\"keyword\">FALSE</span>)&lt;/h3&gt;</div><div class=\"line\">&lt;center&gt;&lt;b&gt;没有使用 Internet Explorer&lt;/b&gt;&lt;/center&gt;</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>PHP的一个小例子，通过UA来判断当前浏览器是否为IE，因为混合了html模板，可以在代码里直观的看到输出的结果。</p>\n<p>随着web的发展，逐渐出现了其他的web脚本语言，比如ASP和JSP脚本语言。这个时期的数据可以说是耦合在视图里的，开发者会直接在脚本里编写sql语句来查询数据，吐给服务器。</p>\n<p>这个时期 java 语言的jsp规范里提出了一个JSP Model 2 模型，并且将其定义为一种架构模式。这个东西最大的意义是把MVC 这种GUI编程架构带到了Web。</p>\n\n<p>这个时期 JAVA web的各种基础应用的发展使得java提出了j2ee的web架构，而微软则提出了.net 开发平台。</p>\n<p>MVC开发框架时代</p>\n<p>2004年，DHH（David Heinemeier Hansson）在开发Basecamp的时候发现无论是php还是java来开发web应用都不怎么满意，然后在好友的建议下使用了ruby 并且一见钟情，于是在产品开发完毕后抽出了其中的框架，并且命名为Ruby on Rails。</p>\n\n<p>结合这张图片我们看一下rails的具体运作流程，</p>\n<p>首先用户发送一个请求：</p>\n<p><a href=\"http://localhost:3000/articles/index\" target=\"_blank\" rel=\"external\">http://localhost:3000/articles/index</a></p>\n<p>这个请求被router拦截：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rails::Application.routes.draw <span class=\"keyword\">do</span></div><div class=\"line\">  get <span class=\"string\">\"articles/index\"</span> =&gt; <span class=\"string\">\"articles#index\"</span></div><div class=\"line\">  <span class=\"comment\"># ...</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>并且分发给welcom controller的say action</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticlesController</span> &lt; ApplicationController</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span></span></div><div class=\"line\">    @articles = Article.all</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>controller把数据丢给view</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;Listing articles&lt;<span class=\"regexp\">/h1&gt;</span></div><div class=\"line\"><span class=\"regexp\"> </span></div><div class=\"line\"><span class=\"regexp\">&lt;table&gt;</span></div><div class=\"line\"><span class=\"regexp\">  &lt;tr&gt;</span></div><div class=\"line\"><span class=\"regexp\">    &lt;th&gt;Title&lt;/th</span>&gt;</div><div class=\"line\">    &lt;th&gt;Text&lt;<span class=\"regexp\">/th&gt;</span></div><div class=\"line\"><span class=\"regexp\">  &lt;/tr</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">  &lt;% @articles.each <span class=\"keyword\">do</span> <span class=\"params\">|article|</span> %&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">      &lt;td&gt;&lt;%= article.title %&gt;&lt;<span class=\"regexp\">/td&gt;</span></div><div class=\"line\"><span class=\"regexp\">      &lt;td&gt;&lt;%= article.text %&gt;&lt;/td</span>&gt;</div><div class=\"line\">    &lt;<span class=\"regexp\">/tr&gt;</span></div><div class=\"line\"><span class=\"regexp\">  &lt;% end %&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/table</span>&gt;</div></pre></td></tr></table></figure>\n<p>最后输出HTML返回给用户。</p>\n<p>SAP（Single Page Application / 单页应用）</p>\n<p>2005年出现的AJAX这个概念使得 JavaScript 催生了现代意义上的前端。AJAX即“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。使得页面可以进行局部刷新，而不是每次都重新请求新的页面，Google的一系列产品比如Gmail，google map的成功使得 AJAX 的应用变得越来越广泛。</p>\n<p>于是出现了SAP这个概念，SAP的出现没有改变后端web框架的模式，但是却将View也就是视图层的复杂度全部挪到了前端。于是，直接使用脚本方式的js越来越无法满足web开发的需要，催生出了前端的MVC框架。</p>\n<p>前端MVC与传统MVC的区别</p>\n<p>首先是前端的Controller的定义很模糊，因为很多控件的存在，它往往即是View又是Controller。这直接到了MVC的单一职责原则。</p>\n<p>其次，在后端的MVC框架里，每个请求作为一个Action，然而SAP应用里，Action的来源则有可能会有很多，既有可能是来自于用户的输入，也有可能来自于URL的改变，甚至是web程序本身。</p>\n<p>还有就是Model，前端MVC的Model不光要保存应用相关的状态（即从Server端拿到的数据），同时还要维护UI状态，比如Dropdown，Modal等组件的显示或者是隐藏。</p>\n<p>因此和后端MVC框架相比，前端框架的架构更像这个样子：</p>\n<img src=\"/2017/07/31/modern-front-end-develop/FE-MVC.jpg\" alt=\"FE-MVC\" title=\"FE-MVC\">\n<p>区别在于Model和View是可以直接通讯的，但是View和Model直接通讯会带来诸多维护上的问题，最大的问题数据和界面同步的问题，</p>\n<p>解决这个问题的关键在于阻止View和Model进行直接通讯，于是我们可以将上图中一部分可以和View进行通讯的Model拿出来作为View-model，同时把Controller里面用于同步View和Model关系的部分也放到View-model里，然后他们之间的关系就变成这样。</p>\n<img src=\"/2017/07/31/modern-front-end-develop/MVVM.png\" alt=\"MVVM\" title=\"MVVM\">\n<p>Vue作为一个视图框架实现了的视图和数据的双向绑定功能</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=<span class=\"string\">\"app-6\"</span>&gt;</div><div class=\"line\">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></div><div class=\"line\"><span class=\"regexp\">  &lt;input v-model=\"message\"&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app6 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#app-6'</span>,</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    message: <span class=\"string\">'Hello Vue!'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<img src=\"/2017/07/31/modern-front-end-develop/2-way.png\" alt=\"2-way\" title=\"2-way\">\n<p>传统的MV*框架存在着数据流不清晰的问题，因为View和Model直接的通信往往都是双向的。</p>\n\n<p>因此为了让数据流更加清楚，Facebook提出了单向数据流的Flux框架。</p>\n<img src=\"/2017/07/31/modern-front-end-develop/FLUX.png\" alt=\"Flux\" title=\"Flux\">\n<p>用户发出一个Action Dispatcher收到Action 分发给Store，Store根据Action的类型来改变数据，然后通知View，View收到通知更新界面。</p>\n<p>如果需要从View来更新数据的话就添加一个Action，这样即使在应用很复杂的情况下，数据的流向也会变得很清楚了。</p>\n<img src=\"/2017/07/31/modern-front-end-develop/1-way.jpg\" alt=\"1-WAY\" title=\"1-WAY\">\n<p>总结一下，事实上纵观web发展史，框架直接的架构本质上来看在传统web开发框架Rails出现之后久没发生太大变化了，后面的几乎都是这种模式的变体，web还在发展，也肯定会有旧的框架死掉，新的框架出来，抓住其中的核心才是最关键的。</p>\n<p>最后本文内容参考了众多资料：</p>\n<p>这里只列出最主要的几篇，感谢他们用心写下的文章。</p>\n<p><a href=\"https://www.zhihu.com/question/22689579/answer/87879505\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/22689579/answer/87879505</a></p>\n<p><a href=\"http://draveness.me/mvx.html\" target=\"_blank\" rel=\"external\">http://draveness.me/mvx.html</a></p>\n<p><a href=\"http://www.cnblogs.com/winter-cn/p/4285171.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/winter-cn/p/4285171.html</a></p>\n<blockquote>\n<p>本文作者: <a href=\"https://github.com/posebear1990\" target=\"_blank\" rel=\"external\">Xiaoxiong</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>之前在网上看到过一位设计师这样说：现在绝大多数的网站做的其实只是把数据库里的内容展示到网页上，除此之外并没有做其他任何事情，所有的网站都是没有温度的。</p>\n<p>他当然是在只是在批评当前网站的单一与乏味，但是我们仔细想想前半句话却觉得似乎很有道理，似乎整个web开发史就只是在反反复复的解决这一件事。</p>\n<p>如何把数据展示到页面上，如何更快的把数据展示到页面上，如何更好的把数据展示到页面上，如何方便用户和展示到页面上的数据进行交互。web的发展史在重复的解决着这些问题，因此他们之间关系发展的历史也是web开发的发展史。</p>\n<p>web的诞生时期</p>\n<p>关于web的诞生网上的资料大致是这个样子：</p>\n<blockquote>\n<ul>\n<li>1989年3月: Tim Berners-Lee<strong>撰写</strong>了 “Information Management: A Proposal” 并在欧洲核子研究中心广泛征求意见。1990年10月，Tim Berners-Lee 开始进行使用NeXTStep开发环境开发超文本GUI浏览器及编辑器。他为这个项目命名为“万维网” 。</li>\n<li>1991年8月: 互联网上出现了通过FTP传送的万维网软件。</li>\n<li>1992年5月: Pei Wei的 “Viola” GUI 浏览器X测试版本诞生。</li>\n<li>1993年2月: 国家超级计算应用中心（National Center for Supercomputing Applications ）发布了编写的“<strong>Mosaic</strong> for X” 的第一份alpha版本。</li>\n<li>1993年4月: 欧洲核子研究中心宣布万维网技术将可以被人们免费使用，欧洲核子研究中心将不收取和此项技术相关的费用。</li>\n<li>1994年5月: 第一节国际万维网大会在日内瓦的欧洲核子研究中心召开。</li>\n<li>1994年10月: 万维网联盟（World Wide Web Consortium ，即W3C）成立。</li>\n</ul>\n</blockquote>\n<p>确切的时间并不重要，有人认为是1989年3月因为那个时候概念第一次被提出来，但是也有人认为是91年，因为那个时候这个概念才算第一次落地。</p>\n<p>但是正真意义上的web开发的诞生就是浏览器诞生之后了。那个时候我们的web开发，其实就是内容开发，它与今天我们做PPT，写word文档没有什么本质不同。为什么说在当时web开发等同于内容开发呢？看看HTML的全称就知道了，Hypertext Markup Language ，超文本标记语言。</p>\n<img src=\"/2017/07/31/modern-front-end-develop/snipaste_20170730_122053.png\" alt=\"snipaste_20170730_122053\" title=\"snipaste_20170730_122053\">\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>The World Wide Web project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nextid</span> <span class=\"attr\">n</span>=<span class=\"string\">\"55\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>World Wide Web<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    The WorldWideWeb (W3) is a wide-area</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"WhatIs.html\"</span>&gt;</span></div><div class=\"line\">    hypermedia</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> information retrieval initiative aiming to give universal access to a large universe of documents.</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Everything there is online about W3 is linked directly or indirectly to this document, including an</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Summary.html\"</span>&gt;</span>executive summary<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> of the project,</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"29\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Administration/Mailing/Overview.html\"</span>&gt;</span>Mailing lists<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> ,</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Policy.html\"</span>&gt;</span>Policy<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> , November's</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"34\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"News/9211.html\"</span>&gt;</span>W3  news<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> ,</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"41\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"FAQ/List.html\"</span>&gt;</span>Frequently Asked Questions<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> .</div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"44\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../DataSources/Top.html\"</span>&gt;</span>What's out there?<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span> Pointers to the world's online information,<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"45\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../DataSources/bySubject/Overview.html\"</span>&gt;</span> subjects<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    , </div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"z54\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../DataSources/WWW/Servers.html\"</span>&gt;</span>W3 servers<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>, etc.</div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"46\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Help.html\"</span>&gt;</span>Help<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span> on the browser you are using</div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"13\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Status.html\"</span>&gt;</span>Software Products<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span> A list of W3 project</div><div class=\"line\">    \t\t...</div></pre></td></tr></table></figure>\n<p>我们看代码其实就是普通的HTML，所以那个时候的数据和视图的关系甚至说不上耦合，因为数据本身就是视图。</p>\n<p>CGI时代</p>\n<p>web诞生之初所有的页面几乎都是人肉编写，服务器接收到对特定文件的请求，然后找到对应文件，丢给客户端。出于对动态内容的需要，人们定义了 CGI 。</p>\n<p>CGI （ Common Gateway Interface / 通用网关接口 ）它定义了web服务器与应用程序之间通讯的接口。有了CGI，web从之间返回给浏览器静态内容变成了，拿到URL解析出其中的参数，判断是否请求的是静态资源然后如果是动态资源，那么把解析出的参数丢给CGI程序，CGI调用外部数据库或者直接返回输出的内容给服务器。然后服务器把输出之间返回给浏览器。</p>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * parse_uri - parse URI into filename and CGI args</span></div><div class=\"line\"><span class=\"comment\"> *             return 0 if dynamic content, 1 if static</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"comment\">/* $begin parse_uri */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">parse_uri</span><span class=\"params\">(<span class=\"keyword\">char</span> *uri, <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">char</span> *cgiargs)</span> </span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *ptr;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">strstr</span>(uri, <span class=\"string\">\"cgi-bin\"</span>)) &#123;  <span class=\"comment\">/* Static content */</span> </div><div class=\"line\">      <span class=\"built_in\">strcpy</span>(cgiargs, <span class=\"string\">\"\"</span>);                             </div><div class=\"line\">      <span class=\"built_in\">strcpy</span>(filename, <span class=\"string\">\".\"</span>);                           </div><div class=\"line\">      <span class=\"built_in\">strcat</span>(filename, uri);                           </div><div class=\"line\">      <span class=\"keyword\">if</span> (uri[<span class=\"built_in\">strlen</span>(uri)<span class=\"number\">-1</span>] == <span class=\"string\">'/'</span>)                   </div><div class=\"line\">          <span class=\"built_in\">strcat</span>(filename, <span class=\"string\">\"home.html\"</span>);               </div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">/* Dynamic content */</span>                        </div><div class=\"line\">      ptr = index(uri, <span class=\"string\">'?'</span>);                           </div><div class=\"line\">      <span class=\"keyword\">if</span> (ptr) &#123;</div><div class=\"line\">          <span class=\"built_in\">strcpy</span>(cgiargs, ptr+<span class=\"number\">1</span>);</div><div class=\"line\">          *ptr = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t    <span class=\"built_in\">strcpy</span>(cgiargs, <span class=\"string\">\"\"</span>);                         </div><div class=\"line\">\t\t<span class=\"built_in\">strcpy</span>(filename, <span class=\"string\">\".\"</span>);                           </div><div class=\"line\">\t\t<span class=\"built_in\">strcat</span>(filename, uri);                           </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* $end parse_uri */</span></div></pre></td></tr></table></figure>\n<p>这是《深入理解计算机系统》里一个服务器实现的一段代码，作用呢就是判断URL是直接请求静态资源还是动态内容。全部内容可以在原书里找到。</p>\n<p>Web编程语言时代</p>\n<p>CGI程序一般返回的都是HTML内容，用当时的 C/C++ ，或者Perl语言直接来处理字符串，想想就会非常的酸爽。所以需要一些库或者之间在语言层面把这部分的工作给处理掉 。</p>\n<p>最好是这样，返回结果里永远不会变化的那部分的就放在一个固定的地方，然后动态的内容来填充这部分内容。</p>\n<p>基于这个想法，伟大的PHP诞生了。</p>\n<p>PHP（ Hypertext Preprocessor / 超文本预处理器 ）最早由 Rasmus Lerdorf 在1995年发明。它自带了对于模板的支持，可以把动态内容写在模板里，直接输出模板。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span> (strpos($_SERVER[<span class=\"string\">'HTTP_USER_AGENT'</span>], <span class=\"string\">'MSIE'</span>) !== <span class=\"keyword\">FALSE</span>) &#123;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">&lt;h3&gt;strpos() 肯定没有返回假 (<span class=\"keyword\">FALSE</span>)&lt;/h3&gt;</div><div class=\"line\">&lt;p&gt;正在使用 Internet Explorer&lt;/p&gt;</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">&lt;h3&gt;strpos() 肯定返回假 (<span class=\"keyword\">FALSE</span>)&lt;/h3&gt;</div><div class=\"line\">&lt;center&gt;&lt;b&gt;没有使用 Internet Explorer&lt;/b&gt;&lt;/center&gt;</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>PHP的一个小例子，通过UA来判断当前浏览器是否为IE，因为混合了html模板，可以在代码里直观的看到输出的结果。</p>\n<p>随着web的发展，逐渐出现了其他的web脚本语言，比如ASP和JSP脚本语言。这个时期的数据可以说是耦合在视图里的，开发者会直接在脚本里编写sql语句来查询数据，吐给服务器。</p>\n<p>这个时期 java 语言的jsp规范里提出了一个JSP Model 2 模型，并且将其定义为一种架构模式。这个东西最大的意义是把MVC 这种GUI编程架构带到了Web。</p>\n\n<p>这个时期 JAVA web的各种基础应用的发展使得java提出了j2ee的web架构，而微软则提出了.net 开发平台。</p>\n<p>MVC开发框架时代</p>\n<p>2004年，DHH（David Heinemeier Hansson）在开发Basecamp的时候发现无论是php还是java来开发web应用都不怎么满意，然后在好友的建议下使用了ruby 并且一见钟情，于是在产品开发完毕后抽出了其中的框架，并且命名为Ruby on Rails。</p>\n\n<p>结合这张图片我们看一下rails的具体运作流程，</p>\n<p>首先用户发送一个请求：</p>\n<p><a href=\"http://localhost:3000/articles/index\" target=\"_blank\" rel=\"external\">http://localhost:3000/articles/index</a></p>\n<p>这个请求被router拦截：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rails::Application.routes.draw <span class=\"keyword\">do</span></div><div class=\"line\">  get <span class=\"string\">\"articles/index\"</span> =&gt; <span class=\"string\">\"articles#index\"</span></div><div class=\"line\">  <span class=\"comment\"># ...</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>并且分发给welcom controller的say action</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticlesController</span> &lt; ApplicationController</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span></span></div><div class=\"line\">    @articles = Article.all</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>controller把数据丢给view</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;Listing articles&lt;<span class=\"regexp\">/h1&gt;</span></div><div class=\"line\"><span class=\"regexp\"> </span></div><div class=\"line\"><span class=\"regexp\">&lt;table&gt;</span></div><div class=\"line\"><span class=\"regexp\">  &lt;tr&gt;</span></div><div class=\"line\"><span class=\"regexp\">    &lt;th&gt;Title&lt;/th</span>&gt;</div><div class=\"line\">    &lt;th&gt;Text&lt;<span class=\"regexp\">/th&gt;</span></div><div class=\"line\"><span class=\"regexp\">  &lt;/tr</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">  &lt;% @articles.each <span class=\"keyword\">do</span> <span class=\"params\">|article|</span> %&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">      &lt;td&gt;&lt;%= article.title %&gt;&lt;<span class=\"regexp\">/td&gt;</span></div><div class=\"line\"><span class=\"regexp\">      &lt;td&gt;&lt;%= article.text %&gt;&lt;/td</span>&gt;</div><div class=\"line\">    &lt;<span class=\"regexp\">/tr&gt;</span></div><div class=\"line\"><span class=\"regexp\">  &lt;% end %&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/table</span>&gt;</div></pre></td></tr></table></figure>\n<p>最后输出HTML返回给用户。</p>\n<p>SAP（Single Page Application / 单页应用）</p>\n<p>2005年出现的AJAX这个概念使得 JavaScript 催生了现代意义上的前端。AJAX即“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术）。使得页面可以进行局部刷新，而不是每次都重新请求新的页面，Google的一系列产品比如Gmail，google map的成功使得 AJAX 的应用变得越来越广泛。</p>\n<p>于是出现了SAP这个概念，SAP的出现没有改变后端web框架的模式，但是却将View也就是视图层的复杂度全部挪到了前端。于是，直接使用脚本方式的js越来越无法满足web开发的需要，催生出了前端的MVC框架。</p>\n<p>前端MVC与传统MVC的区别</p>\n<p>首先是前端的Controller的定义很模糊，因为很多控件的存在，它往往即是View又是Controller。这直接到了MVC的单一职责原则。</p>\n<p>其次，在后端的MVC框架里，每个请求作为一个Action，然而SAP应用里，Action的来源则有可能会有很多，既有可能是来自于用户的输入，也有可能来自于URL的改变，甚至是web程序本身。</p>\n<p>还有就是Model，前端MVC的Model不光要保存应用相关的状态（即从Server端拿到的数据），同时还要维护UI状态，比如Dropdown，Modal等组件的显示或者是隐藏。</p>\n<p>因此和后端MVC框架相比，前端框架的架构更像这个样子：</p>\n<img src=\"/2017/07/31/modern-front-end-develop/FE-MVC.jpg\" alt=\"FE-MVC\" title=\"FE-MVC\">\n<p>区别在于Model和View是可以直接通讯的，但是View和Model直接通讯会带来诸多维护上的问题，最大的问题数据和界面同步的问题，</p>\n<p>解决这个问题的关键在于阻止View和Model进行直接通讯，于是我们可以将上图中一部分可以和View进行通讯的Model拿出来作为View-model，同时把Controller里面用于同步View和Model关系的部分也放到View-model里，然后他们之间的关系就变成这样。</p>\n<img src=\"/2017/07/31/modern-front-end-develop/MVVM.png\" alt=\"MVVM\" title=\"MVVM\">\n<p>Vue作为一个视图框架实现了的视图和数据的双向绑定功能</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=<span class=\"string\">\"app-6\"</span>&gt;</div><div class=\"line\">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></div><div class=\"line\"><span class=\"regexp\">  &lt;input v-model=\"message\"&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app6 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#app-6'</span>,</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    message: <span class=\"string\">'Hello Vue!'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<img src=\"/2017/07/31/modern-front-end-develop/2-way.png\" alt=\"2-way\" title=\"2-way\">\n<p>传统的MV*框架存在着数据流不清晰的问题，因为View和Model直接的通信往往都是双向的。</p>\n\n<p>因此为了让数据流更加清楚，Facebook提出了单向数据流的Flux框架。</p>\n<img src=\"/2017/07/31/modern-front-end-develop/FLUX.png\" alt=\"Flux\" title=\"Flux\">\n<p>用户发出一个Action Dispatcher收到Action 分发给Store，Store根据Action的类型来改变数据，然后通知View，View收到通知更新界面。</p>\n<p>如果需要从View来更新数据的话就添加一个Action，这样即使在应用很复杂的情况下，数据的流向也会变得很清楚了。</p>\n<img src=\"/2017/07/31/modern-front-end-develop/1-way.jpg\" alt=\"1-WAY\" title=\"1-WAY\">\n<p>总结一下，事实上纵观web发展史，框架直接的架构本质上来看在传统web开发框架Rails出现之后久没发生太大变化了，后面的几乎都是这种模式的变体，web还在发展，也肯定会有旧的框架死掉，新的框架出来，抓住其中的核心才是最关键的。</p>\n<p>最后本文内容参考了众多资料：</p>\n<p>这里只列出最主要的几篇，感谢他们用心写下的文章。</p>\n<p><a href=\"https://www.zhihu.com/question/22689579/answer/87879505\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/22689579/answer/87879505</a></p>\n<p><a href=\"http://draveness.me/mvx.html\" target=\"_blank\" rel=\"external\">http://draveness.me/mvx.html</a></p>\n<p><a href=\"http://www.cnblogs.com/winter-cn/p/4285171.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/winter-cn/p/4285171.html</a></p>\n<blockquote>\n<p>本文作者: <a href=\"https://github.com/posebear1990\" target=\"_blank\" rel=\"external\">Xiaoxiong</a></p>\n</blockquote>\n"},{"title":"IE 常见问题","date":"2017-07-23T16:00:00.000Z","_content":"\n万恶的 IE，总是存在奇怪特有的问题，本文用于收集整理开发中遇到的与 IE 相关的问题\n<!-- more -->\n\n## 在 IE 11 浏览器上 FontIcon 图标不显示\n\n在 IE11 会下载 .ttf/.woff 字体文件， 通过 Network 我们可以看到字体文件 `response headers` 中有一个 `Pragma：no-cache`,由于 IE 似乎有缓存和字体的问题，所有导致图标不能正常显示。所以删除 WEB 服务(Nginx..)中的 `Pragma：no-cache` 和 `Cache-Control：no-store` 就能正常访问。\n\n参考 [IE and Cache-Control](https://github.com/FortAwesome/Font-Awesome/issues/6454)\n\n## svg 在 IE 中自适应宽度\n\nsvg 在其他浏览器中如 `chrome` 中，会自动随着父级容器的宽度自营式应，无需单独设置宽度和高度。但是在 IE 中则不起作用。\n\n**解决办法**\n\n在 `svg` 节点添加 `style=\"width:100%;height:100%\"` 属性和 `preserveAspectRatio=\"xMidYmin slice\"`，这样就能在 IE 中也实现 SVG 自适应宽度。完整代码如下：\n```\n<svg version=\"1.1\" id=\"图层_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\"\n\t viewBox=\"-125 202 359.9 389\" style=\"width: 100%;height: 100%;overflow:auto\" xml:space=\"preserve\"  preserveAspectRatio=\"xMidYMin slice\">\n```\n\n## IE 中如何更新 svg text 节点的内容\nJavaScript 可以像操作 DOM 节点那样来操作 svg style 属性和内容。比如可以通过 `document.querySelector('#selectorName').style.display='none'` 来设置显示或隐藏某个节点。\n此外还可以通过 `document.querySelector('#selectorName').innerText='newText'` 可以设置 `text` 节点的内容。\n\n但是在 IE，`element.innerText` 和 `element.innerHTML` 都不起作用。\n\n**解决办法**\n\n使用 `element.textContent` 代替 `element.innerText`。这样就可以在 IE 通过 JavaScript 来操作 `text` 节点的内容。\n\n>关于 `element.textContent` 的介绍及、与`innerText` 和 `innerHTML` 的区别，可以参考：[Node.textContent](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n","source":"_posts/ie-issue.md","raw":"---\ntitle: IE 常见问题\ndate: 2017-07-24\ntag: \n- IE\n---\n\n万恶的 IE，总是存在奇怪特有的问题，本文用于收集整理开发中遇到的与 IE 相关的问题\n<!-- more -->\n\n## 在 IE 11 浏览器上 FontIcon 图标不显示\n\n在 IE11 会下载 .ttf/.woff 字体文件， 通过 Network 我们可以看到字体文件 `response headers` 中有一个 `Pragma：no-cache`,由于 IE 似乎有缓存和字体的问题，所有导致图标不能正常显示。所以删除 WEB 服务(Nginx..)中的 `Pragma：no-cache` 和 `Cache-Control：no-store` 就能正常访问。\n\n参考 [IE and Cache-Control](https://github.com/FortAwesome/Font-Awesome/issues/6454)\n\n## svg 在 IE 中自适应宽度\n\nsvg 在其他浏览器中如 `chrome` 中，会自动随着父级容器的宽度自营式应，无需单独设置宽度和高度。但是在 IE 中则不起作用。\n\n**解决办法**\n\n在 `svg` 节点添加 `style=\"width:100%;height:100%\"` 属性和 `preserveAspectRatio=\"xMidYmin slice\"`，这样就能在 IE 中也实现 SVG 自适应宽度。完整代码如下：\n```\n<svg version=\"1.1\" id=\"图层_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\"\n\t viewBox=\"-125 202 359.9 389\" style=\"width: 100%;height: 100%;overflow:auto\" xml:space=\"preserve\"  preserveAspectRatio=\"xMidYMin slice\">\n```\n\n## IE 中如何更新 svg text 节点的内容\nJavaScript 可以像操作 DOM 节点那样来操作 svg style 属性和内容。比如可以通过 `document.querySelector('#selectorName').style.display='none'` 来设置显示或隐藏某个节点。\n此外还可以通过 `document.querySelector('#selectorName').innerText='newText'` 可以设置 `text` 节点的内容。\n\n但是在 IE，`element.innerText` 和 `element.innerHTML` 都不起作用。\n\n**解决办法**\n\n使用 `element.textContent` 代替 `element.innerText`。这样就可以在 IE 通过 JavaScript 来操作 `text` 节点的内容。\n\n>关于 `element.textContent` 的介绍及、与`innerText` 和 `innerHTML` 的区别，可以参考：[Node.textContent](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n","slug":"ie-issue","published":1,"updated":"2017-08-07T06:03:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctsex0005m079ykj36fe6","content":"<p>万恶的 IE，总是存在奇怪特有的问题，本文用于收集整理开发中遇到的与 IE 相关的问题<br><a id=\"more\"></a></p>\n<h2 id=\"在-IE-11-浏览器上-FontIcon-图标不显示\"><a href=\"#在-IE-11-浏览器上-FontIcon-图标不显示\" class=\"headerlink\" title=\"在 IE 11 浏览器上 FontIcon 图标不显示\"></a>在 IE 11 浏览器上 FontIcon 图标不显示</h2><p>在 IE11 会下载 .ttf/.woff 字体文件， 通过 Network 我们可以看到字体文件 <code>response headers</code> 中有一个 <code>Pragma：no-cache</code>,由于 IE 似乎有缓存和字体的问题，所有导致图标不能正常显示。所以删除 WEB 服务(Nginx..)中的 <code>Pragma：no-cache</code> 和 <code>Cache-Control：no-store</code> 就能正常访问。</p>\n<p>参考 <a href=\"https://github.com/FortAwesome/Font-Awesome/issues/6454\" target=\"_blank\" rel=\"external\">IE and Cache-Control</a></p>\n<h2 id=\"svg-在-IE-中自适应宽度\"><a href=\"#svg-在-IE-中自适应宽度\" class=\"headerlink\" title=\"svg 在 IE 中自适应宽度\"></a>svg 在 IE 中自适应宽度</h2><p>svg 在其他浏览器中如 <code>chrome</code> 中，会自动随着父级容器的宽度自营式应，无需单独设置宽度和高度。但是在 IE 中则不起作用。</p>\n<p><strong>解决办法</strong></p>\n<p>在 <code>svg</code> 节点添加 <code>style=&quot;width:100%;height:100%&quot;</code> 属性和 <code>preserveAspectRatio=&quot;xMidYmin slice&quot;</code>，这样就能在 IE 中也实现 SVG 自适应宽度。完整代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;svg version=&quot;1.1&quot; id=&quot;图层_1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; x=&quot;0px&quot; y=&quot;0px&quot; width=&quot;100%&quot; height=&quot;100%&quot;</div><div class=\"line\">\t viewBox=&quot;-125 202 359.9 389&quot; style=&quot;width: 100%;height: 100%;overflow:auto&quot; xml:space=&quot;preserve&quot;  preserveAspectRatio=&quot;xMidYMin slice&quot;&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"IE-中如何更新-svg-text-节点的内容\"><a href=\"#IE-中如何更新-svg-text-节点的内容\" class=\"headerlink\" title=\"IE 中如何更新 svg text 节点的内容\"></a>IE 中如何更新 svg text 节点的内容</h2><p>JavaScript 可以像操作 DOM 节点那样来操作 svg style 属性和内容。比如可以通过 <code>document.querySelector(&#39;#selectorName&#39;).style.display=&#39;none&#39;</code> 来设置显示或隐藏某个节点。<br>此外还可以通过 <code>document.querySelector(&#39;#selectorName&#39;).innerText=&#39;newText&#39;</code> 可以设置 <code>text</code> 节点的内容。</p>\n<p>但是在 IE，<code>element.innerText</code> 和 <code>element.innerHTML</code> 都不起作用。</p>\n<p><strong>解决办法</strong></p>\n<p>使用 <code>element.textContent</code> 代替 <code>element.innerText</code>。这样就可以在 IE 通过 JavaScript 来操作 <code>text</code> 节点的内容。</p>\n<blockquote>\n<p>关于 <code>element.textContent</code> 的介绍及、与<code>innerText</code> 和 <code>innerHTML</code> 的区别，可以参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\" target=\"_blank\" rel=\"external\">Node.textContent</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>万恶的 IE，总是存在奇怪特有的问题，本文用于收集整理开发中遇到的与 IE 相关的问题<br>","more":"</p>\n<h2 id=\"在-IE-11-浏览器上-FontIcon-图标不显示\"><a href=\"#在-IE-11-浏览器上-FontIcon-图标不显示\" class=\"headerlink\" title=\"在 IE 11 浏览器上 FontIcon 图标不显示\"></a>在 IE 11 浏览器上 FontIcon 图标不显示</h2><p>在 IE11 会下载 .ttf/.woff 字体文件， 通过 Network 我们可以看到字体文件 <code>response headers</code> 中有一个 <code>Pragma：no-cache</code>,由于 IE 似乎有缓存和字体的问题，所有导致图标不能正常显示。所以删除 WEB 服务(Nginx..)中的 <code>Pragma：no-cache</code> 和 <code>Cache-Control：no-store</code> 就能正常访问。</p>\n<p>参考 <a href=\"https://github.com/FortAwesome/Font-Awesome/issues/6454\" target=\"_blank\" rel=\"external\">IE and Cache-Control</a></p>\n<h2 id=\"svg-在-IE-中自适应宽度\"><a href=\"#svg-在-IE-中自适应宽度\" class=\"headerlink\" title=\"svg 在 IE 中自适应宽度\"></a>svg 在 IE 中自适应宽度</h2><p>svg 在其他浏览器中如 <code>chrome</code> 中，会自动随着父级容器的宽度自营式应，无需单独设置宽度和高度。但是在 IE 中则不起作用。</p>\n<p><strong>解决办法</strong></p>\n<p>在 <code>svg</code> 节点添加 <code>style=&quot;width:100%;height:100%&quot;</code> 属性和 <code>preserveAspectRatio=&quot;xMidYmin slice&quot;</code>，这样就能在 IE 中也实现 SVG 自适应宽度。完整代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;svg version=&quot;1.1&quot; id=&quot;图层_1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; x=&quot;0px&quot; y=&quot;0px&quot; width=&quot;100%&quot; height=&quot;100%&quot;</div><div class=\"line\">\t viewBox=&quot;-125 202 359.9 389&quot; style=&quot;width: 100%;height: 100%;overflow:auto&quot; xml:space=&quot;preserve&quot;  preserveAspectRatio=&quot;xMidYMin slice&quot;&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"IE-中如何更新-svg-text-节点的内容\"><a href=\"#IE-中如何更新-svg-text-节点的内容\" class=\"headerlink\" title=\"IE 中如何更新 svg text 节点的内容\"></a>IE 中如何更新 svg text 节点的内容</h2><p>JavaScript 可以像操作 DOM 节点那样来操作 svg style 属性和内容。比如可以通过 <code>document.querySelector(&#39;#selectorName&#39;).style.display=&#39;none&#39;</code> 来设置显示或隐藏某个节点。<br>此外还可以通过 <code>document.querySelector(&#39;#selectorName&#39;).innerText=&#39;newText&#39;</code> 可以设置 <code>text</code> 节点的内容。</p>\n<p>但是在 IE，<code>element.innerText</code> 和 <code>element.innerHTML</code> 都不起作用。</p>\n<p><strong>解决办法</strong></p>\n<p>使用 <code>element.textContent</code> 代替 <code>element.innerText</code>。这样就可以在 IE 通过 JavaScript 来操作 <code>text</code> 节点的内容。</p>\n<blockquote>\n<p>关于 <code>element.textContent</code> 的介绍及、与<code>innerText</code> 和 <code>innerHTML</code> 的区别，可以参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\" target=\"_blank\" rel=\"external\">Node.textContent</a></p>\n</blockquote>"},{"title":"React 项目中的权限控制需要做哪些事情？","date":"2017-07-21T16:00:00.000Z","_content":"\n## 背景\n\n公司的产品在切换到 SPA 架构时候前，主要采用的 Spring MVC 架构，还是用的 jsp 多页面进行管理，基本上前端不需要管理权限，也不需要控制路由，都由后端 Java filter 层进行处理。当决定在产品线中用 `React` 技术栈以后，权限一部分的控制就交给了前端进行控制，后端只需要控制 API 以及 API 返回的数据权限。\n\n很多 SPA 架构的项目都采用是 JWT 安全认证，是基于 Token 的一种方式。在本文中所讲的权限认证是基于 CAS (这里采用 cookie + session 身份验证) 的安全认证，所以接下来所讲的内容不一定适用于所有项目，也不是最佳实践，只是在某个环境中合适的。\n\n首先，分析一下权限控制，在产品中我们要考虑那几个方面：\n\n- 登录授权，用户没有登录只能访问登录页面，如果处于登录状态则跳转到当前用户的默认首页；\n- 路由授权，当前登录用户的角色，如果对一个 URL 没有权限访问，则跳转到 403 页面；\n- 数据授权，当访问一个没有权限的API，则跳转到 403 页面；\n- 操作授权，当页面中某个按钮或者区域没有权限访问则在页面中隐藏。\n\n针对这4个方面，具体看一下在 React 项目中我们怎么控制？\n\n## 登录授权 \n\n用户只有在登录以后才能访问一些页面，这部分的权限控制需要交给路由来控制， React 项目中的路由，我们用的是 `react-router` 。为了考虑到按需加载等问题，我们采用的是动态路由。\n\n- 首先，在路由设计的时候，会把路由分为两大类，一类是在非登录状态下可以访问，一类是必须在登录以后才能访问的。 \n- 然后，在必须要登录后的这类路由设置一个父路由，这个路由没有可以没有 `path`， 它需要做的一件事件就是在 `onEnter` 函数中判断当前用户是否处于登录状态，如果未登录则跳转到登录页面。\n\n```js\nexport default {\n  onEnter: (nextState, replace) => {\n    // 验证是否已经登录，如果没有登录则跳转到登录页面\n    if (!checkLogin()) {\n      replace('/login');\n    }\n  },\n  childRoutes: [\n    // 登录后可以访问的子路由\n    require('./users').default,\n    require('./userGroups').default,\n    ...\n  ]\n};\n```\n- 最后，在 `login` 路由中 `onEnter` 函数判断是否已经处于登录状态，如果已经登录则跳转到登录用户的默认首页。\n\n```js\nexport default {\n  path: 'login',\n  onEnter: (nextState, replace) => {\n    if (checkLogin()) {\n      goHomePage();\n    }\n  },\n  component: PageLogin\n};\n```\n\n## 路由授权 \n\n用户登录以后，不同的角色所具有访问那些路由的权限是不一样的，比如：一个管理员登录以后可以用户管理的路由，但是一个普通用户则不能访问。 一个角色到底具有那些路由的权限，这个权限信息我们是存储在数据库中，后台通过一个 API 返回给前端，用户在登录以后就可以拿到登录用户具有那些路由权限的一个配置。有了这个配置就好办了，我们只需监听路由的变化是否发生变化，如果发生变化，判断当前路由是否在配置的路由中存在，如果不存在就跳转到指定的错误页面。 \n\n监听路由的变化我们放在了一个 `components` 层的基类 `componentWillReceiveProps` 中处理。\n\n```js\ncomponentWillReceiveProps(nextProps) {\n    const { location } = nextProps;\n    // URL 发生改变的时候检查是否有权限访问\n    if (location.pathname === '/' || location.pathname !== this.props.location.pathname) {\n      checkUrlByAllowRouters(routers);\n    }\n  }\n```\n\n\n## 数据授权 \n\n不同的用户登录以后，对数据范围的权限是有限制的，那些能够访问，那些不能访问在产品设计的是就已经定义好，当访问一个当前登录用户无权访问的 API 或者数据的时候，API 响应中会返回对应的 `code`, 这个 `code` 是提前就前后的约定好的值。\n\n这部分的处理逻辑应该放在 `fetch api` 访问层处理 , 定义一个 `checkResponseCode` 函数，根据约定的 `code` 做出相应的处理。\n\n```js\nfunction checkResponseCode(code){\n    ...\n}\n\nfetch(url, options)\n  .then(checkHttpStatus)\n  .then(parseJSON)\n  .then((data) => {\n    checkResponseCode(data.code);\n    ...\n    ...\n    return data;\n  })\n  .catch((err) => {\n    errorCallback(err, dispatch);\n    ...\n  });\n```\n\n## 操作授权\n\n当用户进入到一个可以访问的路由以后，页面上的按钮不是所有角色都可以操作，有些角色具有查看的功能，有些角色具有新建和删除的功能，不同的角色进入到这个页面，有些按钮需要禁用或者直接不显示这是一个很普遍的业务功能。 \n\n这部分的逻辑就只能在每个业务模块的 `components` 中单独处理，根据不同的业务做个性化处理。为了能够方便的拿到用户的角色相关的信息，在用户登录以后，可以把用户信息放在 `React` 组件最外层的 `context` 中, 这样在各个子组件中都可以很方便的获取到用户信息，进行判断验证并对组件进行对应的控制处理。\n\n另外，很多产品系统中的菜单是动态的，所以菜单的信息可以保存在数据库中，不同的角色会有不同的配置，当用户登录以后，会获取菜单资源的信息，并进行菜单初始化。\n\n\n\n## 其他方面的问题\n\n那是不是做到以上几点就可以呢？ 其实还存在一些问题:\n\n- 当用户登录以后，在地址栏你们直接输入一个 URL 地址，访问一个未授权的路由，这样是否还能做到路由授权的验证？ 路由授权那里讲到，在 `componentWillReceiveProps` 判断路由发生变化才会触发校验，在这种情况下是不会触发校验的。\n- 当用户刷新当前页面的时候，或者直接访问一个没有权限的页面， 会出现页面会闪一下再进行跳转。出现这种情况的原因是，整个项目都是走 `redux` 单向数据流，获取用户的信息 `fetch...` 方法, 被绑定到 `components` 上，也就是说，要等组件渲染的时候才会去取用户信息，然后再通过返回的用户信息进行校验，这个时候组件已经显示出来，再进行页面跳转，就出现了这种闪动的问题。\n\n\n针对这种情况，我们必须要在组件渲染前就必须拿到用户信息，然后再做对应正确的组件渲染。\n\n- 首先，我们定义了一个 `ready` 函数，这个函数用来处理所有的预加载，会主动去那一次用户信息检验当是否处于等于状态，同时在这一步我们还做了一些其他时间，比如主题的预加载，环境信息的预加载。\n\n```js\nconst filter=[];\n/**\n * 获取用户信息，检验是否处于登录装\n */\nfilter.push(new Promise((resolve, reject) => {\n    \n    ...\n    // 异步获取用户信息，如果拿到用信息后再检验一下，当前访问的路由是否有权限访问\n    checkUrlByAllowRouters(view.routers);\n}));\n\n/**\n * 获取环境信息 ， 主题加载并初始化\n */\nfilter.push(new Promise((resolve, reject) => {\n    ...\n}));\n\n\nexport default function ready(callback) {\n  Promise.all(filter)\n    .then(values => {\n      ...\n      callback();\n    })\n    .catch((error) => {\n      console.error('ready=>', error);\n    });\n}\n\n```\n\n- 然后，等 `ready` 所有事情处理完成以后，在回调函数中调用 `react-dom` 的 `render` 函数，渲染组件。 在 `ready` 处理是需要一点时间，这个这个时间内为了体验，最好是叫一个默认的 `Loading...` 。\n\n```js\nready((values) => {\n  render(<App />,\n    document.getElementById('mount')\n  );\n});\n```\n\n## 总结\n处理到这里，应该说能想到的要点都考虑到了。总结一下，其实前端在做权限控制的时候，依赖于后端 API 返回的配置信息，所以在权限设计，路由设计，数据结构设计的时候，前后端一定要约定好。\n\n另外，路由授权这部分的逻辑是可以改进，可以把这部分路径放到 `router` 中处理，后续如果改进后，再更新本文档。\n\n\n\n> 本文作者：[郭小铭](https://github.com/simonguo)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/react-permission.md","raw":"---\ntitle: React 项目中的权限控制需要做哪些事情？\ndate: 2017-07-22\ntag: \n- 前端 \n- React\n- 权限\n- permission\n---\n\n## 背景\n\n公司的产品在切换到 SPA 架构时候前，主要采用的 Spring MVC 架构，还是用的 jsp 多页面进行管理，基本上前端不需要管理权限，也不需要控制路由，都由后端 Java filter 层进行处理。当决定在产品线中用 `React` 技术栈以后，权限一部分的控制就交给了前端进行控制，后端只需要控制 API 以及 API 返回的数据权限。\n\n很多 SPA 架构的项目都采用是 JWT 安全认证，是基于 Token 的一种方式。在本文中所讲的权限认证是基于 CAS (这里采用 cookie + session 身份验证) 的安全认证，所以接下来所讲的内容不一定适用于所有项目，也不是最佳实践，只是在某个环境中合适的。\n\n首先，分析一下权限控制，在产品中我们要考虑那几个方面：\n\n- 登录授权，用户没有登录只能访问登录页面，如果处于登录状态则跳转到当前用户的默认首页；\n- 路由授权，当前登录用户的角色，如果对一个 URL 没有权限访问，则跳转到 403 页面；\n- 数据授权，当访问一个没有权限的API，则跳转到 403 页面；\n- 操作授权，当页面中某个按钮或者区域没有权限访问则在页面中隐藏。\n\n针对这4个方面，具体看一下在 React 项目中我们怎么控制？\n\n## 登录授权 \n\n用户只有在登录以后才能访问一些页面，这部分的权限控制需要交给路由来控制， React 项目中的路由，我们用的是 `react-router` 。为了考虑到按需加载等问题，我们采用的是动态路由。\n\n- 首先，在路由设计的时候，会把路由分为两大类，一类是在非登录状态下可以访问，一类是必须在登录以后才能访问的。 \n- 然后，在必须要登录后的这类路由设置一个父路由，这个路由没有可以没有 `path`， 它需要做的一件事件就是在 `onEnter` 函数中判断当前用户是否处于登录状态，如果未登录则跳转到登录页面。\n\n```js\nexport default {\n  onEnter: (nextState, replace) => {\n    // 验证是否已经登录，如果没有登录则跳转到登录页面\n    if (!checkLogin()) {\n      replace('/login');\n    }\n  },\n  childRoutes: [\n    // 登录后可以访问的子路由\n    require('./users').default,\n    require('./userGroups').default,\n    ...\n  ]\n};\n```\n- 最后，在 `login` 路由中 `onEnter` 函数判断是否已经处于登录状态，如果已经登录则跳转到登录用户的默认首页。\n\n```js\nexport default {\n  path: 'login',\n  onEnter: (nextState, replace) => {\n    if (checkLogin()) {\n      goHomePage();\n    }\n  },\n  component: PageLogin\n};\n```\n\n## 路由授权 \n\n用户登录以后，不同的角色所具有访问那些路由的权限是不一样的，比如：一个管理员登录以后可以用户管理的路由，但是一个普通用户则不能访问。 一个角色到底具有那些路由的权限，这个权限信息我们是存储在数据库中，后台通过一个 API 返回给前端，用户在登录以后就可以拿到登录用户具有那些路由权限的一个配置。有了这个配置就好办了，我们只需监听路由的变化是否发生变化，如果发生变化，判断当前路由是否在配置的路由中存在，如果不存在就跳转到指定的错误页面。 \n\n监听路由的变化我们放在了一个 `components` 层的基类 `componentWillReceiveProps` 中处理。\n\n```js\ncomponentWillReceiveProps(nextProps) {\n    const { location } = nextProps;\n    // URL 发生改变的时候检查是否有权限访问\n    if (location.pathname === '/' || location.pathname !== this.props.location.pathname) {\n      checkUrlByAllowRouters(routers);\n    }\n  }\n```\n\n\n## 数据授权 \n\n不同的用户登录以后，对数据范围的权限是有限制的，那些能够访问，那些不能访问在产品设计的是就已经定义好，当访问一个当前登录用户无权访问的 API 或者数据的时候，API 响应中会返回对应的 `code`, 这个 `code` 是提前就前后的约定好的值。\n\n这部分的处理逻辑应该放在 `fetch api` 访问层处理 , 定义一个 `checkResponseCode` 函数，根据约定的 `code` 做出相应的处理。\n\n```js\nfunction checkResponseCode(code){\n    ...\n}\n\nfetch(url, options)\n  .then(checkHttpStatus)\n  .then(parseJSON)\n  .then((data) => {\n    checkResponseCode(data.code);\n    ...\n    ...\n    return data;\n  })\n  .catch((err) => {\n    errorCallback(err, dispatch);\n    ...\n  });\n```\n\n## 操作授权\n\n当用户进入到一个可以访问的路由以后，页面上的按钮不是所有角色都可以操作，有些角色具有查看的功能，有些角色具有新建和删除的功能，不同的角色进入到这个页面，有些按钮需要禁用或者直接不显示这是一个很普遍的业务功能。 \n\n这部分的逻辑就只能在每个业务模块的 `components` 中单独处理，根据不同的业务做个性化处理。为了能够方便的拿到用户的角色相关的信息，在用户登录以后，可以把用户信息放在 `React` 组件最外层的 `context` 中, 这样在各个子组件中都可以很方便的获取到用户信息，进行判断验证并对组件进行对应的控制处理。\n\n另外，很多产品系统中的菜单是动态的，所以菜单的信息可以保存在数据库中，不同的角色会有不同的配置，当用户登录以后，会获取菜单资源的信息，并进行菜单初始化。\n\n\n\n## 其他方面的问题\n\n那是不是做到以上几点就可以呢？ 其实还存在一些问题:\n\n- 当用户登录以后，在地址栏你们直接输入一个 URL 地址，访问一个未授权的路由，这样是否还能做到路由授权的验证？ 路由授权那里讲到，在 `componentWillReceiveProps` 判断路由发生变化才会触发校验，在这种情况下是不会触发校验的。\n- 当用户刷新当前页面的时候，或者直接访问一个没有权限的页面， 会出现页面会闪一下再进行跳转。出现这种情况的原因是，整个项目都是走 `redux` 单向数据流，获取用户的信息 `fetch...` 方法, 被绑定到 `components` 上，也就是说，要等组件渲染的时候才会去取用户信息，然后再通过返回的用户信息进行校验，这个时候组件已经显示出来，再进行页面跳转，就出现了这种闪动的问题。\n\n\n针对这种情况，我们必须要在组件渲染前就必须拿到用户信息，然后再做对应正确的组件渲染。\n\n- 首先，我们定义了一个 `ready` 函数，这个函数用来处理所有的预加载，会主动去那一次用户信息检验当是否处于等于状态，同时在这一步我们还做了一些其他时间，比如主题的预加载，环境信息的预加载。\n\n```js\nconst filter=[];\n/**\n * 获取用户信息，检验是否处于登录装\n */\nfilter.push(new Promise((resolve, reject) => {\n    \n    ...\n    // 异步获取用户信息，如果拿到用信息后再检验一下，当前访问的路由是否有权限访问\n    checkUrlByAllowRouters(view.routers);\n}));\n\n/**\n * 获取环境信息 ， 主题加载并初始化\n */\nfilter.push(new Promise((resolve, reject) => {\n    ...\n}));\n\n\nexport default function ready(callback) {\n  Promise.all(filter)\n    .then(values => {\n      ...\n      callback();\n    })\n    .catch((error) => {\n      console.error('ready=>', error);\n    });\n}\n\n```\n\n- 然后，等 `ready` 所有事情处理完成以后，在回调函数中调用 `react-dom` 的 `render` 函数，渲染组件。 在 `ready` 处理是需要一点时间，这个这个时间内为了体验，最好是叫一个默认的 `Loading...` 。\n\n```js\nready((values) => {\n  render(<App />,\n    document.getElementById('mount')\n  );\n});\n```\n\n## 总结\n处理到这里，应该说能想到的要点都考虑到了。总结一下，其实前端在做权限控制的时候，依赖于后端 API 返回的配置信息，所以在权限设计，路由设计，数据结构设计的时候，前后端一定要约定好。\n\n另外，路由授权这部分的逻辑是可以改进，可以把这部分路径放到 `router` 中处理，后续如果改进后，再更新本文档。\n\n\n\n> 本文作者：[郭小铭](https://github.com/simonguo)\n\n\n\n\n\n\n\n\n\n\n","slug":"react-permission","published":1,"updated":"2017-07-22T16:46:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctsez0007m0793p8llljh","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司的产品在切换到 SPA 架构时候前，主要采用的 Spring MVC 架构，还是用的 jsp 多页面进行管理，基本上前端不需要管理权限，也不需要控制路由，都由后端 Java filter 层进行处理。当决定在产品线中用 <code>React</code> 技术栈以后，权限一部分的控制就交给了前端进行控制，后端只需要控制 API 以及 API 返回的数据权限。</p>\n<p>很多 SPA 架构的项目都采用是 JWT 安全认证，是基于 Token 的一种方式。在本文中所讲的权限认证是基于 CAS (这里采用 cookie + session 身份验证) 的安全认证，所以接下来所讲的内容不一定适用于所有项目，也不是最佳实践，只是在某个环境中合适的。</p>\n<p>首先，分析一下权限控制，在产品中我们要考虑那几个方面：</p>\n<ul>\n<li>登录授权，用户没有登录只能访问登录页面，如果处于登录状态则跳转到当前用户的默认首页；</li>\n<li>路由授权，当前登录用户的角色，如果对一个 URL 没有权限访问，则跳转到 403 页面；</li>\n<li>数据授权，当访问一个没有权限的API，则跳转到 403 页面；</li>\n<li>操作授权，当页面中某个按钮或者区域没有权限访问则在页面中隐藏。</li>\n</ul>\n<p>针对这4个方面，具体看一下在 React 项目中我们怎么控制？</p>\n<h2 id=\"登录授权\"><a href=\"#登录授权\" class=\"headerlink\" title=\"登录授权\"></a>登录授权</h2><p>用户只有在登录以后才能访问一些页面，这部分的权限控制需要交给路由来控制， React 项目中的路由，我们用的是 <code>react-router</code> 。为了考虑到按需加载等问题，我们采用的是动态路由。</p>\n<ul>\n<li>首先，在路由设计的时候，会把路由分为两大类，一类是在非登录状态下可以访问，一类是必须在登录以后才能访问的。 </li>\n<li>然后，在必须要登录后的这类路由设置一个父路由，这个路由没有可以没有 <code>path</code>， 它需要做的一件事件就是在 <code>onEnter</code> 函数中判断当前用户是否处于登录状态，如果未登录则跳转到登录页面。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  onEnter: <span class=\"function\">(<span class=\"params\">nextState, replace</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 验证是否已经登录，如果没有登录则跳转到登录页面</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!checkLogin()) &#123;</div><div class=\"line\">      replace(<span class=\"string\">'/login'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  childRoutes: [</div><div class=\"line\">    <span class=\"comment\">// 登录后可以访问的子路由</span></div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./users'</span>).default,</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./userGroups'</span>).default,</div><div class=\"line\">    ...</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>最后，在 <code>login</code> 路由中 <code>onEnter</code> 函数判断是否已经处于登录状态，如果已经登录则跳转到登录用户的默认首页。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  path: <span class=\"string\">'login'</span>,</div><div class=\"line\">  onEnter: <span class=\"function\">(<span class=\"params\">nextState, replace</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (checkLogin()) &#123;</div><div class=\"line\">      goHomePage();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  component: PageLogin</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"路由授权\"><a href=\"#路由授权\" class=\"headerlink\" title=\"路由授权\"></a>路由授权</h2><p>用户登录以后，不同的角色所具有访问那些路由的权限是不一样的，比如：一个管理员登录以后可以用户管理的路由，但是一个普通用户则不能访问。 一个角色到底具有那些路由的权限，这个权限信息我们是存储在数据库中，后台通过一个 API 返回给前端，用户在登录以后就可以拿到登录用户具有那些路由权限的一个配置。有了这个配置就好办了，我们只需监听路由的变化是否发生变化，如果发生变化，判断当前路由是否在配置的路由中存在，如果不存在就跳转到指定的错误页面。 </p>\n<p>监听路由的变化我们放在了一个 <code>components</code> 层的基类 <code>componentWillReceiveProps</code> 中处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps(nextProps) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; location &#125; = nextProps;</div><div class=\"line\">    <span class=\"comment\">// URL 发生改变的时候检查是否有权限访问</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (location.pathname === <span class=\"string\">'/'</span> || location.pathname !== <span class=\"keyword\">this</span>.props.location.pathname) &#123;</div><div class=\"line\">      checkUrlByAllowRouters(routers);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数据授权\"><a href=\"#数据授权\" class=\"headerlink\" title=\"数据授权\"></a>数据授权</h2><p>不同的用户登录以后，对数据范围的权限是有限制的，那些能够访问，那些不能访问在产品设计的是就已经定义好，当访问一个当前登录用户无权访问的 API 或者数据的时候，API 响应中会返回对应的 <code>code</code>, 这个 <code>code</code> 是提前就前后的约定好的值。</p>\n<p>这部分的处理逻辑应该放在 <code>fetch api</code> 访问层处理 , 定义一个 <code>checkResponseCode</code> 函数，根据约定的 <code>code</code> 做出相应的处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkResponseCode</span>(<span class=\"params\">code</span>)</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fetch(url, options)</div><div class=\"line\">  .then(checkHttpStatus)</div><div class=\"line\">  .then(parseJSON)</div><div class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</div><div class=\"line\">    checkResponseCode(data.code);</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</div><div class=\"line\">    errorCallback(err, dispatch);</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"操作授权\"><a href=\"#操作授权\" class=\"headerlink\" title=\"操作授权\"></a>操作授权</h2><p>当用户进入到一个可以访问的路由以后，页面上的按钮不是所有角色都可以操作，有些角色具有查看的功能，有些角色具有新建和删除的功能，不同的角色进入到这个页面，有些按钮需要禁用或者直接不显示这是一个很普遍的业务功能。 </p>\n<p>这部分的逻辑就只能在每个业务模块的 <code>components</code> 中单独处理，根据不同的业务做个性化处理。为了能够方便的拿到用户的角色相关的信息，在用户登录以后，可以把用户信息放在 <code>React</code> 组件最外层的 <code>context</code> 中, 这样在各个子组件中都可以很方便的获取到用户信息，进行判断验证并对组件进行对应的控制处理。</p>\n<p>另外，很多产品系统中的菜单是动态的，所以菜单的信息可以保存在数据库中，不同的角色会有不同的配置，当用户登录以后，会获取菜单资源的信息，并进行菜单初始化。</p>\n<h2 id=\"其他方面的问题\"><a href=\"#其他方面的问题\" class=\"headerlink\" title=\"其他方面的问题\"></a>其他方面的问题</h2><p>那是不是做到以上几点就可以呢？ 其实还存在一些问题:</p>\n<ul>\n<li>当用户登录以后，在地址栏你们直接输入一个 URL 地址，访问一个未授权的路由，这样是否还能做到路由授权的验证？ 路由授权那里讲到，在 <code>componentWillReceiveProps</code> 判断路由发生变化才会触发校验，在这种情况下是不会触发校验的。</li>\n<li>当用户刷新当前页面的时候，或者直接访问一个没有权限的页面， 会出现页面会闪一下再进行跳转。出现这种情况的原因是，整个项目都是走 <code>redux</code> 单向数据流，获取用户的信息 <code>fetch...</code> 方法, 被绑定到 <code>components</code> 上，也就是说，要等组件渲染的时候才会去取用户信息，然后再通过返回的用户信息进行校验，这个时候组件已经显示出来，再进行页面跳转，就出现了这种闪动的问题。</li>\n</ul>\n<p>针对这种情况，我们必须要在组件渲染前就必须拿到用户信息，然后再做对应正确的组件渲染。</p>\n<ul>\n<li>首先，我们定义了一个 <code>ready</code> 函数，这个函数用来处理所有的预加载，会主动去那一次用户信息检验当是否处于等于状态，同时在这一步我们还做了一些其他时间，比如主题的预加载，环境信息的预加载。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> filter=[];</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 获取用户信息，检验是否处于登录装</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">filter.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    </div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 异步获取用户信息，如果拿到用信息后再检验一下，当前访问的路由是否有权限访问</span></div><div class=\"line\">    checkUrlByAllowRouters(view.routers);</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 获取环境信息 ， 主题加载并初始化</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">filter.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ready</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">Promise</span>.all(filter)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123;</div><div class=\"line\">      ...</div><div class=\"line\">      callback();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'ready=&gt;'</span>, error);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>然后，等 <code>ready</code> 所有事情处理完成以后，在回调函数中调用 <code>react-dom</code> 的 <code>render</code> 函数，渲染组件。 在 <code>ready</code> 处理是需要一点时间，这个这个时间内为了体验，最好是叫一个默认的 <code>Loading...</code> 。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ready(<span class=\"function\">(<span class=\"params\">values</span>) =&gt;</span> &#123;</div><div class=\"line\">  render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>,</span></div><div class=\"line\"><span class=\"xml\">    document.getElementById('mount')</span></div><div class=\"line\"><span class=\"xml\">  );</span></div><div class=\"line\"><span class=\"xml\">&#125;);</span></div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>处理到这里，应该说能想到的要点都考虑到了。总结一下，其实前端在做权限控制的时候，依赖于后端 API 返回的配置信息，所以在权限设计，路由设计，数据结构设计的时候，前后端一定要约定好。</p>\n<p>另外，路由授权这部分的逻辑是可以改进，可以把这部分路径放到 <code>router</code> 中处理，后续如果改进后，再更新本文档。</p>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/simonguo\" target=\"_blank\" rel=\"external\">郭小铭</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司的产品在切换到 SPA 架构时候前，主要采用的 Spring MVC 架构，还是用的 jsp 多页面进行管理，基本上前端不需要管理权限，也不需要控制路由，都由后端 Java filter 层进行处理。当决定在产品线中用 <code>React</code> 技术栈以后，权限一部分的控制就交给了前端进行控制，后端只需要控制 API 以及 API 返回的数据权限。</p>\n<p>很多 SPA 架构的项目都采用是 JWT 安全认证，是基于 Token 的一种方式。在本文中所讲的权限认证是基于 CAS (这里采用 cookie + session 身份验证) 的安全认证，所以接下来所讲的内容不一定适用于所有项目，也不是最佳实践，只是在某个环境中合适的。</p>\n<p>首先，分析一下权限控制，在产品中我们要考虑那几个方面：</p>\n<ul>\n<li>登录授权，用户没有登录只能访问登录页面，如果处于登录状态则跳转到当前用户的默认首页；</li>\n<li>路由授权，当前登录用户的角色，如果对一个 URL 没有权限访问，则跳转到 403 页面；</li>\n<li>数据授权，当访问一个没有权限的API，则跳转到 403 页面；</li>\n<li>操作授权，当页面中某个按钮或者区域没有权限访问则在页面中隐藏。</li>\n</ul>\n<p>针对这4个方面，具体看一下在 React 项目中我们怎么控制？</p>\n<h2 id=\"登录授权\"><a href=\"#登录授权\" class=\"headerlink\" title=\"登录授权\"></a>登录授权</h2><p>用户只有在登录以后才能访问一些页面，这部分的权限控制需要交给路由来控制， React 项目中的路由，我们用的是 <code>react-router</code> 。为了考虑到按需加载等问题，我们采用的是动态路由。</p>\n<ul>\n<li>首先，在路由设计的时候，会把路由分为两大类，一类是在非登录状态下可以访问，一类是必须在登录以后才能访问的。 </li>\n<li>然后，在必须要登录后的这类路由设置一个父路由，这个路由没有可以没有 <code>path</code>， 它需要做的一件事件就是在 <code>onEnter</code> 函数中判断当前用户是否处于登录状态，如果未登录则跳转到登录页面。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  onEnter: <span class=\"function\">(<span class=\"params\">nextState, replace</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 验证是否已经登录，如果没有登录则跳转到登录页面</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!checkLogin()) &#123;</div><div class=\"line\">      replace(<span class=\"string\">'/login'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  childRoutes: [</div><div class=\"line\">    <span class=\"comment\">// 登录后可以访问的子路由</span></div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./users'</span>).default,</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./userGroups'</span>).default,</div><div class=\"line\">    ...</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>最后，在 <code>login</code> 路由中 <code>onEnter</code> 函数判断是否已经处于登录状态，如果已经登录则跳转到登录用户的默认首页。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  path: <span class=\"string\">'login'</span>,</div><div class=\"line\">  onEnter: <span class=\"function\">(<span class=\"params\">nextState, replace</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (checkLogin()) &#123;</div><div class=\"line\">      goHomePage();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  component: PageLogin</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"路由授权\"><a href=\"#路由授权\" class=\"headerlink\" title=\"路由授权\"></a>路由授权</h2><p>用户登录以后，不同的角色所具有访问那些路由的权限是不一样的，比如：一个管理员登录以后可以用户管理的路由，但是一个普通用户则不能访问。 一个角色到底具有那些路由的权限，这个权限信息我们是存储在数据库中，后台通过一个 API 返回给前端，用户在登录以后就可以拿到登录用户具有那些路由权限的一个配置。有了这个配置就好办了，我们只需监听路由的变化是否发生变化，如果发生变化，判断当前路由是否在配置的路由中存在，如果不存在就跳转到指定的错误页面。 </p>\n<p>监听路由的变化我们放在了一个 <code>components</code> 层的基类 <code>componentWillReceiveProps</code> 中处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps(nextProps) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; location &#125; = nextProps;</div><div class=\"line\">    <span class=\"comment\">// URL 发生改变的时候检查是否有权限访问</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (location.pathname === <span class=\"string\">'/'</span> || location.pathname !== <span class=\"keyword\">this</span>.props.location.pathname) &#123;</div><div class=\"line\">      checkUrlByAllowRouters(routers);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数据授权\"><a href=\"#数据授权\" class=\"headerlink\" title=\"数据授权\"></a>数据授权</h2><p>不同的用户登录以后，对数据范围的权限是有限制的，那些能够访问，那些不能访问在产品设计的是就已经定义好，当访问一个当前登录用户无权访问的 API 或者数据的时候，API 响应中会返回对应的 <code>code</code>, 这个 <code>code</code> 是提前就前后的约定好的值。</p>\n<p>这部分的处理逻辑应该放在 <code>fetch api</code> 访问层处理 , 定义一个 <code>checkResponseCode</code> 函数，根据约定的 <code>code</code> 做出相应的处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkResponseCode</span>(<span class=\"params\">code</span>)</span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fetch(url, options)</div><div class=\"line\">  .then(checkHttpStatus)</div><div class=\"line\">  .then(parseJSON)</div><div class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</div><div class=\"line\">    checkResponseCode(data.code);</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</div><div class=\"line\">    errorCallback(err, dispatch);</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"操作授权\"><a href=\"#操作授权\" class=\"headerlink\" title=\"操作授权\"></a>操作授权</h2><p>当用户进入到一个可以访问的路由以后，页面上的按钮不是所有角色都可以操作，有些角色具有查看的功能，有些角色具有新建和删除的功能，不同的角色进入到这个页面，有些按钮需要禁用或者直接不显示这是一个很普遍的业务功能。 </p>\n<p>这部分的逻辑就只能在每个业务模块的 <code>components</code> 中单独处理，根据不同的业务做个性化处理。为了能够方便的拿到用户的角色相关的信息，在用户登录以后，可以把用户信息放在 <code>React</code> 组件最外层的 <code>context</code> 中, 这样在各个子组件中都可以很方便的获取到用户信息，进行判断验证并对组件进行对应的控制处理。</p>\n<p>另外，很多产品系统中的菜单是动态的，所以菜单的信息可以保存在数据库中，不同的角色会有不同的配置，当用户登录以后，会获取菜单资源的信息，并进行菜单初始化。</p>\n<h2 id=\"其他方面的问题\"><a href=\"#其他方面的问题\" class=\"headerlink\" title=\"其他方面的问题\"></a>其他方面的问题</h2><p>那是不是做到以上几点就可以呢？ 其实还存在一些问题:</p>\n<ul>\n<li>当用户登录以后，在地址栏你们直接输入一个 URL 地址，访问一个未授权的路由，这样是否还能做到路由授权的验证？ 路由授权那里讲到，在 <code>componentWillReceiveProps</code> 判断路由发生变化才会触发校验，在这种情况下是不会触发校验的。</li>\n<li>当用户刷新当前页面的时候，或者直接访问一个没有权限的页面， 会出现页面会闪一下再进行跳转。出现这种情况的原因是，整个项目都是走 <code>redux</code> 单向数据流，获取用户的信息 <code>fetch...</code> 方法, 被绑定到 <code>components</code> 上，也就是说，要等组件渲染的时候才会去取用户信息，然后再通过返回的用户信息进行校验，这个时候组件已经显示出来，再进行页面跳转，就出现了这种闪动的问题。</li>\n</ul>\n<p>针对这种情况，我们必须要在组件渲染前就必须拿到用户信息，然后再做对应正确的组件渲染。</p>\n<ul>\n<li>首先，我们定义了一个 <code>ready</code> 函数，这个函数用来处理所有的预加载，会主动去那一次用户信息检验当是否处于等于状态，同时在这一步我们还做了一些其他时间，比如主题的预加载，环境信息的预加载。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> filter=[];</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 获取用户信息，检验是否处于登录装</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">filter.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    </div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 异步获取用户信息，如果拿到用信息后再检验一下，当前访问的路由是否有权限访问</span></div><div class=\"line\">    checkUrlByAllowRouters(view.routers);</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 获取环境信息 ， 主题加载并初始化</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">filter.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ready</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">Promise</span>.all(filter)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123;</div><div class=\"line\">      ...</div><div class=\"line\">      callback();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'ready=&gt;'</span>, error);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>然后，等 <code>ready</code> 所有事情处理完成以后，在回调函数中调用 <code>react-dom</code> 的 <code>render</code> 函数，渲染组件。 在 <code>ready</code> 处理是需要一点时间，这个这个时间内为了体验，最好是叫一个默认的 <code>Loading...</code> 。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ready(<span class=\"function\">(<span class=\"params\">values</span>) =&gt;</span> &#123;</div><div class=\"line\">  render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>,</span></div><div class=\"line\"><span class=\"xml\">    document.getElementById('mount')</span></div><div class=\"line\"><span class=\"xml\">  );</span></div><div class=\"line\"><span class=\"xml\">&#125;);</span></div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>处理到这里，应该说能想到的要点都考虑到了。总结一下，其实前端在做权限控制的时候，依赖于后端 API 返回的配置信息，所以在权限设计，路由设计，数据结构设计的时候，前后端一定要约定好。</p>\n<p>另外，路由授权这部分的逻辑是可以改进，可以把这部分路径放到 <code>router</code> 中处理，后续如果改进后，再更新本文档。</p>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/simonguo\" target=\"_blank\" rel=\"external\">郭小铭</a></p>\n</blockquote>\n"},{"title":"HyperS 前端团队博客创建了","date":"2017-07-19T16:00:00.000Z","_content":"\n千呼万唤始出来，HyperS 的前端团队博客终于在今天搭建好了。欢迎各位小伙伴的踊跃投稿。\n<!-- more -->\n\n在投稿的时候，需要注意的是：\n**所有文章不能涉及到公司安全信息，以及客户相关资料，通过直属 Leader 审核后才能发布。**\n\n## 文章格式\n### 按照 hexo 的格式进行发布\n```javascript\n---\ntitle: you post title\ndate: 2017-07-20 15:04:29\ntags:\n- ES7\n- Async函数\n---\n// 文章简介，必须要有的，用于在首页显示。使用 <!-- more --> 作为分割\n这里是简介部分的内容\n<!-- more -->\n\n//正文部分\n这里是正文部分的内容\n\n// 结尾\n> 本文作者：[Superman](https://github.com/superman66)\n> 原文地址：[原文地址]()\n>...\n```\n文章应包括：\n* 标题\n* 时间\n* 标签 - (须正确设置标签）\n* 正文 - 文章的内容\n* 结尾 - 用于添加作者信息\n\n**结尾的格式**\n\n* 本文作者 - 可以填写你的 GitHub 或者 个人站点信息\n* 原文地址 - 填写文章的出处（可选）\n* 其他按需添加\n\n## 如何投稿\n**第一步：Fork 博客的 repository 到你的 GitHub 账号**\n\n>Blog Github 地址：[Blog](https://github.com/hypers/blog)\n\n**第二步：clone repository 到你本地**\nclone 到本地后，并切换到 `master` 分支。\n```bash\ngit clone git@github.com:hypers/blog.git\n```\n\n**第三步：创建文章**\n使用`hexo new <title>`命令新建文章，例如：\n\n```bash\nhexo new hello-hypers\n```\n\n或者进入到 `blog/source/_posts` 文件夹，创建 markdown 文件，按照上面的格式写文章。\n文章写完之后，直接提交到 GitHub。\n\n**第四步**\n提交 `pull reqeust` 即可。\n\n\n> 本文作者：[Superman](https://github.com/superman66)\n","source":"_posts/hello-hypers.md","raw":"---\ntitle: HyperS 前端团队博客创建了\ndate: 2017-07-20\ntag: \n- HyperS\n---\n\n千呼万唤始出来，HyperS 的前端团队博客终于在今天搭建好了。欢迎各位小伙伴的踊跃投稿。\n<!-- more -->\n\n在投稿的时候，需要注意的是：\n**所有文章不能涉及到公司安全信息，以及客户相关资料，通过直属 Leader 审核后才能发布。**\n\n## 文章格式\n### 按照 hexo 的格式进行发布\n```javascript\n---\ntitle: you post title\ndate: 2017-07-20 15:04:29\ntags:\n- ES7\n- Async函数\n---\n// 文章简介，必须要有的，用于在首页显示。使用 <!-- more --> 作为分割\n这里是简介部分的内容\n<!-- more -->\n\n//正文部分\n这里是正文部分的内容\n\n// 结尾\n> 本文作者：[Superman](https://github.com/superman66)\n> 原文地址：[原文地址]()\n>...\n```\n文章应包括：\n* 标题\n* 时间\n* 标签 - (须正确设置标签）\n* 正文 - 文章的内容\n* 结尾 - 用于添加作者信息\n\n**结尾的格式**\n\n* 本文作者 - 可以填写你的 GitHub 或者 个人站点信息\n* 原文地址 - 填写文章的出处（可选）\n* 其他按需添加\n\n## 如何投稿\n**第一步：Fork 博客的 repository 到你的 GitHub 账号**\n\n>Blog Github 地址：[Blog](https://github.com/hypers/blog)\n\n**第二步：clone repository 到你本地**\nclone 到本地后，并切换到 `master` 分支。\n```bash\ngit clone git@github.com:hypers/blog.git\n```\n\n**第三步：创建文章**\n使用`hexo new <title>`命令新建文章，例如：\n\n```bash\nhexo new hello-hypers\n```\n\n或者进入到 `blog/source/_posts` 文件夹，创建 markdown 文件，按照上面的格式写文章。\n文章写完之后，直接提交到 GitHub。\n\n**第四步**\n提交 `pull reqeust` 即可。\n\n\n> 本文作者：[Superman](https://github.com/superman66)\n","slug":"hello-hypers","published":1,"updated":"2017-08-07T06:03:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctsf00008m079yh989nqa","content":"<p>千呼万唤始出来，HyperS 的前端团队博客终于在今天搭建好了。欢迎各位小伙伴的踊跃投稿。<br><a id=\"more\"></a></p>\n<p>在投稿的时候，需要注意的是：<br><strong>所有文章不能涉及到公司安全信息，以及客户相关资料，通过直属 Leader 审核后才能发布。</strong></p>\n<h2 id=\"文章格式\"><a href=\"#文章格式\" class=\"headerlink\" title=\"文章格式\"></a>文章格式</h2><h3 id=\"按照-hexo-的格式进行发布\"><a href=\"#按照-hexo-的格式进行发布\" class=\"headerlink\" title=\"按照 hexo 的格式进行发布\"></a>按照 hexo 的格式进行发布</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: you post title</div><div class=\"line\">date: <span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-20</span> <span class=\"number\">15</span>:<span class=\"number\">04</span>:<span class=\"number\">29</span></div><div class=\"line\">tags:</div><div class=\"line\">- ES7</div><div class=\"line\">- Async函数</div><div class=\"line\">---</div><div class=\"line\"><span class=\"comment\">// 文章简介，必须要有的，用于在首页显示。使用 &lt;!-- more --&gt; 作为分割</span></div><div class=\"line\">这里是简介部分的内容</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//正文部分</span></div><div class=\"line\">这里是正文部分的内容</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结尾</span></div><div class=\"line\">&gt; 本文作者：[Superman](https:<span class=\"comment\">//github.com/superman66)</span></div><div class=\"line\">&gt; 原文地址：[原文地址]()</div><div class=\"line\">&gt;...</div></pre></td></tr></table></figure>\n<p>文章应包括：</p>\n<ul>\n<li>标题</li>\n<li>时间</li>\n<li>标签 - (须正确设置标签）</li>\n<li>正文 - 文章的内容</li>\n<li>结尾 - 用于添加作者信息</li>\n</ul>\n<p><strong>结尾的格式</strong></p>\n<ul>\n<li>本文作者 - 可以填写你的 GitHub 或者 个人站点信息</li>\n<li>原文地址 - 填写文章的出处（可选）</li>\n<li>其他按需添加</li>\n</ul>\n<h2 id=\"如何投稿\"><a href=\"#如何投稿\" class=\"headerlink\" title=\"如何投稿\"></a>如何投稿</h2><p><strong>第一步：Fork 博客的 repository 到你的 GitHub 账号</strong></p>\n<blockquote>\n<p>Blog Github 地址：<a href=\"https://github.com/hypers/blog\" target=\"_blank\" rel=\"external\">Blog</a></p>\n</blockquote>\n<p><strong>第二步：clone repository 到你本地</strong><br>clone 到本地后，并切换到 <code>master</code> 分支。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:hypers/blog.git</div></pre></td></tr></table></figure></p>\n<p><strong>第三步：创建文章</strong><br>使用<code>hexo new &lt;title&gt;</code>命令新建文章，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new hello-hypers</div></pre></td></tr></table></figure>\n<p>或者进入到 <code>blog/source/_posts</code> 文件夹，创建 markdown 文件，按照上面的格式写文章。<br>文章写完之后，直接提交到 GitHub。</p>\n<p><strong>第四步</strong><br>提交 <code>pull reqeust</code> 即可。</p>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/superman66\" target=\"_blank\" rel=\"external\">Superman</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>千呼万唤始出来，HyperS 的前端团队博客终于在今天搭建好了。欢迎各位小伙伴的踊跃投稿。<br>","more":"</p>\n<p>在投稿的时候，需要注意的是：<br><strong>所有文章不能涉及到公司安全信息，以及客户相关资料，通过直属 Leader 审核后才能发布。</strong></p>\n<h2 id=\"文章格式\"><a href=\"#文章格式\" class=\"headerlink\" title=\"文章格式\"></a>文章格式</h2><h3 id=\"按照-hexo-的格式进行发布\"><a href=\"#按照-hexo-的格式进行发布\" class=\"headerlink\" title=\"按照 hexo 的格式进行发布\"></a>按照 hexo 的格式进行发布</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: you post title</div><div class=\"line\">date: <span class=\"number\">2017</span><span class=\"number\">-07</span><span class=\"number\">-20</span> <span class=\"number\">15</span>:<span class=\"number\">04</span>:<span class=\"number\">29</span></div><div class=\"line\">tags:</div><div class=\"line\">- ES7</div><div class=\"line\">- Async函数</div><div class=\"line\">---</div><div class=\"line\"><span class=\"comment\">// 文章简介，必须要有的，用于在首页显示。使用 &lt;!-- more --&gt; 作为分割</span></div><div class=\"line\">这里是简介部分的内容</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//正文部分</span></div><div class=\"line\">这里是正文部分的内容</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结尾</span></div><div class=\"line\">&gt; 本文作者：[Superman](https:<span class=\"comment\">//github.com/superman66)</span></div><div class=\"line\">&gt; 原文地址：[原文地址]()</div><div class=\"line\">&gt;...</div></pre></td></tr></table></figure>\n<p>文章应包括：</p>\n<ul>\n<li>标题</li>\n<li>时间</li>\n<li>标签 - (须正确设置标签）</li>\n<li>正文 - 文章的内容</li>\n<li>结尾 - 用于添加作者信息</li>\n</ul>\n<p><strong>结尾的格式</strong></p>\n<ul>\n<li>本文作者 - 可以填写你的 GitHub 或者 个人站点信息</li>\n<li>原文地址 - 填写文章的出处（可选）</li>\n<li>其他按需添加</li>\n</ul>\n<h2 id=\"如何投稿\"><a href=\"#如何投稿\" class=\"headerlink\" title=\"如何投稿\"></a>如何投稿</h2><p><strong>第一步：Fork 博客的 repository 到你的 GitHub 账号</strong></p>\n<blockquote>\n<p>Blog Github 地址：<a href=\"https://github.com/hypers/blog\" target=\"_blank\" rel=\"external\">Blog</a></p>\n</blockquote>\n<p><strong>第二步：clone repository 到你本地</strong><br>clone 到本地后，并切换到 <code>master</code> 分支。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:hypers/blog.git</div></pre></td></tr></table></figure></p>\n<p><strong>第三步：创建文章</strong><br>使用<code>hexo new &lt;title&gt;</code>命令新建文章，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new hello-hypers</div></pre></td></tr></table></figure>\n<p>或者进入到 <code>blog/source/_posts</code> 文件夹，创建 markdown 文件，按照上面的格式写文章。<br>文章写完之后，直接提交到 GitHub。</p>\n<p><strong>第四步</strong><br>提交 <code>pull reqeust</code> 即可。</p>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/superman66\" target=\"_blank\" rel=\"external\">Superman</a></p>\n</blockquote>"},{"title":"代码测试覆盖率分析","date":"2017-08-19T16:00:00.000Z","_content":"\n## 背景\n\n最近我们前端团队在重构大量的 UI 组件，为了保证代码质量，我要求团队中的成员必须编写单元测试，并且测试覆盖率达到 80% 以上。那么问题来了，为什么是 80% 的覆盖率？ 这是一个硬性的考核指标吗？\n\n> 这里所说的测试覆盖率，是指的是开发人员写的单元测试的覆盖率，不是测试人员的功能测试的覆盖率。\n\n\n## 那些地方需要写单元测试？\n\n为什么需要写单元测试就不再阐述，我相信大家都知道，特别是在持续集成过程中的重要性。但是，从我的经历来看，当前的软件市场环境中，不管是用的瀑布模式，还是螺旋模式，还是敏捷模式，很多软件没有写单元测试。\n\n我也是一个程序员，每天需要写一些的业务代码，对于写单元测试来说，确实需要我很多时间和精力，因为它也需要设计用例和一些体力活。所以在我们的一些项目中也存在很多功能没有单元测试，主要原因有以下几个点:\n\n- 业务逻辑更新太快，单元测试不可复用；\n- 业务时间紧急，迭代周期时间短，没有时间写单元测试；\n- UI 上很多测试，通过单元测试代码无法覆盖。\n\n在《软件测试》一书中讲测试的原则，第一条就是：“完全测试程序是不可能的”。所以对于以上部分需不需测试，取决于你软件性质，时间和团队。但是对于满足以下几点代码我建议需要编写单元测试：\n\n- 和安全相关的代码逻辑；\n- 核心的功能模块，函数；\n- 短期不会发生变化的 UI 组件；\n- 提供外部调用的接口。\n\n<!-- more -->\n\n## 测试覆盖率报告\n\n\n如果完全通过测试覆盖作为质量标准是存在问题的，我们在检查一个测试覆盖了的时候往往会通过一些工具去检查，程序员是可以通过一些方式让数字看上去漂亮，但是这没有意义。我们应该把它作为一种发现未被测试覆盖的代码的手段，同时也是一种学习的手段，为什么这段代码没有覆盖到？ 如果这个函数的参数发生了变化会怎么样？ 这段代码逻辑怎么这么复杂？\n\n通过分析未被测试覆盖的代码，找到是设计问题，还功能理解有问题，还是说着就是一段废代码，它可以帮助开发者能够更好的理解背后的事情，可以检查程序中的废代码，然后在以后的设计中做很好的抽象，做可测试的代码。\n\n\n各种开发语言都有对应的测试框架，可以生成测试报告，在本文中我以前端的 javascript 为示例， `karma` + `istanbul` 工具生成报告。\n\n- `karma` 是一个测试框架；\n- `istanbul` 是 JavaScript 程序的代码覆盖率工具。\n\n怎么生成测试报告这里就不讲，有很多教程，也可以查看官方文档 [istanbul](https://github.com/gotwarlost/istanbul)。这里我们先来看一下生成出来的测试报告。 以下是 [rsuite](https://github.com/rsuite/rsuite) `src/utils` 目录下文件的测试报告, 这是打开的一个生成 `html` 格式的测试报告：\n\n{% asset_img 1.png RSUITE 测试覆盖率 %}\n\n从图中我们可以看到它有四个指标：\n- Statements: 语句覆盖率，执行到每个语句；\n- Branches: 分支覆盖率，执行到每个if代码块；\n- Functions: 函数覆盖率，调用到程式中的每一个函数；\n- Lines: 行覆盖率, 执行到程序中的每一行。\n\n> 每一个指标都列出了覆盖的比例和数量情况，其中 `Statements` 与 `Lines` 比例和数量是一致的，那它们有什么不同呢？\n> 在代码中往往存在一些书写不规范的情况，比如一行多个语句，这个时候它们统计的覆盖率就会有差异。 这里又有一个值得思考的问题就是，代码覆盖率工具是怎么统计一行多个语句这种代码的？ 后面讲到统计原理的时候会讲到。\n\n\n\n另外，我们通过图中可以看出  `decorate.js` 这个文件相对来说测试覆盖率较低，我们进入再具体分析一下，在那些地方没有覆盖到：\n\n{% asset_img 2.png decorate.js 测试覆盖率 %}\n\n从图中我们可以看到红色部分和黄色, 都是在测试用例中没有覆盖到的地方:\n\n- `getProps` 函数，该函数式 `export` 出去的一个函数，但是在测试用例中没有覆盖到；\n- `typeof size === 'object'` 代码块没有覆盖到；\n- `Component.propTypes={}`.. 这里黄色部分，是一个默认值设置，说明这个默认值一直没有被使用过；\n\n\n在图中左侧，显示行号的地方有一个 `12x`、`9x`、`4x`，这个代表了该行语句被执行的次数， 通过这个清晰的报告，我们可以在代码中看出那些函数，那些代码块没有被执行，从而去分析原因，修正测试用例，完善代码逻辑，提高质量。\n\n## 生成测试报表原理\n\n我先来看一下 `istanbul` 生成的测试报告中有个 `lcov.info` 文件, 这里我只贴出关于 `decorate.js` 文件这部分的内容:\n\n```\nSF:/Users/simonguo/workspace/rsuite/src/utils/decorate.js\nFN:25,getClassNames\nFN:39,getProps\nFN:41,(anonymous_2)\nFN:50,decorate\nFN:51,(anonymous_4)\nFNF:5\nFNH:3\nFNDA:237,getClassNames\nFNDA:0,getProps\nFNDA:0,(anonymous_2)\nFNDA:12,decorate\nFNDA:12,(anonymous_4)\nDA:4,1\nDA:11,1\nDA:18,1\nDA:27,237\nDA:28,237\nDA:30,237\nDA:32,237\nDA:40,0\nDA:41,0\nDA:42,0\nDA:44,0\nDA:51,12\nDA:52,12\nDA:53,12\nDA:54,12\nDA:56,12\n...\n```\n`FN` 代表函数，\n`25`,`39`,`41`,`50`,`51` 这些行分布对应源代码中的函数开始的行号，\n`FNF:5` 代表一共有5个函数\n`FNH:3` 其实 3 个函数被测试所覆盖，\n`FNDA:237,getClassNames` 代表了 `getClassNames` 这个函数被执行了 237 次。\n...\n\n等等，在文件中详细记载了行号，以及代码的执行情况，大家可以再对照前面的那张“测试覆盖率”图片进行分析，可以详细的看出整个 `lcov.info` 文件中记录内容。有了这样一份记录信息就能够生成出一份可视化的测试报告，也可以上传到 [coveralls](https://coveralls.io/)，展示给大家。 那么这里需要思考的问题是，这样一份数据统计记录是怎么统计出来的呢？\n\n\n> 如果希望有些代码被忽略，不进入覆盖统计，istanbul 提供注释语法 ，查看[Ignoring code for coverage purposes](https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md)\n\n\njavascript 覆盖率统计的核心思想，是在源代码相应的位置注入设定的统计代码，当执行测试代码的时候，代码运行到注入的地方，就会执行对应的统计代码，生成覆盖率统计报告。大概步骤如下：\n\n- 第一步：生成语法树，对源代码进行语法分析，解析，然后生成语法树。\n> 生成出来的结构如下，这段代码来自 [`esprima`](http://esprima.org/)， A simple example on Node.js REPL:\n```js\n> var esprima = require('esprima');\n> var program = 'const answer = 42';\n\n> esprima.tokenize(program);\n[ { type: 'Keyword', value: 'const' },\n  { type: 'Identifier', value: 'answer' },\n  { type: 'Punctuator', value: '=' },\n  { type: 'Numeric', value: '42' } ]\n\n> esprima.parse(program);\n{ type: 'Program',\n  body:\n   [ { type: 'VariableDeclaration',\n       declarations: [Object],\n       kind: 'const' } ],\n  sourceType: 'script' }\n```\n\n- 第二步：注入统计代码，在语法树相应的位置注入统计代码，在程序执行到这个位置的时候对相应的全局变量赋值，确保执行之后能够根据全局变量知道代码的执行流程。到这里就解决了前面说的“一行如果有多个语句怎么统计？”的问题。\n- 第三步：再把注入统计代码的语法树，生成对应的 javascript 代码。\n> 以下是 [`escodegen`](https://github.com/estools/escodegen) 的一段示例代码\n```js\n// A simple example: the program\n\nescodegen.generate({\n    type: 'BinaryExpression',\n    operator: '+',\n    left: { type: 'Literal', value: 40 },\n    right: { type: 'Literal', value: 2 }\n});\n\n// produces the string '40 + 2'.\n```\n\n\n- 第四步：将生成好的 javascript 代码交给执行环境（nodejs或者浏览器）运行。\n- 第五步：执行单元测试，产生的统计信息，放到全局标量中。\n- 第六步：根据全局标量中的覆盖率信息生成特定格式的报告，这样我们就看到了 `lcov.info` 文件和 `.html` 文件。\n\n这个步骤是依据 `istanbul` 统计 javasript 的原理，其他语言的一些统计工具没有接触过，但是基本的思想应该都是大同小异的。在 javasript 对语法分析，生产语法树再还原 javasript 代码是有一些开源工具的，所以如果有兴趣的童鞋要自己实现一套代码覆盖率的功能，只需要写好注入的统计代码逻辑和运行环境的处理。\n\n\n## 总结\n\n对一个持续集成的项目来说，单元测试非常重要，同时最好具有较高的测试覆盖率。再次强调测试覆盖率一种发现未被测试覆盖的代码的手段，它不是一个考核质量的目标。\n\n另外，我们维护的开源项目 [rsuite](https://rsuitejs.com) ,是一套 React 的 UI 组件库，如果你对此感兴趣，或者使用中遇到任何问题，可以联系我们 [Discord: join chat](https://discord.gg/GmPXTH3)\n\n\n> 本文作者：[郭小铭](https://github.com/simonguo)","source":"_posts/test-coverage.md","raw":"---\ntitle: 代码测试覆盖率分析\ndate: 2017-08-20\ntag:\n- 前端\n- 测试\n- test\n- coverage\n---\n\n## 背景\n\n最近我们前端团队在重构大量的 UI 组件，为了保证代码质量，我要求团队中的成员必须编写单元测试，并且测试覆盖率达到 80% 以上。那么问题来了，为什么是 80% 的覆盖率？ 这是一个硬性的考核指标吗？\n\n> 这里所说的测试覆盖率，是指的是开发人员写的单元测试的覆盖率，不是测试人员的功能测试的覆盖率。\n\n\n## 那些地方需要写单元测试？\n\n为什么需要写单元测试就不再阐述，我相信大家都知道，特别是在持续集成过程中的重要性。但是，从我的经历来看，当前的软件市场环境中，不管是用的瀑布模式，还是螺旋模式，还是敏捷模式，很多软件没有写单元测试。\n\n我也是一个程序员，每天需要写一些的业务代码，对于写单元测试来说，确实需要我很多时间和精力，因为它也需要设计用例和一些体力活。所以在我们的一些项目中也存在很多功能没有单元测试，主要原因有以下几个点:\n\n- 业务逻辑更新太快，单元测试不可复用；\n- 业务时间紧急，迭代周期时间短，没有时间写单元测试；\n- UI 上很多测试，通过单元测试代码无法覆盖。\n\n在《软件测试》一书中讲测试的原则，第一条就是：“完全测试程序是不可能的”。所以对于以上部分需不需测试，取决于你软件性质，时间和团队。但是对于满足以下几点代码我建议需要编写单元测试：\n\n- 和安全相关的代码逻辑；\n- 核心的功能模块，函数；\n- 短期不会发生变化的 UI 组件；\n- 提供外部调用的接口。\n\n<!-- more -->\n\n## 测试覆盖率报告\n\n\n如果完全通过测试覆盖作为质量标准是存在问题的，我们在检查一个测试覆盖了的时候往往会通过一些工具去检查，程序员是可以通过一些方式让数字看上去漂亮，但是这没有意义。我们应该把它作为一种发现未被测试覆盖的代码的手段，同时也是一种学习的手段，为什么这段代码没有覆盖到？ 如果这个函数的参数发生了变化会怎么样？ 这段代码逻辑怎么这么复杂？\n\n通过分析未被测试覆盖的代码，找到是设计问题，还功能理解有问题，还是说着就是一段废代码，它可以帮助开发者能够更好的理解背后的事情，可以检查程序中的废代码，然后在以后的设计中做很好的抽象，做可测试的代码。\n\n\n各种开发语言都有对应的测试框架，可以生成测试报告，在本文中我以前端的 javascript 为示例， `karma` + `istanbul` 工具生成报告。\n\n- `karma` 是一个测试框架；\n- `istanbul` 是 JavaScript 程序的代码覆盖率工具。\n\n怎么生成测试报告这里就不讲，有很多教程，也可以查看官方文档 [istanbul](https://github.com/gotwarlost/istanbul)。这里我们先来看一下生成出来的测试报告。 以下是 [rsuite](https://github.com/rsuite/rsuite) `src/utils` 目录下文件的测试报告, 这是打开的一个生成 `html` 格式的测试报告：\n\n{% asset_img 1.png RSUITE 测试覆盖率 %}\n\n从图中我们可以看到它有四个指标：\n- Statements: 语句覆盖率，执行到每个语句；\n- Branches: 分支覆盖率，执行到每个if代码块；\n- Functions: 函数覆盖率，调用到程式中的每一个函数；\n- Lines: 行覆盖率, 执行到程序中的每一行。\n\n> 每一个指标都列出了覆盖的比例和数量情况，其中 `Statements` 与 `Lines` 比例和数量是一致的，那它们有什么不同呢？\n> 在代码中往往存在一些书写不规范的情况，比如一行多个语句，这个时候它们统计的覆盖率就会有差异。 这里又有一个值得思考的问题就是，代码覆盖率工具是怎么统计一行多个语句这种代码的？ 后面讲到统计原理的时候会讲到。\n\n\n\n另外，我们通过图中可以看出  `decorate.js` 这个文件相对来说测试覆盖率较低，我们进入再具体分析一下，在那些地方没有覆盖到：\n\n{% asset_img 2.png decorate.js 测试覆盖率 %}\n\n从图中我们可以看到红色部分和黄色, 都是在测试用例中没有覆盖到的地方:\n\n- `getProps` 函数，该函数式 `export` 出去的一个函数，但是在测试用例中没有覆盖到；\n- `typeof size === 'object'` 代码块没有覆盖到；\n- `Component.propTypes={}`.. 这里黄色部分，是一个默认值设置，说明这个默认值一直没有被使用过；\n\n\n在图中左侧，显示行号的地方有一个 `12x`、`9x`、`4x`，这个代表了该行语句被执行的次数， 通过这个清晰的报告，我们可以在代码中看出那些函数，那些代码块没有被执行，从而去分析原因，修正测试用例，完善代码逻辑，提高质量。\n\n## 生成测试报表原理\n\n我先来看一下 `istanbul` 生成的测试报告中有个 `lcov.info` 文件, 这里我只贴出关于 `decorate.js` 文件这部分的内容:\n\n```\nSF:/Users/simonguo/workspace/rsuite/src/utils/decorate.js\nFN:25,getClassNames\nFN:39,getProps\nFN:41,(anonymous_2)\nFN:50,decorate\nFN:51,(anonymous_4)\nFNF:5\nFNH:3\nFNDA:237,getClassNames\nFNDA:0,getProps\nFNDA:0,(anonymous_2)\nFNDA:12,decorate\nFNDA:12,(anonymous_4)\nDA:4,1\nDA:11,1\nDA:18,1\nDA:27,237\nDA:28,237\nDA:30,237\nDA:32,237\nDA:40,0\nDA:41,0\nDA:42,0\nDA:44,0\nDA:51,12\nDA:52,12\nDA:53,12\nDA:54,12\nDA:56,12\n...\n```\n`FN` 代表函数，\n`25`,`39`,`41`,`50`,`51` 这些行分布对应源代码中的函数开始的行号，\n`FNF:5` 代表一共有5个函数\n`FNH:3` 其实 3 个函数被测试所覆盖，\n`FNDA:237,getClassNames` 代表了 `getClassNames` 这个函数被执行了 237 次。\n...\n\n等等，在文件中详细记载了行号，以及代码的执行情况，大家可以再对照前面的那张“测试覆盖率”图片进行分析，可以详细的看出整个 `lcov.info` 文件中记录内容。有了这样一份记录信息就能够生成出一份可视化的测试报告，也可以上传到 [coveralls](https://coveralls.io/)，展示给大家。 那么这里需要思考的问题是，这样一份数据统计记录是怎么统计出来的呢？\n\n\n> 如果希望有些代码被忽略，不进入覆盖统计，istanbul 提供注释语法 ，查看[Ignoring code for coverage purposes](https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md)\n\n\njavascript 覆盖率统计的核心思想，是在源代码相应的位置注入设定的统计代码，当执行测试代码的时候，代码运行到注入的地方，就会执行对应的统计代码，生成覆盖率统计报告。大概步骤如下：\n\n- 第一步：生成语法树，对源代码进行语法分析，解析，然后生成语法树。\n> 生成出来的结构如下，这段代码来自 [`esprima`](http://esprima.org/)， A simple example on Node.js REPL:\n```js\n> var esprima = require('esprima');\n> var program = 'const answer = 42';\n\n> esprima.tokenize(program);\n[ { type: 'Keyword', value: 'const' },\n  { type: 'Identifier', value: 'answer' },\n  { type: 'Punctuator', value: '=' },\n  { type: 'Numeric', value: '42' } ]\n\n> esprima.parse(program);\n{ type: 'Program',\n  body:\n   [ { type: 'VariableDeclaration',\n       declarations: [Object],\n       kind: 'const' } ],\n  sourceType: 'script' }\n```\n\n- 第二步：注入统计代码，在语法树相应的位置注入统计代码，在程序执行到这个位置的时候对相应的全局变量赋值，确保执行之后能够根据全局变量知道代码的执行流程。到这里就解决了前面说的“一行如果有多个语句怎么统计？”的问题。\n- 第三步：再把注入统计代码的语法树，生成对应的 javascript 代码。\n> 以下是 [`escodegen`](https://github.com/estools/escodegen) 的一段示例代码\n```js\n// A simple example: the program\n\nescodegen.generate({\n    type: 'BinaryExpression',\n    operator: '+',\n    left: { type: 'Literal', value: 40 },\n    right: { type: 'Literal', value: 2 }\n});\n\n// produces the string '40 + 2'.\n```\n\n\n- 第四步：将生成好的 javascript 代码交给执行环境（nodejs或者浏览器）运行。\n- 第五步：执行单元测试，产生的统计信息，放到全局标量中。\n- 第六步：根据全局标量中的覆盖率信息生成特定格式的报告，这样我们就看到了 `lcov.info` 文件和 `.html` 文件。\n\n这个步骤是依据 `istanbul` 统计 javasript 的原理，其他语言的一些统计工具没有接触过，但是基本的思想应该都是大同小异的。在 javasript 对语法分析，生产语法树再还原 javasript 代码是有一些开源工具的，所以如果有兴趣的童鞋要自己实现一套代码覆盖率的功能，只需要写好注入的统计代码逻辑和运行环境的处理。\n\n\n## 总结\n\n对一个持续集成的项目来说，单元测试非常重要，同时最好具有较高的测试覆盖率。再次强调测试覆盖率一种发现未被测试覆盖的代码的手段，它不是一个考核质量的目标。\n\n另外，我们维护的开源项目 [rsuite](https://rsuitejs.com) ,是一套 React 的 UI 组件库，如果你对此感兴趣，或者使用中遇到任何问题，可以联系我们 [Discord: join chat](https://discord.gg/GmPXTH3)\n\n\n> 本文作者：[郭小铭](https://github.com/simonguo)","slug":"test-coverage","published":1,"updated":"2017-08-20T06:24:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctsf1000am079d2hw5mj4","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近我们前端团队在重构大量的 UI 组件，为了保证代码质量，我要求团队中的成员必须编写单元测试，并且测试覆盖率达到 80% 以上。那么问题来了，为什么是 80% 的覆盖率？ 这是一个硬性的考核指标吗？</p>\n<blockquote>\n<p>这里所说的测试覆盖率，是指的是开发人员写的单元测试的覆盖率，不是测试人员的功能测试的覆盖率。</p>\n</blockquote>\n<h2 id=\"那些地方需要写单元测试？\"><a href=\"#那些地方需要写单元测试？\" class=\"headerlink\" title=\"那些地方需要写单元测试？\"></a>那些地方需要写单元测试？</h2><p>为什么需要写单元测试就不再阐述，我相信大家都知道，特别是在持续集成过程中的重要性。但是，从我的经历来看，当前的软件市场环境中，不管是用的瀑布模式，还是螺旋模式，还是敏捷模式，很多软件没有写单元测试。</p>\n<p>我也是一个程序员，每天需要写一些的业务代码，对于写单元测试来说，确实需要我很多时间和精力，因为它也需要设计用例和一些体力活。所以在我们的一些项目中也存在很多功能没有单元测试，主要原因有以下几个点:</p>\n<ul>\n<li>业务逻辑更新太快，单元测试不可复用；</li>\n<li>业务时间紧急，迭代周期时间短，没有时间写单元测试；</li>\n<li>UI 上很多测试，通过单元测试代码无法覆盖。</li>\n</ul>\n<p>在《软件测试》一书中讲测试的原则，第一条就是：“完全测试程序是不可能的”。所以对于以上部分需不需测试，取决于你软件性质，时间和团队。但是对于满足以下几点代码我建议需要编写单元测试：</p>\n<ul>\n<li>和安全相关的代码逻辑；</li>\n<li>核心的功能模块，函数；</li>\n<li>短期不会发生变化的 UI 组件；</li>\n<li>提供外部调用的接口。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"测试覆盖率报告\"><a href=\"#测试覆盖率报告\" class=\"headerlink\" title=\"测试覆盖率报告\"></a>测试覆盖率报告</h2><p>如果完全通过测试覆盖作为质量标准是存在问题的，我们在检查一个测试覆盖了的时候往往会通过一些工具去检查，程序员是可以通过一些方式让数字看上去漂亮，但是这没有意义。我们应该把它作为一种发现未被测试覆盖的代码的手段，同时也是一种学习的手段，为什么这段代码没有覆盖到？ 如果这个函数的参数发生了变化会怎么样？ 这段代码逻辑怎么这么复杂？</p>\n<p>通过分析未被测试覆盖的代码，找到是设计问题，还功能理解有问题，还是说着就是一段废代码，它可以帮助开发者能够更好的理解背后的事情，可以检查程序中的废代码，然后在以后的设计中做很好的抽象，做可测试的代码。</p>\n<p>各种开发语言都有对应的测试框架，可以生成测试报告，在本文中我以前端的 javascript 为示例， <code>karma</code> + <code>istanbul</code> 工具生成报告。</p>\n<ul>\n<li><code>karma</code> 是一个测试框架；</li>\n<li><code>istanbul</code> 是 JavaScript 程序的代码覆盖率工具。</li>\n</ul>\n<p>怎么生成测试报告这里就不讲，有很多教程，也可以查看官方文档 <a href=\"https://github.com/gotwarlost/istanbul\" target=\"_blank\" rel=\"external\">istanbul</a>。这里我们先来看一下生成出来的测试报告。 以下是 <a href=\"https://github.com/rsuite/rsuite\" target=\"_blank\" rel=\"external\">rsuite</a> <code>src/utils</code> 目录下文件的测试报告, 这是打开的一个生成 <code>html</code> 格式的测试报告：</p>\n<img src=\"/2017/08/20/test-coverage/1.png\" alt=\"RSUITE 测试覆盖率\" title=\"RSUITE 测试覆盖率\">\n<p>从图中我们可以看到它有四个指标：</p>\n<ul>\n<li>Statements: 语句覆盖率，执行到每个语句；</li>\n<li>Branches: 分支覆盖率，执行到每个if代码块；</li>\n<li>Functions: 函数覆盖率，调用到程式中的每一个函数；</li>\n<li>Lines: 行覆盖率, 执行到程序中的每一行。</li>\n</ul>\n<blockquote>\n<p>每一个指标都列出了覆盖的比例和数量情况，其中 <code>Statements</code> 与 <code>Lines</code> 比例和数量是一致的，那它们有什么不同呢？<br>在代码中往往存在一些书写不规范的情况，比如一行多个语句，这个时候它们统计的覆盖率就会有差异。 这里又有一个值得思考的问题就是，代码覆盖率工具是怎么统计一行多个语句这种代码的？ 后面讲到统计原理的时候会讲到。</p>\n</blockquote>\n<p>另外，我们通过图中可以看出  <code>decorate.js</code> 这个文件相对来说测试覆盖率较低，我们进入再具体分析一下，在那些地方没有覆盖到：</p>\n<img src=\"/2017/08/20/test-coverage/2.png\" alt=\"decorate.js 测试覆盖率\" title=\"decorate.js 测试覆盖率\">\n<p>从图中我们可以看到红色部分和黄色, 都是在测试用例中没有覆盖到的地方:</p>\n<ul>\n<li><code>getProps</code> 函数，该函数式 <code>export</code> 出去的一个函数，但是在测试用例中没有覆盖到；</li>\n<li><code>typeof size === &#39;object&#39;</code> 代码块没有覆盖到；</li>\n<li><code>Component.propTypes={}</code>.. 这里黄色部分，是一个默认值设置，说明这个默认值一直没有被使用过；</li>\n</ul>\n<p>在图中左侧，显示行号的地方有一个 <code>12x</code>、<code>9x</code>、<code>4x</code>，这个代表了该行语句被执行的次数， 通过这个清晰的报告，我们可以在代码中看出那些函数，那些代码块没有被执行，从而去分析原因，修正测试用例，完善代码逻辑，提高质量。</p>\n<h2 id=\"生成测试报表原理\"><a href=\"#生成测试报表原理\" class=\"headerlink\" title=\"生成测试报表原理\"></a>生成测试报表原理</h2><p>我先来看一下 <code>istanbul</code> 生成的测试报告中有个 <code>lcov.info</code> 文件, 这里我只贴出关于 <code>decorate.js</code> 文件这部分的内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">SF:/Users/simonguo/workspace/rsuite/src/utils/decorate.js</div><div class=\"line\">FN:25,getClassNames</div><div class=\"line\">FN:39,getProps</div><div class=\"line\">FN:41,(anonymous_2)</div><div class=\"line\">FN:50,decorate</div><div class=\"line\">FN:51,(anonymous_4)</div><div class=\"line\">FNF:5</div><div class=\"line\">FNH:3</div><div class=\"line\">FNDA:237,getClassNames</div><div class=\"line\">FNDA:0,getProps</div><div class=\"line\">FNDA:0,(anonymous_2)</div><div class=\"line\">FNDA:12,decorate</div><div class=\"line\">FNDA:12,(anonymous_4)</div><div class=\"line\">DA:4,1</div><div class=\"line\">DA:11,1</div><div class=\"line\">DA:18,1</div><div class=\"line\">DA:27,237</div><div class=\"line\">DA:28,237</div><div class=\"line\">DA:30,237</div><div class=\"line\">DA:32,237</div><div class=\"line\">DA:40,0</div><div class=\"line\">DA:41,0</div><div class=\"line\">DA:42,0</div><div class=\"line\">DA:44,0</div><div class=\"line\">DA:51,12</div><div class=\"line\">DA:52,12</div><div class=\"line\">DA:53,12</div><div class=\"line\">DA:54,12</div><div class=\"line\">DA:56,12</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p><code>FN</code> 代表函数，<br><code>25</code>,<code>39</code>,<code>41</code>,<code>50</code>,<code>51</code> 这些行分布对应源代码中的函数开始的行号，<br><code>FNF:5</code> 代表一共有5个函数<br><code>FNH:3</code> 其实 3 个函数被测试所覆盖，<br><code>FNDA:237,getClassNames</code> 代表了 <code>getClassNames</code> 这个函数被执行了 237 次。<br>…</p>\n<p>等等，在文件中详细记载了行号，以及代码的执行情况，大家可以再对照前面的那张“测试覆盖率”图片进行分析，可以详细的看出整个 <code>lcov.info</code> 文件中记录内容。有了这样一份记录信息就能够生成出一份可视化的测试报告，也可以上传到 <a href=\"https://coveralls.io/\" target=\"_blank\" rel=\"external\">coveralls</a>，展示给大家。 那么这里需要思考的问题是，这样一份数据统计记录是怎么统计出来的呢？</p>\n<blockquote>\n<p>如果希望有些代码被忽略，不进入覆盖统计，istanbul 提供注释语法 ，查看<a href=\"https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md\" target=\"_blank\" rel=\"external\">Ignoring code for coverage purposes</a></p>\n</blockquote>\n<p>javascript 覆盖率统计的核心思想，是在源代码相应的位置注入设定的统计代码，当执行测试代码的时候，代码运行到注入的地方，就会执行对应的统计代码，生成覆盖率统计报告。大概步骤如下：</p>\n<ul>\n<li><p>第一步：生成语法树，对源代码进行语法分析，解析，然后生成语法树。</p>\n<blockquote>\n<p>生成出来的结构如下，这段代码来自 <a href=\"http://esprima.org/\" target=\"_blank\" rel=\"external\"><code>esprima</code></a>， A simple example on Node.js REPL:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> esprima = <span class=\"built_in\">require</span>(<span class=\"string\">'esprima'</span>);</div><div class=\"line\">&gt; <span class=\"keyword\">var</span> program = <span class=\"string\">'const answer = 42'</span>;</div><div class=\"line\"></div><div class=\"line\">&gt; esprima.tokenize(program);</div><div class=\"line\">[ &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Keyword'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'const'</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Identifier'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'answer'</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Punctuator'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'='</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Numeric'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'42'</span> &#125; ]</div><div class=\"line\"></div><div class=\"line\">&gt; esprima.parse(program);</div><div class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'Program'</span>,</div><div class=\"line\">  body:</div><div class=\"line\">   [ &#123; <span class=\"attr\">type</span>: <span class=\"string\">'VariableDeclaration'</span>,</div><div class=\"line\">       declarations: [<span class=\"built_in\">Object</span>],</div><div class=\"line\">       kind: <span class=\"string\">'const'</span> &#125; ],</div><div class=\"line\">  sourceType: <span class=\"string\">'script'</span> &#125;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>第二步：注入统计代码，在语法树相应的位置注入统计代码，在程序执行到这个位置的时候对相应的全局变量赋值，确保执行之后能够根据全局变量知道代码的执行流程。到这里就解决了前面说的“一行如果有多个语句怎么统计？”的问题。</p>\n</li>\n<li><p>第三步：再把注入统计代码的语法树，生成对应的 javascript 代码。</p>\n<blockquote>\n<p>以下是 <a href=\"https://github.com/estools/escodegen\" target=\"_blank\" rel=\"external\"><code>escodegen</code></a> 的一段示例代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// A simple example: the program</span></div><div class=\"line\"></div><div class=\"line\">escodegen.generate(&#123;</div><div class=\"line\">    type: <span class=\"string\">'BinaryExpression'</span>,</div><div class=\"line\">    operator: <span class=\"string\">'+'</span>,</div><div class=\"line\">    left: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Literal'</span>, <span class=\"attr\">value</span>: <span class=\"number\">40</span> &#125;,</div><div class=\"line\">    right: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Literal'</span>, <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// produces the string '40 + 2'.</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>第四步：将生成好的 javascript 代码交给执行环境（nodejs或者浏览器）运行。</p>\n</li>\n<li>第五步：执行单元测试，产生的统计信息，放到全局标量中。</li>\n<li>第六步：根据全局标量中的覆盖率信息生成特定格式的报告，这样我们就看到了 <code>lcov.info</code> 文件和 <code>.html</code> 文件。</li>\n</ul>\n<p>这个步骤是依据 <code>istanbul</code> 统计 javasript 的原理，其他语言的一些统计工具没有接触过，但是基本的思想应该都是大同小异的。在 javasript 对语法分析，生产语法树再还原 javasript 代码是有一些开源工具的，所以如果有兴趣的童鞋要自己实现一套代码覆盖率的功能，只需要写好注入的统计代码逻辑和运行环境的处理。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对一个持续集成的项目来说，单元测试非常重要，同时最好具有较高的测试覆盖率。再次强调测试覆盖率一种发现未被测试覆盖的代码的手段，它不是一个考核质量的目标。</p>\n<p>另外，我们维护的开源项目 <a href=\"https://rsuitejs.com\" target=\"_blank\" rel=\"external\">rsuite</a> ,是一套 React 的 UI 组件库，如果你对此感兴趣，或者使用中遇到任何问题，可以联系我们 <a href=\"https://discord.gg/GmPXTH3\" target=\"_blank\" rel=\"external\">Discord: join chat</a></p>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/simonguo\" target=\"_blank\" rel=\"external\">郭小铭</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近我们前端团队在重构大量的 UI 组件，为了保证代码质量，我要求团队中的成员必须编写单元测试，并且测试覆盖率达到 80% 以上。那么问题来了，为什么是 80% 的覆盖率？ 这是一个硬性的考核指标吗？</p>\n<blockquote>\n<p>这里所说的测试覆盖率，是指的是开发人员写的单元测试的覆盖率，不是测试人员的功能测试的覆盖率。</p>\n</blockquote>\n<h2 id=\"那些地方需要写单元测试？\"><a href=\"#那些地方需要写单元测试？\" class=\"headerlink\" title=\"那些地方需要写单元测试？\"></a>那些地方需要写单元测试？</h2><p>为什么需要写单元测试就不再阐述，我相信大家都知道，特别是在持续集成过程中的重要性。但是，从我的经历来看，当前的软件市场环境中，不管是用的瀑布模式，还是螺旋模式，还是敏捷模式，很多软件没有写单元测试。</p>\n<p>我也是一个程序员，每天需要写一些的业务代码，对于写单元测试来说，确实需要我很多时间和精力，因为它也需要设计用例和一些体力活。所以在我们的一些项目中也存在很多功能没有单元测试，主要原因有以下几个点:</p>\n<ul>\n<li>业务逻辑更新太快，单元测试不可复用；</li>\n<li>业务时间紧急，迭代周期时间短，没有时间写单元测试；</li>\n<li>UI 上很多测试，通过单元测试代码无法覆盖。</li>\n</ul>\n<p>在《软件测试》一书中讲测试的原则，第一条就是：“完全测试程序是不可能的”。所以对于以上部分需不需测试，取决于你软件性质，时间和团队。但是对于满足以下几点代码我建议需要编写单元测试：</p>\n<ul>\n<li>和安全相关的代码逻辑；</li>\n<li>核心的功能模块，函数；</li>\n<li>短期不会发生变化的 UI 组件；</li>\n<li>提供外部调用的接口。</li>\n</ul>","more":"<h2 id=\"测试覆盖率报告\"><a href=\"#测试覆盖率报告\" class=\"headerlink\" title=\"测试覆盖率报告\"></a>测试覆盖率报告</h2><p>如果完全通过测试覆盖作为质量标准是存在问题的，我们在检查一个测试覆盖了的时候往往会通过一些工具去检查，程序员是可以通过一些方式让数字看上去漂亮，但是这没有意义。我们应该把它作为一种发现未被测试覆盖的代码的手段，同时也是一种学习的手段，为什么这段代码没有覆盖到？ 如果这个函数的参数发生了变化会怎么样？ 这段代码逻辑怎么这么复杂？</p>\n<p>通过分析未被测试覆盖的代码，找到是设计问题，还功能理解有问题，还是说着就是一段废代码，它可以帮助开发者能够更好的理解背后的事情，可以检查程序中的废代码，然后在以后的设计中做很好的抽象，做可测试的代码。</p>\n<p>各种开发语言都有对应的测试框架，可以生成测试报告，在本文中我以前端的 javascript 为示例， <code>karma</code> + <code>istanbul</code> 工具生成报告。</p>\n<ul>\n<li><code>karma</code> 是一个测试框架；</li>\n<li><code>istanbul</code> 是 JavaScript 程序的代码覆盖率工具。</li>\n</ul>\n<p>怎么生成测试报告这里就不讲，有很多教程，也可以查看官方文档 <a href=\"https://github.com/gotwarlost/istanbul\" target=\"_blank\" rel=\"external\">istanbul</a>。这里我们先来看一下生成出来的测试报告。 以下是 <a href=\"https://github.com/rsuite/rsuite\" target=\"_blank\" rel=\"external\">rsuite</a> <code>src/utils</code> 目录下文件的测试报告, 这是打开的一个生成 <code>html</code> 格式的测试报告：</p>\n<img src=\"/2017/08/20/test-coverage/1.png\" alt=\"RSUITE 测试覆盖率\" title=\"RSUITE 测试覆盖率\">\n<p>从图中我们可以看到它有四个指标：</p>\n<ul>\n<li>Statements: 语句覆盖率，执行到每个语句；</li>\n<li>Branches: 分支覆盖率，执行到每个if代码块；</li>\n<li>Functions: 函数覆盖率，调用到程式中的每一个函数；</li>\n<li>Lines: 行覆盖率, 执行到程序中的每一行。</li>\n</ul>\n<blockquote>\n<p>每一个指标都列出了覆盖的比例和数量情况，其中 <code>Statements</code> 与 <code>Lines</code> 比例和数量是一致的，那它们有什么不同呢？<br>在代码中往往存在一些书写不规范的情况，比如一行多个语句，这个时候它们统计的覆盖率就会有差异。 这里又有一个值得思考的问题就是，代码覆盖率工具是怎么统计一行多个语句这种代码的？ 后面讲到统计原理的时候会讲到。</p>\n</blockquote>\n<p>另外，我们通过图中可以看出  <code>decorate.js</code> 这个文件相对来说测试覆盖率较低，我们进入再具体分析一下，在那些地方没有覆盖到：</p>\n<img src=\"/2017/08/20/test-coverage/2.png\" alt=\"decorate.js 测试覆盖率\" title=\"decorate.js 测试覆盖率\">\n<p>从图中我们可以看到红色部分和黄色, 都是在测试用例中没有覆盖到的地方:</p>\n<ul>\n<li><code>getProps</code> 函数，该函数式 <code>export</code> 出去的一个函数，但是在测试用例中没有覆盖到；</li>\n<li><code>typeof size === &#39;object&#39;</code> 代码块没有覆盖到；</li>\n<li><code>Component.propTypes={}</code>.. 这里黄色部分，是一个默认值设置，说明这个默认值一直没有被使用过；</li>\n</ul>\n<p>在图中左侧，显示行号的地方有一个 <code>12x</code>、<code>9x</code>、<code>4x</code>，这个代表了该行语句被执行的次数， 通过这个清晰的报告，我们可以在代码中看出那些函数，那些代码块没有被执行，从而去分析原因，修正测试用例，完善代码逻辑，提高质量。</p>\n<h2 id=\"生成测试报表原理\"><a href=\"#生成测试报表原理\" class=\"headerlink\" title=\"生成测试报表原理\"></a>生成测试报表原理</h2><p>我先来看一下 <code>istanbul</code> 生成的测试报告中有个 <code>lcov.info</code> 文件, 这里我只贴出关于 <code>decorate.js</code> 文件这部分的内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">SF:/Users/simonguo/workspace/rsuite/src/utils/decorate.js</div><div class=\"line\">FN:25,getClassNames</div><div class=\"line\">FN:39,getProps</div><div class=\"line\">FN:41,(anonymous_2)</div><div class=\"line\">FN:50,decorate</div><div class=\"line\">FN:51,(anonymous_4)</div><div class=\"line\">FNF:5</div><div class=\"line\">FNH:3</div><div class=\"line\">FNDA:237,getClassNames</div><div class=\"line\">FNDA:0,getProps</div><div class=\"line\">FNDA:0,(anonymous_2)</div><div class=\"line\">FNDA:12,decorate</div><div class=\"line\">FNDA:12,(anonymous_4)</div><div class=\"line\">DA:4,1</div><div class=\"line\">DA:11,1</div><div class=\"line\">DA:18,1</div><div class=\"line\">DA:27,237</div><div class=\"line\">DA:28,237</div><div class=\"line\">DA:30,237</div><div class=\"line\">DA:32,237</div><div class=\"line\">DA:40,0</div><div class=\"line\">DA:41,0</div><div class=\"line\">DA:42,0</div><div class=\"line\">DA:44,0</div><div class=\"line\">DA:51,12</div><div class=\"line\">DA:52,12</div><div class=\"line\">DA:53,12</div><div class=\"line\">DA:54,12</div><div class=\"line\">DA:56,12</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p><code>FN</code> 代表函数，<br><code>25</code>,<code>39</code>,<code>41</code>,<code>50</code>,<code>51</code> 这些行分布对应源代码中的函数开始的行号，<br><code>FNF:5</code> 代表一共有5个函数<br><code>FNH:3</code> 其实 3 个函数被测试所覆盖，<br><code>FNDA:237,getClassNames</code> 代表了 <code>getClassNames</code> 这个函数被执行了 237 次。<br>…</p>\n<p>等等，在文件中详细记载了行号，以及代码的执行情况，大家可以再对照前面的那张“测试覆盖率”图片进行分析，可以详细的看出整个 <code>lcov.info</code> 文件中记录内容。有了这样一份记录信息就能够生成出一份可视化的测试报告，也可以上传到 <a href=\"https://coveralls.io/\" target=\"_blank\" rel=\"external\">coveralls</a>，展示给大家。 那么这里需要思考的问题是，这样一份数据统计记录是怎么统计出来的呢？</p>\n<blockquote>\n<p>如果希望有些代码被忽略，不进入覆盖统计，istanbul 提供注释语法 ，查看<a href=\"https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md\" target=\"_blank\" rel=\"external\">Ignoring code for coverage purposes</a></p>\n</blockquote>\n<p>javascript 覆盖率统计的核心思想，是在源代码相应的位置注入设定的统计代码，当执行测试代码的时候，代码运行到注入的地方，就会执行对应的统计代码，生成覆盖率统计报告。大概步骤如下：</p>\n<ul>\n<li><p>第一步：生成语法树，对源代码进行语法分析，解析，然后生成语法树。</p>\n<blockquote>\n<p>生成出来的结构如下，这段代码来自 <a href=\"http://esprima.org/\" target=\"_blank\" rel=\"external\"><code>esprima</code></a>， A simple example on Node.js REPL:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> esprima = <span class=\"built_in\">require</span>(<span class=\"string\">'esprima'</span>);</div><div class=\"line\">&gt; <span class=\"keyword\">var</span> program = <span class=\"string\">'const answer = 42'</span>;</div><div class=\"line\"></div><div class=\"line\">&gt; esprima.tokenize(program);</div><div class=\"line\">[ &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Keyword'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'const'</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Identifier'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'answer'</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Punctuator'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'='</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Numeric'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'42'</span> &#125; ]</div><div class=\"line\"></div><div class=\"line\">&gt; esprima.parse(program);</div><div class=\"line\">&#123; <span class=\"attr\">type</span>: <span class=\"string\">'Program'</span>,</div><div class=\"line\">  body:</div><div class=\"line\">   [ &#123; <span class=\"attr\">type</span>: <span class=\"string\">'VariableDeclaration'</span>,</div><div class=\"line\">       declarations: [<span class=\"built_in\">Object</span>],</div><div class=\"line\">       kind: <span class=\"string\">'const'</span> &#125; ],</div><div class=\"line\">  sourceType: <span class=\"string\">'script'</span> &#125;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>第二步：注入统计代码，在语法树相应的位置注入统计代码，在程序执行到这个位置的时候对相应的全局变量赋值，确保执行之后能够根据全局变量知道代码的执行流程。到这里就解决了前面说的“一行如果有多个语句怎么统计？”的问题。</p>\n</li>\n<li><p>第三步：再把注入统计代码的语法树，生成对应的 javascript 代码。</p>\n<blockquote>\n<p>以下是 <a href=\"https://github.com/estools/escodegen\" target=\"_blank\" rel=\"external\"><code>escodegen</code></a> 的一段示例代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// A simple example: the program</span></div><div class=\"line\"></div><div class=\"line\">escodegen.generate(&#123;</div><div class=\"line\">    type: <span class=\"string\">'BinaryExpression'</span>,</div><div class=\"line\">    operator: <span class=\"string\">'+'</span>,</div><div class=\"line\">    left: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Literal'</span>, <span class=\"attr\">value</span>: <span class=\"number\">40</span> &#125;,</div><div class=\"line\">    right: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Literal'</span>, <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// produces the string '40 + 2'.</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>第四步：将生成好的 javascript 代码交给执行环境（nodejs或者浏览器）运行。</p>\n</li>\n<li>第五步：执行单元测试，产生的统计信息，放到全局标量中。</li>\n<li>第六步：根据全局标量中的覆盖率信息生成特定格式的报告，这样我们就看到了 <code>lcov.info</code> 文件和 <code>.html</code> 文件。</li>\n</ul>\n<p>这个步骤是依据 <code>istanbul</code> 统计 javasript 的原理，其他语言的一些统计工具没有接触过，但是基本的思想应该都是大同小异的。在 javasript 对语法分析，生产语法树再还原 javasript 代码是有一些开源工具的，所以如果有兴趣的童鞋要自己实现一套代码覆盖率的功能，只需要写好注入的统计代码逻辑和运行环境的处理。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对一个持续集成的项目来说，单元测试非常重要，同时最好具有较高的测试覆盖率。再次强调测试覆盖率一种发现未被测试覆盖的代码的手段，它不是一个考核质量的目标。</p>\n<p>另外，我们维护的开源项目 <a href=\"https://rsuitejs.com\" target=\"_blank\" rel=\"external\">rsuite</a> ,是一套 React 的 UI 组件库，如果你对此感兴趣，或者使用中遇到任何问题，可以联系我们 <a href=\"https://discord.gg/GmPXTH3\" target=\"_blank\" rel=\"external\">Discord: join chat</a></p>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/simonguo\" target=\"_blank\" rel=\"external\">郭小铭</a></p>\n</blockquote>"},{"title":"React 项目开发中的常见问题","date":"2017-07-20T16:00:00.000Z","_content":"\n## React 中, 在 `Controlled`(受控制)的文本框中输入中文 `onChange` 会触发多次\n\n[Issues](https://github.com/facebook/react/issues/3926)\n\n通过输入法输入中文,日文，不管哪种一种用拼音的、笔划的，只要按下键盘的动作都会触发文本框的 `change` 事件。 但是 `React` 中的受控组件都通过触发 `change` 事件后得到的值再去更新组件的`value`, 这样不停的触发 `change`，导致 `value` 一直在更新，组件就一直在 render,  可能会造成组件运行逻辑问题，输入框内出现很多字符，而且中文输入不进去。\n\n在 DOM events 中另外有 3 个事件可以辅助监听一段文字的输入：\n\n- compositionstart : 事件触发于一段文字的输入之前；\n- compositionupdate : 事件触发于字符被输入到一段文字的时候；\n- compositionend : 事件触发于一段文字的输入完成。\n\n我们可以通过这 3 个事件判断当前输入是否完整的输入，再触发 `onChange` 事件，这样就能解决多次触发 `onChange` 的问题。 还有一个重要的问题，虽然 `onChange` 要等一次完整输入后才触发，但是文本框上的显示需要是实时的，所以还要考虑在 `state` 中维护一个 `innerValue` 做实时更新，这样就没有问题了。\n\n> 另外这 3 个事件在各个浏览器上的兼容性不一样，所以还要考虑兼容性的问题。 具体详细的实现可以参考 [form-lib](https://github.com/rsuite/form-lib/blob/master/src/createFormControl.js)。\n\n\n\n\n## Warning: It looks like you're using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster.\n\n当 React 升级到 v15.* 以后，可能会见到这个警告，它是意思说你在生产环境中使用的是一个开发环境 minified 的代码。 \n\n那 React 它是怎么办判断你正在访问的是生产环境，而不是开发环境呢？ 它是通过 webpack 知道的，因为最终发布生产环境的代码都是通过 webpack 命令打包。如果你是在开发环境，那肯定是用 webpack-dev-server。  在生产环境中不应该包括开发中使用的所有额外代码，所以在 webpack 部署环境中需要添加以下配置：\n\n```js\nmodule.exports = {\n  //...\n  plugins:[\n    new webpack.DefinePlugin({\n      'process.env':{\n        'NODE_ENV': JSON.stringify('production')\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress:{\n        warnings: true\n      }\n    })\n  ]\n  //...\n}\n```\n参考[Make your own React production version with webpack](http://dev.topheman.com/make-your-react-production-minified-version-with-webpack/)\n\n\n\n## setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.\n\n这个警告是说，在一个已经卸载的组件上调用 `setState` 是无效的。出现这种情况一般都是异步操作造成的，比如一个异步数据请求，响应后执行 `setState` 去更新组件，但是如果在异步请求未完成前，路由发生变化，页面当前组件被卸载，这个时候异步请求没有被中止，导致等请求完成后就会执行 `setState` 试图去更新组件，就会报当前错误。\n\n解决办法很简单，一般都是在执行 `setState` 之前判断一下当前组件是否被卸载，如果没有被卸载，才执行 `setState`。在 ES6 以前可以通过 `this.isMounted()` 来判断当前组件是否装载，如下：\n\n```js\nif(this.isMounted()) { // This is bad.\n  this.setState({...});\n}\n```\n但是在 ES6 以后不能用这种方式，这是一种反模式，参考[isMounted is an Antipattern](https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html)\n\n可以利用组件的生命周期自己维护一个 `isMounted` 状态， 在 `componentDidMount` 中把 `isMounted` 设置为 `true`,\n在 `componentWillUnmount` 再将 `isMounted` 设置为 `false`。 通过 `isMounted` 变量来判断组件是否装载。\n\n\n\n## Each child in an array or iterator should have a unique `key` prop.\n\n这个警告很明确，在遍历子元素的时候，每一个子元素都应该有一个唯一的 `key`。\n\n参考官网相关说明 [lists and keys](https://facebook.github.io/react/docs/lists-and-keys.html#keys)\n\n但是这里需要注意，避免使用数组的 index 来作为属性 key 的值，推荐使用唯一 ID。\n参考 [Index as a key is an anti-pattern](https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318)\n\n```js\nconst todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n);\n```\n\n\n## 在 IE 11 控制台报错：Objects are not valid as a React child\n\n错误的全文: [error-decoder](https://facebook.github.io/react/docs/error-decoder.html?invariant=31&args%5B%5D=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&args%5B%5D=)\n\n这问题一般会在开发环境中遇到，在使用 React 15.4 以后，如果使用了 `react-hot-loader` 则必须在热加载之前加载 `babel-polyfill`, 在你的 `webpack.config.js` 中参考如下配置:\n\n```js\nentry: [\n  'babel-polyfill',\n  'react-hot-loader/patch',\n  'webpack-dev-server/client?http://127.0.0.1:3000',\n  'webpack/hot/only-dev-server',\n  path.resolve(__dirname, './scr/index')\n]\n```\n\n## 在 IE 11 控制台报错：Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\n\n如果出现这个错误是提示，在本地环境配置 `NODE_ENV=development` ，再看一下控制台是否输出了一些更详细的错误信息，参考 [Introducing React's Error Code System](https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html) 。\n\n如果这个错误只在 IE 11 浏览器环境出现，一般都是 ES6+ 的语法在IE存在兼容问题，一个比较通用的解决办法就是在项目中引入一个 `babel-polyfill`\n\n```\nnpm i —save babel-polyfill\n```\n\n在项目入口，引入 `babel-polyfill` \n\n```js\nimport 'babel-polyfill'\n```\n\n> 在 webpack 构建的时候会兼容性处理\n\n## 在 IE 11 控制台报错： Promise is undefined\n\nIE 11 不支持 Promise 对象，解决办法\n\n```\nnpm i —save es6-promise\n```\n\n在项目入口，引入`es6-promise`\n\n```js\nimport 'es6-promise/auto';\n```\n\n## 在 IE 11 浏览器上 FontIcon 图标不显示\n\n这个问题和 React 没有关系，但是这里也记录一下。\n在 IE11 会下载 .ttf/.woff 字体文件， 通过 Network 我们可以看到字体文件 `response headers` 中有一个 `Pragma：no-cache`,由于 IE 似乎有缓存和字体的问题，所有导致图标不能正常显示。所以删除 WEB 服务(Nginx..)中的 `Pragma：no-cache` 和 `Cache-Control：no-store` 就能正常访问。\n\n参考 [IE and Cache-Control](https://github.com/FortAwesome/Font-Awesome/issues/6454)\n\n## 在 React 中使用 debounce \n如果需要在 React 组件中使用 debounce 方法可以参考下面代码\n```javascript\nclass SearchBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.method = debounce(this.method,300);\n    }\n    method() {\n        //...\n    }\n    render(){\n        return(\n            <input onKeyUp={e => {\n              e.persist();\n              this.handleKeyDown(e);\n            }}/>\n        )\n    }\n}\n```\n因为 `React` 中 `SyntheticEvent` 是共用的，也就是说 `SyntheticEvent`对象将会循环使用。而每次执行完事件后，它所有的属性都将会失效（所有属性的值都被置为了 `null`）。所以在调用 `debounce` 方法前，一定要先调用 `e.persist()`来移除 `SyntheticEvent` ，并允许 `event`对象被保留下来以用于你自己的代码。\n参考文章:\n- [Perform debounce in React.js](https://stackoverflow.com/questions/23123138/perform-debounce-in-react-js#answer-28046731)\n- [React Document SyntheticEvent](https://facebook.github.io/react/docs/events.html#event-pooling)\n\n> 本文作者：[郭小铭](https://github.com/simonguo)、[杨过](https://github.com/hiyangguo)","source":"_posts/react-issue.md","raw":"---\ntitle: React 项目开发中的常见问题\ndate: 2017-07-21\ntag: \n- 前端 \n- React \n---\n\n## React 中, 在 `Controlled`(受控制)的文本框中输入中文 `onChange` 会触发多次\n\n[Issues](https://github.com/facebook/react/issues/3926)\n\n通过输入法输入中文,日文，不管哪种一种用拼音的、笔划的，只要按下键盘的动作都会触发文本框的 `change` 事件。 但是 `React` 中的受控组件都通过触发 `change` 事件后得到的值再去更新组件的`value`, 这样不停的触发 `change`，导致 `value` 一直在更新，组件就一直在 render,  可能会造成组件运行逻辑问题，输入框内出现很多字符，而且中文输入不进去。\n\n在 DOM events 中另外有 3 个事件可以辅助监听一段文字的输入：\n\n- compositionstart : 事件触发于一段文字的输入之前；\n- compositionupdate : 事件触发于字符被输入到一段文字的时候；\n- compositionend : 事件触发于一段文字的输入完成。\n\n我们可以通过这 3 个事件判断当前输入是否完整的输入，再触发 `onChange` 事件，这样就能解决多次触发 `onChange` 的问题。 还有一个重要的问题，虽然 `onChange` 要等一次完整输入后才触发，但是文本框上的显示需要是实时的，所以还要考虑在 `state` 中维护一个 `innerValue` 做实时更新，这样就没有问题了。\n\n> 另外这 3 个事件在各个浏览器上的兼容性不一样，所以还要考虑兼容性的问题。 具体详细的实现可以参考 [form-lib](https://github.com/rsuite/form-lib/blob/master/src/createFormControl.js)。\n\n\n\n\n## Warning: It looks like you're using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster.\n\n当 React 升级到 v15.* 以后，可能会见到这个警告，它是意思说你在生产环境中使用的是一个开发环境 minified 的代码。 \n\n那 React 它是怎么办判断你正在访问的是生产环境，而不是开发环境呢？ 它是通过 webpack 知道的，因为最终发布生产环境的代码都是通过 webpack 命令打包。如果你是在开发环境，那肯定是用 webpack-dev-server。  在生产环境中不应该包括开发中使用的所有额外代码，所以在 webpack 部署环境中需要添加以下配置：\n\n```js\nmodule.exports = {\n  //...\n  plugins:[\n    new webpack.DefinePlugin({\n      'process.env':{\n        'NODE_ENV': JSON.stringify('production')\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress:{\n        warnings: true\n      }\n    })\n  ]\n  //...\n}\n```\n参考[Make your own React production version with webpack](http://dev.topheman.com/make-your-react-production-minified-version-with-webpack/)\n\n\n\n## setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.\n\n这个警告是说，在一个已经卸载的组件上调用 `setState` 是无效的。出现这种情况一般都是异步操作造成的，比如一个异步数据请求，响应后执行 `setState` 去更新组件，但是如果在异步请求未完成前，路由发生变化，页面当前组件被卸载，这个时候异步请求没有被中止，导致等请求完成后就会执行 `setState` 试图去更新组件，就会报当前错误。\n\n解决办法很简单，一般都是在执行 `setState` 之前判断一下当前组件是否被卸载，如果没有被卸载，才执行 `setState`。在 ES6 以前可以通过 `this.isMounted()` 来判断当前组件是否装载，如下：\n\n```js\nif(this.isMounted()) { // This is bad.\n  this.setState({...});\n}\n```\n但是在 ES6 以后不能用这种方式，这是一种反模式，参考[isMounted is an Antipattern](https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html)\n\n可以利用组件的生命周期自己维护一个 `isMounted` 状态， 在 `componentDidMount` 中把 `isMounted` 设置为 `true`,\n在 `componentWillUnmount` 再将 `isMounted` 设置为 `false`。 通过 `isMounted` 变量来判断组件是否装载。\n\n\n\n## Each child in an array or iterator should have a unique `key` prop.\n\n这个警告很明确，在遍历子元素的时候，每一个子元素都应该有一个唯一的 `key`。\n\n参考官网相关说明 [lists and keys](https://facebook.github.io/react/docs/lists-and-keys.html#keys)\n\n但是这里需要注意，避免使用数组的 index 来作为属性 key 的值，推荐使用唯一 ID。\n参考 [Index as a key is an anti-pattern](https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318)\n\n```js\nconst todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n);\n```\n\n\n## 在 IE 11 控制台报错：Objects are not valid as a React child\n\n错误的全文: [error-decoder](https://facebook.github.io/react/docs/error-decoder.html?invariant=31&args%5B%5D=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&args%5B%5D=)\n\n这问题一般会在开发环境中遇到，在使用 React 15.4 以后，如果使用了 `react-hot-loader` 则必须在热加载之前加载 `babel-polyfill`, 在你的 `webpack.config.js` 中参考如下配置:\n\n```js\nentry: [\n  'babel-polyfill',\n  'react-hot-loader/patch',\n  'webpack-dev-server/client?http://127.0.0.1:3000',\n  'webpack/hot/only-dev-server',\n  path.resolve(__dirname, './scr/index')\n]\n```\n\n## 在 IE 11 控制台报错：Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\n\n如果出现这个错误是提示，在本地环境配置 `NODE_ENV=development` ，再看一下控制台是否输出了一些更详细的错误信息，参考 [Introducing React's Error Code System](https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html) 。\n\n如果这个错误只在 IE 11 浏览器环境出现，一般都是 ES6+ 的语法在IE存在兼容问题，一个比较通用的解决办法就是在项目中引入一个 `babel-polyfill`\n\n```\nnpm i —save babel-polyfill\n```\n\n在项目入口，引入 `babel-polyfill` \n\n```js\nimport 'babel-polyfill'\n```\n\n> 在 webpack 构建的时候会兼容性处理\n\n## 在 IE 11 控制台报错： Promise is undefined\n\nIE 11 不支持 Promise 对象，解决办法\n\n```\nnpm i —save es6-promise\n```\n\n在项目入口，引入`es6-promise`\n\n```js\nimport 'es6-promise/auto';\n```\n\n## 在 IE 11 浏览器上 FontIcon 图标不显示\n\n这个问题和 React 没有关系，但是这里也记录一下。\n在 IE11 会下载 .ttf/.woff 字体文件， 通过 Network 我们可以看到字体文件 `response headers` 中有一个 `Pragma：no-cache`,由于 IE 似乎有缓存和字体的问题，所有导致图标不能正常显示。所以删除 WEB 服务(Nginx..)中的 `Pragma：no-cache` 和 `Cache-Control：no-store` 就能正常访问。\n\n参考 [IE and Cache-Control](https://github.com/FortAwesome/Font-Awesome/issues/6454)\n\n## 在 React 中使用 debounce \n如果需要在 React 组件中使用 debounce 方法可以参考下面代码\n```javascript\nclass SearchBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.method = debounce(this.method,300);\n    }\n    method() {\n        //...\n    }\n    render(){\n        return(\n            <input onKeyUp={e => {\n              e.persist();\n              this.handleKeyDown(e);\n            }}/>\n        )\n    }\n}\n```\n因为 `React` 中 `SyntheticEvent` 是共用的，也就是说 `SyntheticEvent`对象将会循环使用。而每次执行完事件后，它所有的属性都将会失效（所有属性的值都被置为了 `null`）。所以在调用 `debounce` 方法前，一定要先调用 `e.persist()`来移除 `SyntheticEvent` ，并允许 `event`对象被保留下来以用于你自己的代码。\n参考文章:\n- [Perform debounce in React.js](https://stackoverflow.com/questions/23123138/perform-debounce-in-react-js#answer-28046731)\n- [React Document SyntheticEvent](https://facebook.github.io/react/docs/events.html#event-pooling)\n\n> 本文作者：[郭小铭](https://github.com/simonguo)、[杨过](https://github.com/hiyangguo)","slug":"react-issue","published":1,"updated":"2017-08-06T14:10:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kctsf3000cm079j1tof7ro","content":"<h2 id=\"React-中-在-Controlled-受控制-的文本框中输入中文-onChange-会触发多次\"><a href=\"#React-中-在-Controlled-受控制-的文本框中输入中文-onChange-会触发多次\" class=\"headerlink\" title=\"React 中, 在 Controlled(受控制)的文本框中输入中文 onChange 会触发多次\"></a>React 中, 在 <code>Controlled</code>(受控制)的文本框中输入中文 <code>onChange</code> 会触发多次</h2><p><a href=\"https://github.com/facebook/react/issues/3926\" target=\"_blank\" rel=\"external\">Issues</a></p>\n<p>通过输入法输入中文,日文，不管哪种一种用拼音的、笔划的，只要按下键盘的动作都会触发文本框的 <code>change</code> 事件。 但是 <code>React</code> 中的受控组件都通过触发 <code>change</code> 事件后得到的值再去更新组件的<code>value</code>, 这样不停的触发 <code>change</code>，导致 <code>value</code> 一直在更新，组件就一直在 render,  可能会造成组件运行逻辑问题，输入框内出现很多字符，而且中文输入不进去。</p>\n<p>在 DOM events 中另外有 3 个事件可以辅助监听一段文字的输入：</p>\n<ul>\n<li>compositionstart : 事件触发于一段文字的输入之前；</li>\n<li>compositionupdate : 事件触发于字符被输入到一段文字的时候；</li>\n<li>compositionend : 事件触发于一段文字的输入完成。</li>\n</ul>\n<p>我们可以通过这 3 个事件判断当前输入是否完整的输入，再触发 <code>onChange</code> 事件，这样就能解决多次触发 <code>onChange</code> 的问题。 还有一个重要的问题，虽然 <code>onChange</code> 要等一次完整输入后才触发，但是文本框上的显示需要是实时的，所以还要考虑在 <code>state</code> 中维护一个 <code>innerValue</code> 做实时更新，这样就没有问题了。</p>\n<blockquote>\n<p>另外这 3 个事件在各个浏览器上的兼容性不一样，所以还要考虑兼容性的问题。 具体详细的实现可以参考 <a href=\"https://github.com/rsuite/form-lib/blob/master/src/createFormControl.js\" target=\"_blank\" rel=\"external\">form-lib</a>。</p>\n</blockquote>\n<h2 id=\"Warning-It-looks-like-you’re-using-a-minified-copy-of-the-development-build-of-React-When-deploying-React-apps-to-production-make-sure-to-use-the-production-build-which-skips-development-warnings-and-is-faster\"><a href=\"#Warning-It-looks-like-you’re-using-a-minified-copy-of-the-development-build-of-React-When-deploying-React-apps-to-production-make-sure-to-use-the-production-build-which-skips-development-warnings-and-is-faster\" class=\"headerlink\" title=\"Warning: It looks like you’re using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster.\"></a>Warning: It looks like you’re using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster.</h2><p>当 React 升级到 v15.* 以后，可能会见到这个警告，它是意思说你在生产环境中使用的是一个开发环境 minified 的代码。 </p>\n<p>那 React 它是怎么办判断你正在访问的是生产环境，而不是开发环境呢？ 它是通过 webpack 知道的，因为最终发布生产环境的代码都是通过 webpack 命令打包。如果你是在开发环境，那肯定是用 webpack-dev-server。  在生产环境中不应该包括开发中使用的所有额外代码，所以在 webpack 部署环境中需要添加以下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">  plugins:[</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">      compress:&#123;</div><div class=\"line\">        warnings: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考<a href=\"http://dev.topheman.com/make-your-react-production-minified-version-with-webpack/\" target=\"_blank\" rel=\"external\">Make your own React production version with webpack</a></p>\n<h2 id=\"setState-…-Can-only-update-a-mounted-or-mounting-component-This-usually-means-you-called-setState-on-an-unmounted-component-This-is-a-no-op\"><a href=\"#setState-…-Can-only-update-a-mounted-or-mounting-component-This-usually-means-you-called-setState-on-an-unmounted-component-This-is-a-no-op\" class=\"headerlink\" title=\"setState(…): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.\"></a>setState(…): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.</h2><p>这个警告是说，在一个已经卸载的组件上调用 <code>setState</code> 是无效的。出现这种情况一般都是异步操作造成的，比如一个异步数据请求，响应后执行 <code>setState</code> 去更新组件，但是如果在异步请求未完成前，路由发生变化，页面当前组件被卸载，这个时候异步请求没有被中止，导致等请求完成后就会执行 <code>setState</code> 试图去更新组件，就会报当前错误。</p>\n<p>解决办法很简单，一般都是在执行 <code>setState</code> 之前判断一下当前组件是否被卸载，如果没有被卸载，才执行 <code>setState</code>。在 ES6 以前可以通过 <code>this.isMounted()</code> 来判断当前组件是否装载，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isMounted()) &#123; <span class=\"comment\">// This is bad.</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;...&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是在 ES6 以后不能用这种方式，这是一种反模式，参考<a href=\"https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\" target=\"_blank\" rel=\"external\">isMounted is an Antipattern</a></p>\n<p>可以利用组件的生命周期自己维护一个 <code>isMounted</code> 状态， 在 <code>componentDidMount</code> 中把 <code>isMounted</code> 设置为 <code>true</code>,<br>在 <code>componentWillUnmount</code> 再将 <code>isMounted</code> 设置为 <code>false</code>。 通过 <code>isMounted</code> 变量来判断组件是否装载。</p>\n<h2 id=\"Each-child-in-an-array-or-iterator-should-have-a-unique-key-prop\"><a href=\"#Each-child-in-an-array-or-iterator-should-have-a-unique-key-prop\" class=\"headerlink\" title=\"Each child in an array or iterator should have a unique key prop.\"></a>Each child in an array or iterator should have a unique <code>key</code> prop.</h2><p>这个警告很明确，在遍历子元素的时候，每一个子元素都应该有一个唯一的 <code>key</code>。</p>\n<p>参考官网相关说明 <a href=\"https://facebook.github.io/react/docs/lists-and-keys.html#keys\" target=\"_blank\" rel=\"external\">lists and keys</a></p>\n<p>但是这里需要注意，避免使用数组的 index 来作为属性 key 的值，推荐使用唯一 ID。<br>参考 <a href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\" target=\"_blank\" rel=\"external\">Index as a key is an anti-pattern</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span></div><div class=\"line\">  &lt;li key=&#123;todo.id&#125;&gt;</div><div class=\"line\">    &#123;todo.text&#125;</div><div class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\">);</span></div></pre></td></tr></table></figure>\n<h2 id=\"在-IE-11-控制台报错：Objects-are-not-valid-as-a-React-child\"><a href=\"#在-IE-11-控制台报错：Objects-are-not-valid-as-a-React-child\" class=\"headerlink\" title=\"在 IE 11 控制台报错：Objects are not valid as a React child\"></a>在 IE 11 控制台报错：Objects are not valid as a React child</h2><p>错误的全文: <a href=\"https://facebook.github.io/react/docs/error-decoder.html?invariant=31&amp;args%5B%5D=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&amp;args%5B%5D=\" target=\"_blank\" rel=\"external\">error-decoder</a></p>\n<p>这问题一般会在开发环境中遇到，在使用 React 15.4 以后，如果使用了 <code>react-hot-loader</code> 则必须在热加载之前加载 <code>babel-polyfill</code>, 在你的 <code>webpack.config.js</code> 中参考如下配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry: [</div><div class=\"line\">  <span class=\"string\">'babel-polyfill'</span>,</div><div class=\"line\">  <span class=\"string\">'react-hot-loader/patch'</span>,</div><div class=\"line\">  <span class=\"string\">'webpack-dev-server/client?http://127.0.0.1:3000'</span>,</div><div class=\"line\">  <span class=\"string\">'webpack/hot/only-dev-server'</span>,</div><div class=\"line\">  path.resolve(__dirname, <span class=\"string\">'./scr/index'</span>)</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h2 id=\"在-IE-11-控制台报错：Minified-exception-occurred-use-the-non-minified-dev-environment-for-the-full-error-message-and-additional-helpful-warnings\"><a href=\"#在-IE-11-控制台报错：Minified-exception-occurred-use-the-non-minified-dev-environment-for-the-full-error-message-and-additional-helpful-warnings\" class=\"headerlink\" title=\"在 IE 11 控制台报错：Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\"></a>在 IE 11 控制台报错：Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.</h2><p>如果出现这个错误是提示，在本地环境配置 <code>NODE_ENV=development</code> ，再看一下控制台是否输出了一些更详细的错误信息，参考 <a href=\"https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html\" target=\"_blank\" rel=\"external\">Introducing React’s Error Code System</a> 。</p>\n<p>如果这个错误只在 IE 11 浏览器环境出现，一般都是 ES6+ 的语法在IE存在兼容问题，一个比较通用的解决办法就是在项目中引入一个 <code>babel-polyfill</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i —save babel-polyfill</div></pre></td></tr></table></figure>\n<p>在项目入口，引入 <code>babel-polyfill</code> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>在 webpack 构建的时候会兼容性处理</p>\n</blockquote>\n<h2 id=\"在-IE-11-控制台报错：-Promise-is-undefined\"><a href=\"#在-IE-11-控制台报错：-Promise-is-undefined\" class=\"headerlink\" title=\"在 IE 11 控制台报错： Promise is undefined\"></a>在 IE 11 控制台报错： Promise is undefined</h2><p>IE 11 不支持 Promise 对象，解决办法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i —save es6-promise</div></pre></td></tr></table></figure>\n<p>在项目入口，引入<code>es6-promise</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'es6-promise/auto'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"在-IE-11-浏览器上-FontIcon-图标不显示\"><a href=\"#在-IE-11-浏览器上-FontIcon-图标不显示\" class=\"headerlink\" title=\"在 IE 11 浏览器上 FontIcon 图标不显示\"></a>在 IE 11 浏览器上 FontIcon 图标不显示</h2><p>这个问题和 React 没有关系，但是这里也记录一下。<br>在 IE11 会下载 .ttf/.woff 字体文件， 通过 Network 我们可以看到字体文件 <code>response headers</code> 中有一个 <code>Pragma：no-cache</code>,由于 IE 似乎有缓存和字体的问题，所有导致图标不能正常显示。所以删除 WEB 服务(Nginx..)中的 <code>Pragma：no-cache</code> 和 <code>Cache-Control：no-store</code> 就能正常访问。</p>\n<p>参考 <a href=\"https://github.com/FortAwesome/Font-Awesome/issues/6454\" target=\"_blank\" rel=\"external\">IE and Cache-Control</a></p>\n<h2 id=\"在-React-中使用-debounce\"><a href=\"#在-React-中使用-debounce\" class=\"headerlink\" title=\"在 React 中使用 debounce\"></a>在 React 中使用 debounce</h2><p>如果需要在 React 组件中使用 debounce 方法可以参考下面代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchBox</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"keyword\">this</span>.method = debounce(<span class=\"keyword\">this</span>.method,<span class=\"number\">300</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    method() &#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;input onKeyUp=&#123;e =&gt; &#123;</div><div class=\"line\">              e.persist();</div><div class=\"line\">              <span class=\"keyword\">this</span>.handleKeyDown(e);</div><div class=\"line\">            &#125;&#125;/&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>因为 <code>React</code> 中 <code>SyntheticEvent</code> 是共用的，也就是说 <code>SyntheticEvent</code>对象将会循环使用。而每次执行完事件后，它所有的属性都将会失效（所有属性的值都被置为了 <code>null</code>）。所以在调用 <code>debounce</code> 方法前，一定要先调用 <code>e.persist()</code>来移除 <code>SyntheticEvent</code> ，并允许 <code>event</code>对象被保留下来以用于你自己的代码。<br>参考文章:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/23123138/perform-debounce-in-react-js#answer-28046731\" target=\"_blank\" rel=\"external\">Perform debounce in React.js</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/events.html#event-pooling\" target=\"_blank\" rel=\"external\">React Document SyntheticEvent</a></li>\n</ul>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/simonguo\" target=\"_blank\" rel=\"external\">郭小铭</a>、<a href=\"https://github.com/hiyangguo\" target=\"_blank\" rel=\"external\">杨过</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"React-中-在-Controlled-受控制-的文本框中输入中文-onChange-会触发多次\"><a href=\"#React-中-在-Controlled-受控制-的文本框中输入中文-onChange-会触发多次\" class=\"headerlink\" title=\"React 中, 在 Controlled(受控制)的文本框中输入中文 onChange 会触发多次\"></a>React 中, 在 <code>Controlled</code>(受控制)的文本框中输入中文 <code>onChange</code> 会触发多次</h2><p><a href=\"https://github.com/facebook/react/issues/3926\" target=\"_blank\" rel=\"external\">Issues</a></p>\n<p>通过输入法输入中文,日文，不管哪种一种用拼音的、笔划的，只要按下键盘的动作都会触发文本框的 <code>change</code> 事件。 但是 <code>React</code> 中的受控组件都通过触发 <code>change</code> 事件后得到的值再去更新组件的<code>value</code>, 这样不停的触发 <code>change</code>，导致 <code>value</code> 一直在更新，组件就一直在 render,  可能会造成组件运行逻辑问题，输入框内出现很多字符，而且中文输入不进去。</p>\n<p>在 DOM events 中另外有 3 个事件可以辅助监听一段文字的输入：</p>\n<ul>\n<li>compositionstart : 事件触发于一段文字的输入之前；</li>\n<li>compositionupdate : 事件触发于字符被输入到一段文字的时候；</li>\n<li>compositionend : 事件触发于一段文字的输入完成。</li>\n</ul>\n<p>我们可以通过这 3 个事件判断当前输入是否完整的输入，再触发 <code>onChange</code> 事件，这样就能解决多次触发 <code>onChange</code> 的问题。 还有一个重要的问题，虽然 <code>onChange</code> 要等一次完整输入后才触发，但是文本框上的显示需要是实时的，所以还要考虑在 <code>state</code> 中维护一个 <code>innerValue</code> 做实时更新，这样就没有问题了。</p>\n<blockquote>\n<p>另外这 3 个事件在各个浏览器上的兼容性不一样，所以还要考虑兼容性的问题。 具体详细的实现可以参考 <a href=\"https://github.com/rsuite/form-lib/blob/master/src/createFormControl.js\" target=\"_blank\" rel=\"external\">form-lib</a>。</p>\n</blockquote>\n<h2 id=\"Warning-It-looks-like-you’re-using-a-minified-copy-of-the-development-build-of-React-When-deploying-React-apps-to-production-make-sure-to-use-the-production-build-which-skips-development-warnings-and-is-faster\"><a href=\"#Warning-It-looks-like-you’re-using-a-minified-copy-of-the-development-build-of-React-When-deploying-React-apps-to-production-make-sure-to-use-the-production-build-which-skips-development-warnings-and-is-faster\" class=\"headerlink\" title=\"Warning: It looks like you’re using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster.\"></a>Warning: It looks like you’re using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster.</h2><p>当 React 升级到 v15.* 以后，可能会见到这个警告，它是意思说你在生产环境中使用的是一个开发环境 minified 的代码。 </p>\n<p>那 React 它是怎么办判断你正在访问的是生产环境，而不是开发环境呢？ 它是通过 webpack 知道的，因为最终发布生产环境的代码都是通过 webpack 命令打包。如果你是在开发环境，那肯定是用 webpack-dev-server。  在生产环境中不应该包括开发中使用的所有额外代码，所以在 webpack 部署环境中需要添加以下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">  plugins:[</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">      compress:&#123;</div><div class=\"line\">        warnings: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考<a href=\"http://dev.topheman.com/make-your-react-production-minified-version-with-webpack/\" target=\"_blank\" rel=\"external\">Make your own React production version with webpack</a></p>\n<h2 id=\"setState-…-Can-only-update-a-mounted-or-mounting-component-This-usually-means-you-called-setState-on-an-unmounted-component-This-is-a-no-op\"><a href=\"#setState-…-Can-only-update-a-mounted-or-mounting-component-This-usually-means-you-called-setState-on-an-unmounted-component-This-is-a-no-op\" class=\"headerlink\" title=\"setState(…): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.\"></a>setState(…): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.</h2><p>这个警告是说，在一个已经卸载的组件上调用 <code>setState</code> 是无效的。出现这种情况一般都是异步操作造成的，比如一个异步数据请求，响应后执行 <code>setState</code> 去更新组件，但是如果在异步请求未完成前，路由发生变化，页面当前组件被卸载，这个时候异步请求没有被中止，导致等请求完成后就会执行 <code>setState</code> 试图去更新组件，就会报当前错误。</p>\n<p>解决办法很简单，一般都是在执行 <code>setState</code> 之前判断一下当前组件是否被卸载，如果没有被卸载，才执行 <code>setState</code>。在 ES6 以前可以通过 <code>this.isMounted()</code> 来判断当前组件是否装载，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isMounted()) &#123; <span class=\"comment\">// This is bad.</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;...&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是在 ES6 以后不能用这种方式，这是一种反模式，参考<a href=\"https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\" target=\"_blank\" rel=\"external\">isMounted is an Antipattern</a></p>\n<p>可以利用组件的生命周期自己维护一个 <code>isMounted</code> 状态， 在 <code>componentDidMount</code> 中把 <code>isMounted</code> 设置为 <code>true</code>,<br>在 <code>componentWillUnmount</code> 再将 <code>isMounted</code> 设置为 <code>false</code>。 通过 <code>isMounted</code> 变量来判断组件是否装载。</p>\n<h2 id=\"Each-child-in-an-array-or-iterator-should-have-a-unique-key-prop\"><a href=\"#Each-child-in-an-array-or-iterator-should-have-a-unique-key-prop\" class=\"headerlink\" title=\"Each child in an array or iterator should have a unique key prop.\"></a>Each child in an array or iterator should have a unique <code>key</code> prop.</h2><p>这个警告很明确，在遍历子元素的时候，每一个子元素都应该有一个唯一的 <code>key</code>。</p>\n<p>参考官网相关说明 <a href=\"https://facebook.github.io/react/docs/lists-and-keys.html#keys\" target=\"_blank\" rel=\"external\">lists and keys</a></p>\n<p>但是这里需要注意，避免使用数组的 index 来作为属性 key 的值，推荐使用唯一 ID。<br>参考 <a href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\" target=\"_blank\" rel=\"external\">Index as a key is an anti-pattern</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span></div><div class=\"line\">  &lt;li key=&#123;todo.id&#125;&gt;</div><div class=\"line\">    &#123;todo.text&#125;</div><div class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></div><div class=\"line\"><span class=\"regexp\">);</span></div></pre></td></tr></table></figure>\n<h2 id=\"在-IE-11-控制台报错：Objects-are-not-valid-as-a-React-child\"><a href=\"#在-IE-11-控制台报错：Objects-are-not-valid-as-a-React-child\" class=\"headerlink\" title=\"在 IE 11 控制台报错：Objects are not valid as a React child\"></a>在 IE 11 控制台报错：Objects are not valid as a React child</h2><p>错误的全文: <a href=\"https://facebook.github.io/react/docs/error-decoder.html?invariant=31&amp;args%5B%5D=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&amp;args%5B%5D=\" target=\"_blank\" rel=\"external\">error-decoder</a></p>\n<p>这问题一般会在开发环境中遇到，在使用 React 15.4 以后，如果使用了 <code>react-hot-loader</code> 则必须在热加载之前加载 <code>babel-polyfill</code>, 在你的 <code>webpack.config.js</code> 中参考如下配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry: [</div><div class=\"line\">  <span class=\"string\">'babel-polyfill'</span>,</div><div class=\"line\">  <span class=\"string\">'react-hot-loader/patch'</span>,</div><div class=\"line\">  <span class=\"string\">'webpack-dev-server/client?http://127.0.0.1:3000'</span>,</div><div class=\"line\">  <span class=\"string\">'webpack/hot/only-dev-server'</span>,</div><div class=\"line\">  path.resolve(__dirname, <span class=\"string\">'./scr/index'</span>)</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h2 id=\"在-IE-11-控制台报错：Minified-exception-occurred-use-the-non-minified-dev-environment-for-the-full-error-message-and-additional-helpful-warnings\"><a href=\"#在-IE-11-控制台报错：Minified-exception-occurred-use-the-non-minified-dev-environment-for-the-full-error-message-and-additional-helpful-warnings\" class=\"headerlink\" title=\"在 IE 11 控制台报错：Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\"></a>在 IE 11 控制台报错：Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.</h2><p>如果出现这个错误是提示，在本地环境配置 <code>NODE_ENV=development</code> ，再看一下控制台是否输出了一些更详细的错误信息，参考 <a href=\"https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html\" target=\"_blank\" rel=\"external\">Introducing React’s Error Code System</a> 。</p>\n<p>如果这个错误只在 IE 11 浏览器环境出现，一般都是 ES6+ 的语法在IE存在兼容问题，一个比较通用的解决办法就是在项目中引入一个 <code>babel-polyfill</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i —save babel-polyfill</div></pre></td></tr></table></figure>\n<p>在项目入口，引入 <code>babel-polyfill</code> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>在 webpack 构建的时候会兼容性处理</p>\n</blockquote>\n<h2 id=\"在-IE-11-控制台报错：-Promise-is-undefined\"><a href=\"#在-IE-11-控制台报错：-Promise-is-undefined\" class=\"headerlink\" title=\"在 IE 11 控制台报错： Promise is undefined\"></a>在 IE 11 控制台报错： Promise is undefined</h2><p>IE 11 不支持 Promise 对象，解决办法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i —save es6-promise</div></pre></td></tr></table></figure>\n<p>在项目入口，引入<code>es6-promise</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'es6-promise/auto'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"在-IE-11-浏览器上-FontIcon-图标不显示\"><a href=\"#在-IE-11-浏览器上-FontIcon-图标不显示\" class=\"headerlink\" title=\"在 IE 11 浏览器上 FontIcon 图标不显示\"></a>在 IE 11 浏览器上 FontIcon 图标不显示</h2><p>这个问题和 React 没有关系，但是这里也记录一下。<br>在 IE11 会下载 .ttf/.woff 字体文件， 通过 Network 我们可以看到字体文件 <code>response headers</code> 中有一个 <code>Pragma：no-cache</code>,由于 IE 似乎有缓存和字体的问题，所有导致图标不能正常显示。所以删除 WEB 服务(Nginx..)中的 <code>Pragma：no-cache</code> 和 <code>Cache-Control：no-store</code> 就能正常访问。</p>\n<p>参考 <a href=\"https://github.com/FortAwesome/Font-Awesome/issues/6454\" target=\"_blank\" rel=\"external\">IE and Cache-Control</a></p>\n<h2 id=\"在-React-中使用-debounce\"><a href=\"#在-React-中使用-debounce\" class=\"headerlink\" title=\"在 React 中使用 debounce\"></a>在 React 中使用 debounce</h2><p>如果需要在 React 组件中使用 debounce 方法可以参考下面代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchBox</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"keyword\">this</span>.method = debounce(<span class=\"keyword\">this</span>.method,<span class=\"number\">300</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    method() &#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;input onKeyUp=&#123;e =&gt; &#123;</div><div class=\"line\">              e.persist();</div><div class=\"line\">              <span class=\"keyword\">this</span>.handleKeyDown(e);</div><div class=\"line\">            &#125;&#125;/&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>因为 <code>React</code> 中 <code>SyntheticEvent</code> 是共用的，也就是说 <code>SyntheticEvent</code>对象将会循环使用。而每次执行完事件后，它所有的属性都将会失效（所有属性的值都被置为了 <code>null</code>）。所以在调用 <code>debounce</code> 方法前，一定要先调用 <code>e.persist()</code>来移除 <code>SyntheticEvent</code> ，并允许 <code>event</code>对象被保留下来以用于你自己的代码。<br>参考文章:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/23123138/perform-debounce-in-react-js#answer-28046731\" target=\"_blank\" rel=\"external\">Perform debounce in React.js</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/events.html#event-pooling\" target=\"_blank\" rel=\"external\">React Document SyntheticEvent</a></li>\n</ul>\n<blockquote>\n<p>本文作者：<a href=\"https://github.com/simonguo\" target=\"_blank\" rel=\"external\">郭小铭</a>、<a href=\"https://github.com/hiyangguo\" target=\"_blank\" rel=\"external\">杨过</a></p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/git-tutorials/git-outline.png","slug":"git-outline.png","post":"cj6kctsel0003m079heqzwvgv","modified":1,"renderable":0},{"_id":"source/_posts/modern-front-end-develop/snipaste_20170730_122053.png","slug":"snipaste_20170730_122053.png","post":"cj6kctsep0004m079quqfv974","modified":1,"renderable":0},{"_id":"source/_posts/test-coverage/2.png","slug":"2.png","post":"cj6kctsf1000am079d2hw5mj4","modified":1,"renderable":0},{"_id":"source/_posts/test-coverage/1.png","post":"cj6kctsf1000am079d2hw5mj4","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/1-way.jpg","post":"cj6kctsep0004m079quqfv974","slug":"1-way.jpg","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/1233754-389a7d4f147c3857.jpg","post":"cj6kctsep0004m079quqfv974","slug":"1233754-389a7d4f147c3857.jpg","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/2-way.png","post":"cj6kctsep0004m079quqfv974","slug":"2-way.png","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/300px-Tim_Berners-Lee_closeup.jpg","post":"cj6kctsep0004m079quqfv974","slug":"300px-Tim_Berners-Lee_closeup.jpg","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/CGI.png","post":"cj6kctsep0004m079quqfv974","slug":"CGI.png","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/FE-MVC.jpg","post":"cj6kctsep0004m079quqfv974","slug":"FE-MVC.jpg","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/FLUX.png","post":"cj6kctsep0004m079quqfv974","slug":"FLUX.png","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/MV.png","post":"cj6kctsep0004m079quqfv974","slug":"MV.png","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/MVC.gif","post":"cj6kctsep0004m079quqfv974","slug":"MVC.gif","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/MVC.png","post":"cj6kctsep0004m079quqfv974","slug":"MVC.png","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/MVP.jpg","post":"cj6kctsep0004m079quqfv974","slug":"MVP.jpg","modified":1,"renderable":1},{"_id":"source/_posts/modern-front-end-develop/MVVM.png","post":"cj6kctsep0004m079quqfv974","slug":"MVVM.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/cover-end.jpg","slug":"cover-end.jpg","post":"cj6kctsel0003m079heqzwvgv","modified":1,"renderable":0},{"_id":"source/_posts/git-tutorials/cover.jpg","slug":"cover.jpg","post":"cj6kctsel0003m079heqzwvgv","modified":1,"renderable":0},{"_id":"source/_posts/git-tutorials/git-commit-ammend1.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-commit-ammend1.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-commit-ammend2.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-commit-ammend2.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-fetch.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-fetch.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-init-bare.svg","post":"cj6kctsel0003m079heqzwvgv","slug":"git-init-bare.svg","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-merge.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-merge.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-rebase-1.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-rebase-1.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-rebase-2.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-rebase-2.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-rebase-3.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-rebase-3.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-rebase-4.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-rebase-4.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-reflog.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-reflog.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-revert-show1.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-revert-show1.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-revert-show2.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-revert-show2.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-revert.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-revert.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/git-status-screenshots.png","post":"cj6kctsel0003m079heqzwvgv","slug":"git-status-screenshots.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/version-control-1.png","post":"cj6kctsel0003m079heqzwvgv","slug":"version-control-1.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/version-control-2.png","post":"cj6kctsel0003m079heqzwvgv","slug":"version-control-2.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/version-control-3.png","post":"cj6kctsel0003m079heqzwvgv","slug":"version-control-3.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/workflow.png","post":"cj6kctsel0003m079heqzwvgv","slug":"workflow.png","modified":1,"renderable":1},{"_id":"source/_posts/git-tutorials/workflow2.png","slug":"workflow2.png","post":"cj6kctsel0003m079heqzwvgv","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj6kctsf00008m079yh989nqa","tag_id":"cj5c3iigh0000zjs67u2co2hc","_id":"cj6kctsf2000bm079vxj5cqyd"},{"post_id":"cj6kctse80000m079bl28lbtv","tag_id":"cj6kctsek0002m079vw9s79wt","_id":"cj6kctsfb000em0795yfgez87"},{"post_id":"cj6kctse80000m079bl28lbtv","tag_id":"cj6kctsey0006m079m8aaxkyb","_id":"cj6kctsfb000fm0794w9ng3sm"},{"post_id":"cj6kctse80000m079bl28lbtv","tag_id":"cj6kctsf10009m0794vd1k8d9","_id":"cj6kctsfd000hm079mbyy0d09"},{"post_id":"cj6kctseh0001m079ojkialsb","tag_id":"cj6kctsek0002m079vw9s79wt","_id":"cj6kctsff000km0798kq6fjfk"},{"post_id":"cj6kctseh0001m079ojkialsb","tag_id":"cj6kctsey0006m079m8aaxkyb","_id":"cj6kctsff000lm0799lfv3lbu"},{"post_id":"cj6kctseh0001m079ojkialsb","tag_id":"cj6kctsf10009m0794vd1k8d9","_id":"cj6kctsff000nm079tm24owyo"},{"post_id":"cj6kctsel0003m079heqzwvgv","tag_id":"cj6kctsfe000jm0790u5hicra","_id":"cj6kctsfh000pm079d3ioi0ji"},{"post_id":"cj6kctsel0003m079heqzwvgv","tag_id":"cj6kctsff000mm0790ao697gt","_id":"cj6kctsfh000qm079dzsgy4hk"},{"post_id":"cj6kctsep0004m079quqfv974","tag_id":"cj6kctsfg000om079x1y49zju","_id":"cj6kctsfi000um079tsk7t9yp"},{"post_id":"cj6kctsep0004m079quqfv974","tag_id":"cj6kctsfh000rm079b46ccdc6","_id":"cj6kctsfi000vm079ztka7k5z"},{"post_id":"cj6kctsep0004m079quqfv974","tag_id":"cj6kctsfi000sm079iho4b1fn","_id":"cj6kctsfj000xm0796lvly8mw"},{"post_id":"cj6kctsex0005m079ykj36fe6","tag_id":"cj6kctsfi000tm079e5fazxcm","_id":"cj6kctsfj000ym079522tipni"},{"post_id":"cj6kctsez0007m0793p8llljh","tag_id":"cj6kctsfi000wm0795fyrda07","_id":"cj6kctsfs0013m079ad6bb8wp"},{"post_id":"cj6kctsez0007m0793p8llljh","tag_id":"cj6kctsfj000zm079e9z03jot","_id":"cj6kctsfs0014m079asc36rnc"},{"post_id":"cj6kctsez0007m0793p8llljh","tag_id":"cj6kctsfl0010m0797p81iu43","_id":"cj6kctsfs0016m079npoli32d"},{"post_id":"cj6kctsez0007m0793p8llljh","tag_id":"cj6kctsfl0011m079fg9bt9x8","_id":"cj6kctsft0017m079y3ajgadl"},{"post_id":"cj6kctsf1000am079d2hw5mj4","tag_id":"cj6kctsfi000wm0795fyrda07","_id":"cj6kctsfu001bm079886k1vil"},{"post_id":"cj6kctsf1000am079d2hw5mj4","tag_id":"cj6kctsfs0015m079nk6o04d2","_id":"cj6kctsfu001cm079o2qz54vq"},{"post_id":"cj6kctsf1000am079d2hw5mj4","tag_id":"cj6kctsft0018m0798b4x5vdz","_id":"cj6kctsfu001em079f5bi4k86"},{"post_id":"cj6kctsf1000am079d2hw5mj4","tag_id":"cj6kctsft0019m079l9rf5nm4","_id":"cj6kctsfu001fm0793vnk65um"},{"post_id":"cj6kctsf3000cm079j1tof7ro","tag_id":"cj6kctsfi000wm0795fyrda07","_id":"cj6kctsfv001gm079g49padl8"},{"post_id":"cj6kctsf3000cm079j1tof7ro","tag_id":"cj6kctsfj000zm079e9z03jot","_id":"cj6kctsfv001hm079m6pn9u8b"}],"Tag":[{"name":"HyperS","_id":"cj5c3iigh0000zjs67u2co2hc"},{"name":"Sass","_id":"cj6kctsek0002m079vw9s79wt"},{"name":"CSS","_id":"cj6kctsey0006m079m8aaxkyb"},{"name":"Compass","_id":"cj6kctsf10009m0794vd1k8d9"},{"name":"git","_id":"cj6kctsfe000jm0790u5hicra"},{"name":"入门教程","_id":"cj6kctsff000mm0790ao697gt"},{"name":"mvc","_id":"cj6kctsfg000om079x1y49zju"},{"name":"web框架","_id":"cj6kctsfh000rm079b46ccdc6"},{"name":"mvvm","_id":"cj6kctsfi000sm079iho4b1fn"},{"name":"IE","_id":"cj6kctsfi000tm079e5fazxcm"},{"name":"前端","_id":"cj6kctsfi000wm0795fyrda07"},{"name":"React","_id":"cj6kctsfj000zm079e9z03jot"},{"name":"权限","_id":"cj6kctsfl0010m0797p81iu43"},{"name":"permission","_id":"cj6kctsfl0011m079fg9bt9x8"},{"name":"测试","_id":"cj6kctsfs0015m079nk6o04d2"},{"name":"test","_id":"cj6kctsft0018m0798b4x5vdz"},{"name":"coverage","_id":"cj6kctsft0019m079l9rf5nm4"}]}}